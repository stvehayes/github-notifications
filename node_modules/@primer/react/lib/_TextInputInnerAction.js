"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _ = require(".");

var _sx = require("./sx");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const invisibleButtonStyleOverrides = {
  color: 'fg.default',
  paddingTop: '2px',
  paddingRight: '4px',
  paddingBottom: '2px',
  paddingLeft: '4px',
  position: 'relative',
  '@media (pointer: coarse)': {
    ':after': {
      content: '""',
      position: 'absolute',
      left: 0,
      right: 0,
      transform: 'translateY(-50%)',
      top: '50%',
      minHeight: '44px'
    }
  }
};

const ConditionalTooltip = ({
  'aria-label': ariaLabel,
  children
}) => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, ariaLabel ? /*#__PURE__*/_react.default.createElement(_.Tooltip, {
  "aria-label": ariaLabel,
  sx: {
    /* inline-block is used to ensure the tooltip dimensions don't
       collapse when being used with `grid` or `inline` children */
    display: 'inline-block'
  }
}, children) : children);

const TextInputAction = /*#__PURE__*/(0, _react.forwardRef)(({
  'aria-label': ariaLabel,
  children,
  icon,
  sx: sxProp,
  variant,
  ...rest
}, forwardedRef) => {
  const sx = variant === 'invisible' ? (0, _sx.merge)(invisibleButtonStyleOverrides, sxProp || {}) : sxProp || {};

  if (icon && !ariaLabel || !children && !ariaLabel) {
    // eslint-disable-next-line no-console
    console.warn('Use the `aria-label` prop to provide an accessible label for assistive technology');
  }

  return /*#__PURE__*/_react.default.createElement(_.Box, {
    as: "span",
    className: "TextInput-action",
    margin: 1
  }, icon && !children ? /*#__PURE__*/_react.default.createElement(_.Tooltip, {
    "aria-label": ariaLabel
  }, /*#__PURE__*/_react.default.createElement(_.IconButton, _extends({
    variant: variant,
    type: "button",
    icon: icon,
    "aria-label": ariaLabel,
    size: "small",
    sx: sx
  }, rest, {
    ref: forwardedRef
  }))) : /*#__PURE__*/_react.default.createElement(ConditionalTooltip, {
    "aria-label": ariaLabel
  }, /*#__PURE__*/_react.default.createElement(_.Button, _extends({
    variant: variant,
    size: "small",
    type: "button",
    sx: sx
  }, rest, {
    ref: forwardedRef
  }), children)));
});
TextInputAction.defaultProps = {
  variant: 'invisible'
};
var _default = TextInputAction;
exports.default = _default;