{"ast":null,"code":"import React from 'react';\nimport { iterateFocusableElements } from '@primer/behaviors/utils';\nimport { useProvidedRefOrCreate } from './useProvidedRefOrCreate';\nexport const useMenuInitialFocus = (open, onOpen, providedRef) => {\n  const containerRef = useProvidedRefOrCreate(providedRef);\n  const [openingKey, setOpeningKey] = React.useState(undefined);\n\n  const openWithFocus = (gesture, event) => {\n    if (gesture === 'anchor-key-press' && event) setOpeningKey(event.code);else setOpeningKey(undefined);\n    if (typeof onOpen === 'function') onOpen(gesture, event);\n  };\n  /**\n   * Pick the first element to focus based on the key used to open the Menu\n   * ArrowDown | Space | Enter: first element\n   * ArrowUp: last element\n   */\n\n\n  React.useEffect(() => {\n    if (!open) return;\n    if (!openingKey || !containerRef.current) return;\n    const iterable = iterateFocusableElements(containerRef.current);\n\n    if (['ArrowDown', 'Space', 'Enter'].includes(openingKey)) {\n      const firstElement = iterable.next().value;\n      /** We push imperative focus to the next tick to prevent React's batching */\n\n      setTimeout(() => firstElement === null || firstElement === void 0 ? void 0 : firstElement.focus());\n    } else if (['ArrowUp'].includes(openingKey)) {\n      const elements = [...iterable];\n      const lastElement = elements[elements.length - 1];\n      setTimeout(() => lastElement.focus());\n    }\n  }, [open, openingKey, containerRef]);\n  return {\n    containerRef,\n    openWithFocus\n  };\n};","map":{"version":3,"sources":["/Users/steve/Documents/repos/notifications/node_modules/@primer/react/lib-esm/hooks/useMenuInitialFocus.js"],"names":["React","iterateFocusableElements","useProvidedRefOrCreate","useMenuInitialFocus","open","onOpen","providedRef","containerRef","openingKey","setOpeningKey","useState","undefined","openWithFocus","gesture","event","code","useEffect","current","iterable","includes","firstElement","next","value","setTimeout","focus","elements","lastElement","length"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,wBAAT,QAAyC,yBAAzC;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AACA,OAAO,MAAMC,mBAAmB,GAAG,CAACC,IAAD,EAAOC,MAAP,EAAeC,WAAf,KAA+B;AAChE,QAAMC,YAAY,GAAGL,sBAAsB,CAACI,WAAD,CAA3C;AACA,QAAM,CAACE,UAAD,EAAaC,aAAb,IAA8BT,KAAK,CAACU,QAAN,CAAeC,SAAf,CAApC;;AAEA,QAAMC,aAAa,GAAG,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACxC,QAAID,OAAO,KAAK,kBAAZ,IAAkCC,KAAtC,EAA6CL,aAAa,CAACK,KAAK,CAACC,IAAP,CAAb,CAA7C,KAA4EN,aAAa,CAACE,SAAD,CAAb;AAC5E,QAAI,OAAON,MAAP,KAAkB,UAAtB,EAAkCA,MAAM,CAACQ,OAAD,EAAUC,KAAV,CAAN;AACnC,GAHD;AAIA;AACF;AACA;AACA;AACA;;;AAGEd,EAAAA,KAAK,CAACgB,SAAN,CAAgB,MAAM;AACpB,QAAI,CAACZ,IAAL,EAAW;AACX,QAAI,CAACI,UAAD,IAAe,CAACD,YAAY,CAACU,OAAjC,EAA0C;AAC1C,UAAMC,QAAQ,GAAGjB,wBAAwB,CAACM,YAAY,CAACU,OAAd,CAAzC;;AAEA,QAAI,CAAC,WAAD,EAAc,OAAd,EAAuB,OAAvB,EAAgCE,QAAhC,CAAyCX,UAAzC,CAAJ,EAA0D;AACxD,YAAMY,YAAY,GAAGF,QAAQ,CAACG,IAAT,GAAgBC,KAArC;AACA;;AAEAC,MAAAA,UAAU,CAAC,MAAMH,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,YAAY,CAACI,KAAb,EAAnE,CAAV;AACD,KALD,MAKO,IAAI,CAAC,SAAD,EAAYL,QAAZ,CAAqBX,UAArB,CAAJ,EAAsC;AAC3C,YAAMiB,QAAQ,GAAG,CAAC,GAAGP,QAAJ,CAAjB;AACA,YAAMQ,WAAW,GAAGD,QAAQ,CAACA,QAAQ,CAACE,MAAT,GAAkB,CAAnB,CAA5B;AACAJ,MAAAA,UAAU,CAAC,MAAMG,WAAW,CAACF,KAAZ,EAAP,CAAV;AACD;AACF,GAfD,EAeG,CAACpB,IAAD,EAAOI,UAAP,EAAmBD,YAAnB,CAfH;AAgBA,SAAO;AACLA,IAAAA,YADK;AAELK,IAAAA;AAFK,GAAP;AAID,CAnCM","sourcesContent":["import React from 'react';\nimport { iterateFocusableElements } from '@primer/behaviors/utils';\nimport { useProvidedRefOrCreate } from './useProvidedRefOrCreate';\nexport const useMenuInitialFocus = (open, onOpen, providedRef) => {\n  const containerRef = useProvidedRefOrCreate(providedRef);\n  const [openingKey, setOpeningKey] = React.useState(undefined);\n\n  const openWithFocus = (gesture, event) => {\n    if (gesture === 'anchor-key-press' && event) setOpeningKey(event.code);else setOpeningKey(undefined);\n    if (typeof onOpen === 'function') onOpen(gesture, event);\n  };\n  /**\n   * Pick the first element to focus based on the key used to open the Menu\n   * ArrowDown | Space | Enter: first element\n   * ArrowUp: last element\n   */\n\n\n  React.useEffect(() => {\n    if (!open) return;\n    if (!openingKey || !containerRef.current) return;\n    const iterable = iterateFocusableElements(containerRef.current);\n\n    if (['ArrowDown', 'Space', 'Enter'].includes(openingKey)) {\n      const firstElement = iterable.next().value;\n      /** We push imperative focus to the next tick to prevent React's batching */\n\n      setTimeout(() => firstElement === null || firstElement === void 0 ? void 0 : firstElement.focus());\n    } else if (['ArrowUp'].includes(openingKey)) {\n      const elements = [...iterable];\n      const lastElement = elements[elements.length - 1];\n      setTimeout(() => lastElement.focus());\n    }\n  }, [open, openingKey, containerRef]);\n  return {\n    containerRef,\n    openWithFocus\n  };\n};"]},"metadata":{},"sourceType":"module"}