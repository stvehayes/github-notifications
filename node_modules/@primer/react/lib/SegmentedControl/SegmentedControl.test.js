"use strict";

var _react = _interopRequireDefault(require("react"));

require("@testing-library/jest-dom/extend-expect");

var _react2 = require("@testing-library/react");

var _octiconsReact = require("@primer/octicons-react");

var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));

var _testing = require("../utils/testing");

var _ = require(".");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// TODO: update import when we move this to the global index
const segmentData = [{
  label: 'Preview',
  iconLabel: 'EyeIcon',
  icon: () => /*#__PURE__*/_react.default.createElement(_octiconsReact.EyeIcon, {
    "aria-label": "EyeIcon"
  })
}, {
  label: 'Raw',
  iconLabel: 'FileCodeIcon',
  icon: () => /*#__PURE__*/_react.default.createElement(_octiconsReact.FileCodeIcon, {
    "aria-label": "FileCodeIcon"
  })
}, {
  label: 'Blame',
  iconLabel: 'PeopleIcon',
  icon: () => /*#__PURE__*/_react.default.createElement(_octiconsReact.PeopleIcon, {
    "aria-label": "PeopleIcon"
  })
}]; // TODO: improve test coverage

describe('SegmentedControl', () => {
  (0, _testing.behavesAsComponent)({
    Component: _.SegmentedControl,
    toRender: () => /*#__PURE__*/_react.default.createElement(_.SegmentedControl, {
      "aria-label": "File view"
    }, /*#__PURE__*/_react.default.createElement(_.SegmentedControl.Button, {
      selected: true
    }, "Preview"), /*#__PURE__*/_react.default.createElement(_.SegmentedControl.Button, null, "Raw"), /*#__PURE__*/_react.default.createElement(_.SegmentedControl.Button, null, "Blame"))
  });
  (0, _testing.checkExports)('SegmentedControl', {
    default: undefined,
    SegmentedControl: _.SegmentedControl
  });
  it('renders with a selected segment', () => {
    const {
      getByText
    } = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_.SegmentedControl, {
      "aria-label": "File view"
    }, segmentData.map(({
      label
    }, index) => /*#__PURE__*/_react.default.createElement(_.SegmentedControl.Button, {
      selected: index === 1,
      key: label
    }, label))));
    const selectedButton = getByText('Raw').closest('button');
    expect(selectedButton === null || selectedButton === void 0 ? void 0 : selectedButton.getAttribute('aria-current')).toBe('true');
  });
  it('renders the first segment as selected if no child has the `selected` prop passed', () => {
    const {
      getByText
    } = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_.SegmentedControl, {
      "aria-label": "File view"
    }, segmentData.map(({
      label
    }) => /*#__PURE__*/_react.default.createElement(_.SegmentedControl.Button, {
      key: label
    }, label))));
    const selectedButton = getByText('Preview').closest('button');
    expect(selectedButton === null || selectedButton === void 0 ? void 0 : selectedButton.getAttribute('aria-current')).toBe('true');
  });
  it('renders segments with segment labels that have leading icons', () => {
    const {
      getByLabelText
    } = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_.SegmentedControl, {
      "aria-label": "File view"
    }, segmentData.map(({
      label,
      icon
    }, index) => /*#__PURE__*/_react.default.createElement(_.SegmentedControl.Button, {
      selected: index === 0,
      leadingIcon: icon,
      key: label
    }, label))));

    for (const datum of segmentData) {
      const iconEl = getByLabelText(datum.iconLabel);
      expect(iconEl).toBeDefined();
    }
  });
  it('renders segments with accessible icon-only labels', () => {
    const {
      getByLabelText
    } = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_.SegmentedControl, {
      "aria-label": "File view"
    }, segmentData.map(({
      label,
      icon
    }) => /*#__PURE__*/_react.default.createElement(_.SegmentedControl.IconButton, {
      icon: icon,
      "aria-label": label,
      key: label
    }))));

    for (const datum of segmentData) {
      const labelledButton = getByLabelText(datum.label);
      expect(labelledButton).toBeDefined();
    }
  });
  it('calls onChange with index of clicked segment button', () => {
    const handleChange = jest.fn();
    const {
      getByText
    } = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_.SegmentedControl, {
      "aria-label": "File view",
      onChange: handleChange
    }, segmentData.map(({
      label
    }, index) => /*#__PURE__*/_react.default.createElement(_.SegmentedControl.Button, {
      selected: index === 0,
      key: label
    }, label))));
    const buttonToClick = getByText('Raw').closest('button');
    expect(handleChange).not.toHaveBeenCalled();

    if (buttonToClick) {
      _userEvent.default.click(buttonToClick);
    }

    expect(handleChange).toHaveBeenCalledWith(1);
  });
  it('calls segment button onClick if it is passed', () => {
    const handleClick = jest.fn();
    const {
      getByText
    } = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_.SegmentedControl, {
      "aria-label": "File view"
    }, segmentData.map(({
      label
    }, index) => /*#__PURE__*/_react.default.createElement(_.SegmentedControl.Button, {
      selected: index === 0,
      onClick: index === 1 ? handleClick : undefined,
      key: label
    }, label))));
    const buttonToClick = getByText('Raw').closest('button');
    expect(handleClick).not.toHaveBeenCalled();

    if (buttonToClick) {
      _userEvent.default.click(buttonToClick);
    }

    expect(handleClick).toHaveBeenCalled();
  });
});
(0, _testing.checkStoriesForAxeViolations)('examples', '../SegmentedControl/');
(0, _testing.checkStoriesForAxeViolations)('fixtures', '../SegmentedControl/');