{"ast":null,"code":"import { useCallback, useEffect, useState, useRef } from 'react';\n\nfunction useDetails(_ref) {\n  let {\n    ref,\n    closeOnOutsideClick,\n    defaultOpen,\n    onClickOutside\n  } = _ref;\n  const [open, setOpen] = useState(defaultOpen);\n  const backupRef = useRef(null);\n  const customRef = ref !== null && ref !== void 0 ? ref : backupRef;\n  const onClickOutsideInternal = useCallback(event => {\n    const {\n      current\n    } = customRef;\n    const eventTarget = event.target;\n    const closest = eventTarget.closest('details');\n\n    if (closest !== current) {\n      onClickOutside && onClickOutside(event);\n\n      if (!event.defaultPrevented) {\n        setOpen(false);\n      }\n    }\n  }, [customRef, setOpen, onClickOutside]); // handles the overlay behavior - closing the menu when clicking outside of it\n\n  useEffect(() => {\n    if (open && closeOnOutsideClick) {\n      document.addEventListener('click', onClickOutsideInternal);\n      return () => {\n        document.removeEventListener('click', onClickOutsideInternal);\n      };\n    }\n  }, [open, closeOnOutsideClick, onClickOutsideInternal]);\n\n  const handleToggle = e => {\n    if (!e.defaultPrevented) {\n      const eventTarget = e.target;\n      setOpen(eventTarget.open);\n    }\n  };\n\n  const getDetailsProps = () => {\n    return {\n      onToggle: handleToggle,\n      open,\n      ref: customRef\n    };\n  };\n\n  return {\n    open,\n    setOpen,\n    getDetailsProps\n  };\n}\n\nexport default useDetails;","map":{"version":3,"sources":["/Users/steve/Documents/repos/github-notifications/node_modules/@primer/react/lib-esm/hooks/useDetails.js"],"names":["useCallback","useEffect","useState","useRef","useDetails","ref","closeOnOutsideClick","defaultOpen","onClickOutside","open","setOpen","backupRef","customRef","onClickOutsideInternal","event","current","eventTarget","target","closest","defaultPrevented","document","addEventListener","removeEventListener","handleToggle","e","getDetailsProps","onToggle"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,EAA2CC,MAA3C,QAAyD,OAAzD;;AAEA,SAASC,UAAT,OAKG;AAAA,MALiB;AAClBC,IAAAA,GADkB;AAElBC,IAAAA,mBAFkB;AAGlBC,IAAAA,WAHkB;AAIlBC,IAAAA;AAJkB,GAKjB;AACD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAACK,WAAD,CAAhC;AACA,QAAMI,SAAS,GAAGR,MAAM,CAAC,IAAD,CAAxB;AACA,QAAMS,SAAS,GAAGP,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAK,KAAK,CAA7B,GAAiCA,GAAjC,GAAuCM,SAAzD;AACA,QAAME,sBAAsB,GAAGb,WAAW,CAACc,KAAK,IAAI;AAClD,UAAM;AACJC,MAAAA;AADI,QAEFH,SAFJ;AAGA,UAAMI,WAAW,GAAGF,KAAK,CAACG,MAA1B;AACA,UAAMC,OAAO,GAAGF,WAAW,CAACE,OAAZ,CAAoB,SAApB,CAAhB;;AAEA,QAAIA,OAAO,KAAKH,OAAhB,EAAyB;AACvBP,MAAAA,cAAc,IAAIA,cAAc,CAACM,KAAD,CAAhC;;AAEA,UAAI,CAACA,KAAK,CAACK,gBAAX,EAA6B;AAC3BT,QAAAA,OAAO,CAAC,KAAD,CAAP;AACD;AACF;AACF,GAdyC,EAcvC,CAACE,SAAD,EAAYF,OAAZ,EAAqBF,cAArB,CAduC,CAA1C,CAJC,CAkByC;;AAE1CP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,IAAI,IAAIH,mBAAZ,EAAiC;AAC/Bc,MAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCR,sBAAnC;AACA,aAAO,MAAM;AACXO,QAAAA,QAAQ,CAACE,mBAAT,CAA6B,OAA7B,EAAsCT,sBAAtC;AACD,OAFD;AAGD;AACF,GAPQ,EAON,CAACJ,IAAD,EAAOH,mBAAP,EAA4BO,sBAA5B,CAPM,CAAT;;AASA,QAAMU,YAAY,GAAGC,CAAC,IAAI;AACxB,QAAI,CAACA,CAAC,CAACL,gBAAP,EAAyB;AACvB,YAAMH,WAAW,GAAGQ,CAAC,CAACP,MAAtB;AACAP,MAAAA,OAAO,CAACM,WAAW,CAACP,IAAb,CAAP;AACD;AACF,GALD;;AAOA,QAAMgB,eAAe,GAAG,MAAM;AAC5B,WAAO;AACLC,MAAAA,QAAQ,EAAEH,YADL;AAELd,MAAAA,IAFK;AAGLJ,MAAAA,GAAG,EAAEO;AAHA,KAAP;AAKD,GAND;;AAQA,SAAO;AACLH,IAAAA,IADK;AAELC,IAAAA,OAFK;AAGLe,IAAAA;AAHK,GAAP;AAKD;;AAED,eAAerB,UAAf","sourcesContent":["import { useCallback, useEffect, useState, useRef } from 'react';\n\nfunction useDetails({\n  ref,\n  closeOnOutsideClick,\n  defaultOpen,\n  onClickOutside\n}) {\n  const [open, setOpen] = useState(defaultOpen);\n  const backupRef = useRef(null);\n  const customRef = ref !== null && ref !== void 0 ? ref : backupRef;\n  const onClickOutsideInternal = useCallback(event => {\n    const {\n      current\n    } = customRef;\n    const eventTarget = event.target;\n    const closest = eventTarget.closest('details');\n\n    if (closest !== current) {\n      onClickOutside && onClickOutside(event);\n\n      if (!event.defaultPrevented) {\n        setOpen(false);\n      }\n    }\n  }, [customRef, setOpen, onClickOutside]); // handles the overlay behavior - closing the menu when clicking outside of it\n\n  useEffect(() => {\n    if (open && closeOnOutsideClick) {\n      document.addEventListener('click', onClickOutsideInternal);\n      return () => {\n        document.removeEventListener('click', onClickOutsideInternal);\n      };\n    }\n  }, [open, closeOnOutsideClick, onClickOutsideInternal]);\n\n  const handleToggle = e => {\n    if (!e.defaultPrevented) {\n      const eventTarget = e.target;\n      setOpen(eventTarget.open);\n    }\n  };\n\n  const getDetailsProps = () => {\n    return {\n      onToggle: handleToggle,\n      open,\n      ref: customRef\n    };\n  };\n\n  return {\n    open,\n    setOpen,\n    getDetailsProps\n  };\n}\n\nexport default useDetails;"]},"metadata":{},"sourceType":"module"}