"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _ = require("../..");

var _ChoiceInputField = _interopRequireDefault(require("../ChoiceInputField"));

var _ChoiceInputLeadingVisual = _interopRequireDefault(require("../_ChoiceInputLeadingVisual"));

var _ChoiceFieldCaption = _interopRequireDefault(require("./ChoiceFieldCaption"));

var _ChoiceFieldLabel = _interopRequireDefault(require("./ChoiceFieldLabel"));

var _ChoiceFieldsetListContext = _interopRequireDefault(require("./ChoiceFieldsetListContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const ChoiceFieldsetListItem = ({
  children,
  id,
  disabled: disabledProp,
  value
}) => {
  const choiceFieldsetListContext = (0, _react.useContext)(_ChoiceFieldsetListContext.default);

  if (choiceFieldsetListContext === null) {
    throw new Error('ChoiceFieldsetListContext returned null');
  }

  const {
    name,
    onChange,
    selected,
    disabled,
    selectionVariant
  } = choiceFieldsetListContext;
  const fieldId = (0, _.useSSRSafeId)(id);

  const labelChild = _react.default.Children.toArray(children).find(child => /*#__PURE__*/_react.default.isValidElement(child) && child.type === _ChoiceFieldLabel.default);

  const otherValidChildren = _react.default.Children.toArray(children).filter(child => /*#__PURE__*/_react.default.isValidElement(child) && (child.type === _ChoiceFieldCaption.default || child.type === _ChoiceInputLeadingVisual.default));

  const ChoiceInput = selectionVariant === 'multiple' ? _.Checkbox : _.Radio;
  return /*#__PURE__*/_react.default.createElement(_ChoiceInputField.default, {
    id: fieldId,
    disabled: disabledProp || disabled
  }, /*#__PURE__*/_react.default.createElement(ChoiceInput, {
    checked: selected === null || selected === void 0 ? void 0 : selected.includes(value),
    value: value,
    name: selectionVariant === 'multiple' ? value : name,
    onChange: onChange
  }), labelChild ? // if <Item.Label> was passed, we can just render the children as-is
  children :
  /*#__PURE__*/
  // if <Item.Label> was NOT passed, treat all the children except <Item.Caption> and <Item.LeadingVisual> as the label
  _react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ChoiceInputField.default.Label, null, children), otherValidChildren));
};

ChoiceFieldsetListItem.displayName = "ChoiceFieldsetListItem";

var _default = Object.assign(ChoiceFieldsetListItem, {
  Caption: _ChoiceFieldCaption.default,
  Label: _ChoiceFieldLabel.default,
  LeadingVisual: _ChoiceInputLeadingVisual.default
});

exports.default = _default;