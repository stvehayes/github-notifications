"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _styledSystem = require("styled-system");

var _ = require(".");

var _constants = require("./constants");

var _hooks = require("./hooks");

var _sx = _interopRequireDefault(require("./sx"));

var _VisuallyHidden = _interopRequireDefault(require("./_VisuallyHidden"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const TRANSITION_DURATION = '80ms';
const EASE_OUT_QUAD_CURVE = 'cubic-bezier(0.5, 1, 0.89, 1)';
const sizeVariants = (0, _styledSystem.variant)({
  prop: 'size',
  variants: {
    small: {
      height: '24px',
      width: '48px'
    }
  }
});

const CircleIcon = ({
  size
}) => /*#__PURE__*/_react.default.createElement("svg", {
  width: size === 'small' ? '12' : '16',
  height: size === 'small' ? '12' : '16',
  viewBox: "0 0 16 16",
  fill: "currentColor",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/_react.default.createElement("path", {
  fillRule: "evenodd",
  d: "M8 12.5a4.5 4.5 0 1 0 0-9 4.5 4.5 0 0 0 0 9ZM8 14A6 6 0 1 0 8 2a6 6 0 0 0 0 12Z"
}));

CircleIcon.displayName = "CircleIcon";

const LineIcon = ({
  size
}) => /*#__PURE__*/_react.default.createElement("svg", {
  width: size === 'small' ? '12' : '16',
  height: size === 'small' ? '12' : '16',
  viewBox: "0 0 16 16",
  fill: "currentColor",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/_react.default.createElement("path", {
  fillRule: "evenodd",
  d: "M8 2a.75.75 0 0 1 .75.75v11.5a.75.75 0 0 1-1.5 0V2.75A.75.75 0 0 1 8 2Z"
}));

LineIcon.displayName = "LineIcon";

const SwitchButton = _styledComponents.default.button.withConfig({
  displayName: "ToggleSwitch__SwitchButton",
  componentId: "sc-om7zet-0"
})(["vertical-align:middle;cursor:pointer;user-select:none;appearance:none;text-decoration:none;padding:0;transition-property:background-color,border-color;transition-duration:", ";transition-timing-function:", ";border-radius:", ";border-style:solid;border-width:1px;display:block;height:32px;width:64px;outline-offset:2px;position:relative;overflow:hidden;@media (pointer:coarse){&:before{content:'';position:absolute;left:0;right:0;transform:translateY(-50%);top:50%;min-height:44px;}}@media (prefers-reduced-motion){transition:none;*{transition:none;}}", " ", " ", ""], TRANSITION_DURATION, EASE_OUT_QUAD_CURVE, (0, _constants.get)('radii.2'), props => {
  if (props.disabled) {
    return (0, _styledComponents.css)(["background-color:", ";border-color:", ";cursor:not-allowed;transition-property:none;"], (0, _constants.get)('colors.canvas.subtle'), (0, _constants.get)('colors.border.subtle'));
  }

  if (props.checked) {
    return (0, _styledComponents.css)(["background-color:", ";border-color:", ";&:hover,&:focus:focus-visible{background-color:", ";}&:active,&:active:focus-visible{background-color:", ";}"], (0, _constants.get)('colors.switchTrack.checked.bg'), (0, _constants.get)('colors.switchTrack.checked.border'), (0, _constants.get)('colors.switchTrack.checked.hoverBg'), (0, _constants.get)('colors.switchTrack.checked.activeBg'));
  } else {
    return (0, _styledComponents.css)(["background-color:", ";border-color:", ";&:hover,&:focus:focus-visible{.Toggle-knob{background-color:", ";}}&:active,&:active:focus-visible{.Toggle-knob{background-color:", ";}}"], (0, _constants.get)('colors.switchTrack.bg'), (0, _constants.get)('colors.switchTrack.border'), (0, _constants.get)('colors.btn.hoverBg'), (0, _constants.get)('colors.btn.activeBg'));
  }
}, _sx.default, sizeVariants);

const ToggleKnob = _styledComponents.default.div.withConfig({
  displayName: "ToggleSwitch__ToggleKnob",
  componentId: "sc-om7zet-1"
})(["background-color:", ";border-width:1px;border-style:solid;border-color:", ";border-radius:calc(", " - 1px);box-shadow:", ";width:50%;position:absolute;top:-1px;bottom:-1px;transition-property:transform;transition-duration:", ";transition-timing-function:", ";transform:", ";z-index:1;@media (prefers-reduced-motion){transition:none;}", ""], (0, _constants.get)('colors.btn.bg'), props => props.disabled ? (0, _constants.get)('colors.border.default') : (0, _constants.get)('colors.switchTrack.border'), (0, _constants.get)('radii.2'), props => {
  var _props$theme, _props$theme$shadows, _props$theme2, _props$theme2$shadows;

  return props.disabled ? 'none' : `${(_props$theme = props.theme) === null || _props$theme === void 0 ? void 0 : (_props$theme$shadows = _props$theme.shadows) === null || _props$theme$shadows === void 0 ? void 0 : _props$theme$shadows.shadow.medium}, ${(_props$theme2 = props.theme) === null || _props$theme2 === void 0 ? void 0 : (_props$theme2$shadows = _props$theme2.shadows) === null || _props$theme2$shadows === void 0 ? void 0 : _props$theme2$shadows.btn.insetShadow}`;
}, TRANSITION_DURATION, EASE_OUT_QUAD_CURVE, props => `translateX(${props.checked ? 'calc(100% + 1px)' : '-1px'})`, props => {
  if (props.checked) {
    return (0, _styledComponents.css)(["background-color:", ";border-color:", ";box-shadow:", ";"], props.disabled ? (0, _constants.get)('colors.switchKnob.checked.disabledBg') : (0, _constants.get)('colors.switchKnob.checked.bg'), props.disabled ? (0, _constants.get)('colors.switchKnob.checked.disabledBg') : (0, _constants.get)('colors.switchKnob.checked.bg'), (0, _constants.get)('shadows.shadow.small'));
  }
});

const hiddenTextStyles = {
  visibility: 'hidden',
  height: 0
};

const Switch = ({
  'aria-labelledby': ariaLabelledby,
  'aria-describedby': ariaDescribedby,
  defaultChecked,
  disabled,
  loading,
  checked,
  onChange,
  onClick,
  size,
  statusLabelPosition,
  sx: sxProp
}) => {
  const isControlled = typeof checked !== 'undefined';
  const [isOn, setIsOn] = (0, _hooks.useProvidedStateOrCreate)(checked, onChange, Boolean(defaultChecked));
  const acceptsInteraction = !disabled && !loading;
  const handleToggleClick = (0, _react.useCallback)(e => {
    if (!isControlled) {
      setIsOn(!isOn);
    }

    onClick && onClick(e);
  }, [onClick, isControlled, isOn, setIsOn]);
  (0, _react.useEffect)(() => {
    if (onChange && isControlled) {
      onChange(Boolean(checked));
    }
  }, [onChange, checked, isControlled]);
  return /*#__PURE__*/_react.default.createElement(_.Box, {
    display: "inline-flex",
    alignItems: "center",
    flexDirection: statusLabelPosition === 'start' ? 'row' : 'row-reverse',
    sx: sxProp
  }, loading ? /*#__PURE__*/_react.default.createElement(_.Spinner, {
    size: "small"
  }) : null, /*#__PURE__*/_react.default.createElement(_.Text, {
    color: acceptsInteraction ? 'fg.default' : 'fg.muted',
    fontSize: size === 'small' ? 0 : 1,
    mx: 2,
    "aria-hidden": "true",
    sx: {
      position: 'relative'
    }
  }, /*#__PURE__*/_react.default.createElement(_.Box, {
    textAlign: "right",
    sx: isOn ? null : hiddenTextStyles
  }, "On"), /*#__PURE__*/_react.default.createElement(_.Box, {
    textAlign: "right",
    sx: isOn ? hiddenTextStyles : null
  }, "Off")), /*#__PURE__*/_react.default.createElement(SwitchButton, {
    onClick: handleToggleClick,
    "aria-labelledby": ariaLabelledby,
    "aria-describedby": ariaDescribedby,
    "aria-checked": isOn,
    "aria-disabled": !acceptsInteraction,
    role: "switch",
    checked: isOn,
    size: size,
    disabled: !acceptsInteraction
  }, /*#__PURE__*/_react.default.createElement(_VisuallyHidden.default, null, isOn ? 'On' : 'Off'), /*#__PURE__*/_react.default.createElement(_.Box, {
    "aria-hidden": "true",
    display: "flex",
    alignItems: "center",
    width: "100%",
    height: "100%",
    overflow: "hidden"
  }, /*#__PURE__*/_react.default.createElement(_.Box, {
    flexGrow: 1,
    flexShrink: 0,
    flexBasis: "50%",
    color: acceptsInteraction ? 'accent.fg' : 'fg.subtle',
    lineHeight: "0",
    sx: {
      transform: `translateX(${isOn ? '0' : '-100%'})`,
      transitionProperty: 'transform',
      transitionDuration: TRANSITION_DURATION
    }
  }, /*#__PURE__*/_react.default.createElement(LineIcon, {
    size: size
  })), /*#__PURE__*/_react.default.createElement(_.Box, {
    flexGrow: 1,
    flexShrink: 0,
    flexBasis: "50%",
    color: acceptsInteraction ? 'fg.default' : 'fg.subtle',
    lineHeight: "0",
    sx: {
      transform: `translateX(${isOn ? '100%' : '0'})`,
      transitionProperty: 'transform',
      transitionDuration: TRANSITION_DURATION
    }
  }, /*#__PURE__*/_react.default.createElement(CircleIcon, {
    size: size
  }))), /*#__PURE__*/_react.default.createElement(ToggleKnob, {
    "aria-hidden": "true",
    className: "Toggle-knob",
    disabled: !acceptsInteraction,
    checked: isOn
  })));
};

Switch.displayName = "Switch";
Switch.defaultProps = {
  statusLabelPosition: 'start',
  size: 'medium'
};
var _default = Switch;
exports.default = _default;