{"ast":null,"code":"import React, { useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { scrollIntoView } from '@primer/behaviors';\nimport { ActionList } from '../deprecated/ActionList';\nimport { useFocusZone } from '../hooks/useFocusZone';\nimport { Box, Spinner, useSSRSafeId } from '../';\nimport { AutocompleteContext } from './AutocompleteContext';\nimport { PlusIcon } from '@primer/octicons-react';\nimport VisuallyHidden from '../_VisuallyHidden';\n\nconst getDefaultSortFn = isItemSelectedFn => (itemIdA, itemIdB) => isItemSelectedFn(itemIdA) === isItemSelectedFn(itemIdB) ? 0 : isItemSelectedFn(itemIdA) ? -1 : 1;\n\nconst menuScrollMargins = {\n  startMargin: 0,\n  endMargin: 8\n};\n\nfunction getDefaultItemFilter(filterValue) {\n  return function (item, _i) {\n    var _item$text;\n\n    return Boolean((_item$text = item.text) === null || _item$text === void 0 ? void 0 : _item$text.toLowerCase().startsWith(filterValue.toLowerCase()));\n  };\n}\n\nfunction getdefaultCheckedSelectionChange(setInputValueFn) {\n  return function (itemOrItems) {\n    const {\n      text = ''\n    } = Array.isArray(itemOrItems) ? itemOrItems.slice(-1)[0] : itemOrItems;\n    setInputValueFn(text);\n  };\n}\n\nconst isItemSelected = (itemId, selectedItemIds) => selectedItemIds.includes(itemId);\n\nfunction getItemById(itemId, items) {\n  return items.find(item => item.id === itemId);\n} // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction AutocompleteMenu(props) {\n  const autocompleteContext = useContext(AutocompleteContext);\n\n  if (autocompleteContext === null) {\n    throw new Error('AutocompleteContext returned null values');\n  }\n\n  const {\n    activeDescendantRef,\n    id,\n    inputRef,\n    inputValue = '',\n    scrollContainerRef,\n    setAutocompleteSuggestion,\n    setShowMenu,\n    setInputValue,\n    setIsMenuDirectlyActivated,\n    setSelectedItemLength,\n    showMenu\n  } = autocompleteContext;\n  const {\n    items,\n    selectedItemIds,\n    sortOnCloseFn,\n    emptyStateText,\n    addNewItem,\n    loading,\n    selectionVariant,\n    filterFn,\n    'aria-labelledby': ariaLabelledBy,\n    onOpenChange,\n    onSelectedChange,\n    customScrollContainerRef\n  } = props;\n  const listContainerRef = useRef(null);\n  const [highlightedItem, setHighlightedItem] = useState();\n  const [sortedItemIds, setSortedItemIds] = useState(items.map(_ref => {\n    let {\n      id: itemId\n    } = _ref;\n    return itemId;\n  }));\n  const generatedUniqueId = useSSRSafeId(id);\n  const selectableItems = useMemo(() => items.map(selectableItem => {\n    return { ...selectableItem,\n      role: 'option',\n      id: selectableItem.id,\n      selected: selectionVariant === 'multiple' ? selectedItemIds.includes(selectableItem.id) : undefined,\n      onAction: item => {\n        const otherSelectedItemIds = selectedItemIds.filter(selectedItemId => selectedItemId !== item.id);\n        const newSelectedItemIds = selectedItemIds.includes(item.id) ? otherSelectedItemIds : [...otherSelectedItemIds, item.id];\n        const onSelectedChangeFn = onSelectedChange ? onSelectedChange : getdefaultCheckedSelectionChange(setInputValue);\n        onSelectedChangeFn(newSelectedItemIds.map(newSelectedItemId => getItemById(newSelectedItemId, items)));\n\n        if (selectionVariant === 'multiple') {\n          setInputValue('');\n          setAutocompleteSuggestion('');\n        } else {\n          var _inputRef$current;\n\n          setShowMenu(false);\n          (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);\n        }\n      }\n    };\n  }), [items, selectedItemIds, inputRef, onSelectedChange, selectionVariant, setAutocompleteSuggestion, setInputValue, setShowMenu]);\n  const itemSortOrderData = useMemo(() => sortedItemIds.reduce((acc, curr, i) => {\n    acc[curr] = i;\n    return acc;\n  }, {}), [sortedItemIds]);\n  const sortedAndFilteredItemsToRender = useMemo(() => selectableItems.filter(filterFn ? filterFn : getDefaultItemFilter(inputValue)).sort((a, b) => itemSortOrderData[a.id] - itemSortOrderData[b.id]), [selectableItems, itemSortOrderData, filterFn, inputValue]);\n  const allItemsToRender = useMemo(() => [// sorted and filtered selectable items\n  ...sortedAndFilteredItemsToRender, // menu item used for creating a token from whatever is in the text input\n  ...(addNewItem ? [{ ...addNewItem,\n    leadingVisual: () => /*#__PURE__*/React.createElement(PlusIcon, null),\n    onAction: item => {\n      // TODO: make it possible to pass a leadingVisual when using `addNewItem`\n      addNewItem.handleAddItem({ ...item,\n        id: item.id || generatedUniqueId,\n        leadingVisual: undefined\n      });\n\n      if (selectionVariant === 'multiple') {\n        setInputValue('');\n        setAutocompleteSuggestion('');\n      }\n    }\n  }] : [])], [sortedAndFilteredItemsToRender, addNewItem, setAutocompleteSuggestion, selectionVariant, setInputValue, generatedUniqueId]);\n  useFocusZone({\n    containerRef: listContainerRef,\n    focusOutBehavior: 'wrap',\n    focusableElementFilter: element => {\n      return !(element instanceof HTMLInputElement);\n    },\n    activeDescendantFocus: inputRef,\n    onActiveDescendantChanged: (current, _previous, directlyActivated) => {\n      activeDescendantRef.current = current || null;\n\n      if (current) {\n        const selectedItem = selectableItems.find(item => item.id.toString() === current.getAttribute('data-id'));\n        setHighlightedItem(selectedItem);\n        setIsMenuDirectlyActivated(directlyActivated);\n      }\n\n      if (current && customScrollContainerRef && customScrollContainerRef.current && directlyActivated) {\n        scrollIntoView(current, customScrollContainerRef.current, menuScrollMargins);\n      } else if (current && scrollContainerRef.current && directlyActivated) {\n        scrollIntoView(current, scrollContainerRef.current, menuScrollMargins);\n      }\n    }\n  }, [loading]);\n  useEffect(() => {\n    var _highlightedItem$text;\n\n    if (highlightedItem !== null && highlightedItem !== void 0 && (_highlightedItem$text = highlightedItem.text) !== null && _highlightedItem$text !== void 0 && _highlightedItem$text.startsWith(inputValue) && !selectedItemIds.includes(highlightedItem.id)) {\n      setAutocompleteSuggestion(highlightedItem.text);\n    } else {\n      setAutocompleteSuggestion('');\n    }\n  }, [highlightedItem, inputValue, selectedItemIds, setAutocompleteSuggestion]);\n  useEffect(() => {\n    const itemIdSortResult = [...sortedItemIds].sort(sortOnCloseFn ? sortOnCloseFn : getDefaultSortFn(itemId => isItemSelected(itemId, selectedItemIds)));\n    const sortResultMatchesState = itemIdSortResult.length === sortedItemIds.length && itemIdSortResult.every((element, index) => element === sortedItemIds[index]);\n\n    if (showMenu === false && !sortResultMatchesState) {\n      setSortedItemIds(itemIdSortResult);\n    }\n\n    onOpenChange && onOpenChange(Boolean(showMenu));\n  }, [showMenu, onOpenChange, selectedItemIds, sortOnCloseFn, sortedItemIds]);\n  useEffect(() => {\n    if (selectedItemIds.length) {\n      setSelectedItemLength(selectedItemIds.length);\n    }\n  }, [selectedItemIds, setSelectedItemLength]);\n  return /*#__PURE__*/React.createElement(VisuallyHidden, {\n    isVisible: showMenu\n  }, loading ? /*#__PURE__*/React.createElement(Box, {\n    p: 3,\n    display: \"flex\",\n    justifyContent: \"center\"\n  }, /*#__PURE__*/React.createElement(Spinner, null)) : /*#__PURE__*/React.createElement(\"div\", {\n    ref: listContainerRef\n  }, allItemsToRender.length ? /*#__PURE__*/React.createElement(ActionList, {\n    selectionVariant: \"multiple\" // have to typecast to `ItemProps` because we have an extra property\n    // on `items` for Autocomplete: `metadata`\n    ,\n    items: allItemsToRender,\n    role: \"listbox\",\n    id: `${id}-listbox`,\n    \"aria-labelledby\": ariaLabelledBy\n  }) : /*#__PURE__*/React.createElement(Box, {\n    p: 3\n  }, emptyStateText)));\n}\n\nAutocompleteMenu.displayName = \"AutocompleteMenu\";\nAutocompleteMenu.defaultProps = {\n  emptyStateText: 'No selectable options',\n  selectionVariant: 'single'\n};\nAutocompleteMenu.displayName = 'AutocompleteMenu';\nexport default AutocompleteMenu;","map":{"version":3,"sources":["/Users/steve/Documents/repos/notifications/node_modules/@primer/react/lib-esm/Autocomplete/AutocompleteMenu.js"],"names":["React","useContext","useEffect","useMemo","useRef","useState","scrollIntoView","ActionList","useFocusZone","Box","Spinner","useSSRSafeId","AutocompleteContext","PlusIcon","VisuallyHidden","getDefaultSortFn","isItemSelectedFn","itemIdA","itemIdB","menuScrollMargins","startMargin","endMargin","getDefaultItemFilter","filterValue","item","_i","_item$text","Boolean","text","toLowerCase","startsWith","getdefaultCheckedSelectionChange","setInputValueFn","itemOrItems","Array","isArray","slice","isItemSelected","itemId","selectedItemIds","includes","getItemById","items","find","id","AutocompleteMenu","props","autocompleteContext","Error","activeDescendantRef","inputRef","inputValue","scrollContainerRef","setAutocompleteSuggestion","setShowMenu","setInputValue","setIsMenuDirectlyActivated","setSelectedItemLength","showMenu","sortOnCloseFn","emptyStateText","addNewItem","loading","selectionVariant","filterFn","ariaLabelledBy","onOpenChange","onSelectedChange","customScrollContainerRef","listContainerRef","highlightedItem","setHighlightedItem","sortedItemIds","setSortedItemIds","map","generatedUniqueId","selectableItems","selectableItem","role","selected","undefined","onAction","otherSelectedItemIds","filter","selectedItemId","newSelectedItemIds","onSelectedChangeFn","newSelectedItemId","_inputRef$current","current","setSelectionRange","value","length","itemSortOrderData","reduce","acc","curr","i","sortedAndFilteredItemsToRender","sort","a","b","allItemsToRender","leadingVisual","createElement","handleAddItem","containerRef","focusOutBehavior","focusableElementFilter","element","HTMLInputElement","activeDescendantFocus","onActiveDescendantChanged","_previous","directlyActivated","selectedItem","toString","getAttribute","_highlightedItem$text","itemIdSortResult","sortResultMatchesState","every","index","isVisible","p","display","justifyContent","ref","displayName","defaultProps"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { scrollIntoView } from '@primer/behaviors';\nimport { ActionList } from '../deprecated/ActionList';\nimport { useFocusZone } from '../hooks/useFocusZone';\nimport { Box, Spinner, useSSRSafeId } from '../';\nimport { AutocompleteContext } from './AutocompleteContext';\nimport { PlusIcon } from '@primer/octicons-react';\nimport VisuallyHidden from '../_VisuallyHidden';\n\nconst getDefaultSortFn = isItemSelectedFn => (itemIdA, itemIdB) => isItemSelectedFn(itemIdA) === isItemSelectedFn(itemIdB) ? 0 : isItemSelectedFn(itemIdA) ? -1 : 1;\n\nconst menuScrollMargins = {\n  startMargin: 0,\n  endMargin: 8\n};\n\nfunction getDefaultItemFilter(filterValue) {\n  return function (item, _i) {\n    var _item$text;\n\n    return Boolean((_item$text = item.text) === null || _item$text === void 0 ? void 0 : _item$text.toLowerCase().startsWith(filterValue.toLowerCase()));\n  };\n}\n\nfunction getdefaultCheckedSelectionChange(setInputValueFn) {\n  return function (itemOrItems) {\n    const {\n      text = ''\n    } = Array.isArray(itemOrItems) ? itemOrItems.slice(-1)[0] : itemOrItems;\n    setInputValueFn(text);\n  };\n}\n\nconst isItemSelected = (itemId, selectedItemIds) => selectedItemIds.includes(itemId);\n\nfunction getItemById(itemId, items) {\n  return items.find(item => item.id === itemId);\n} // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction AutocompleteMenu(props) {\n  const autocompleteContext = useContext(AutocompleteContext);\n\n  if (autocompleteContext === null) {\n    throw new Error('AutocompleteContext returned null values');\n  }\n\n  const {\n    activeDescendantRef,\n    id,\n    inputRef,\n    inputValue = '',\n    scrollContainerRef,\n    setAutocompleteSuggestion,\n    setShowMenu,\n    setInputValue,\n    setIsMenuDirectlyActivated,\n    setSelectedItemLength,\n    showMenu\n  } = autocompleteContext;\n  const {\n    items,\n    selectedItemIds,\n    sortOnCloseFn,\n    emptyStateText,\n    addNewItem,\n    loading,\n    selectionVariant,\n    filterFn,\n    'aria-labelledby': ariaLabelledBy,\n    onOpenChange,\n    onSelectedChange,\n    customScrollContainerRef\n  } = props;\n  const listContainerRef = useRef(null);\n  const [highlightedItem, setHighlightedItem] = useState();\n  const [sortedItemIds, setSortedItemIds] = useState(items.map(({\n    id: itemId\n  }) => itemId));\n  const generatedUniqueId = useSSRSafeId(id);\n  const selectableItems = useMemo(() => items.map(selectableItem => {\n    return { ...selectableItem,\n      role: 'option',\n      id: selectableItem.id,\n      selected: selectionVariant === 'multiple' ? selectedItemIds.includes(selectableItem.id) : undefined,\n      onAction: item => {\n        const otherSelectedItemIds = selectedItemIds.filter(selectedItemId => selectedItemId !== item.id);\n        const newSelectedItemIds = selectedItemIds.includes(item.id) ? otherSelectedItemIds : [...otherSelectedItemIds, item.id];\n        const onSelectedChangeFn = onSelectedChange ? onSelectedChange : getdefaultCheckedSelectionChange(setInputValue);\n        onSelectedChangeFn(newSelectedItemIds.map(newSelectedItemId => getItemById(newSelectedItemId, items)));\n\n        if (selectionVariant === 'multiple') {\n          setInputValue('');\n          setAutocompleteSuggestion('');\n        } else {\n          var _inputRef$current;\n\n          setShowMenu(false);\n          (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);\n        }\n      }\n    };\n  }), [items, selectedItemIds, inputRef, onSelectedChange, selectionVariant, setAutocompleteSuggestion, setInputValue, setShowMenu]);\n  const itemSortOrderData = useMemo(() => sortedItemIds.reduce((acc, curr, i) => {\n    acc[curr] = i;\n    return acc;\n  }, {}), [sortedItemIds]);\n  const sortedAndFilteredItemsToRender = useMemo(() => selectableItems.filter(filterFn ? filterFn : getDefaultItemFilter(inputValue)).sort((a, b) => itemSortOrderData[a.id] - itemSortOrderData[b.id]), [selectableItems, itemSortOrderData, filterFn, inputValue]);\n  const allItemsToRender = useMemo(() => [// sorted and filtered selectable items\n  ...sortedAndFilteredItemsToRender, // menu item used for creating a token from whatever is in the text input\n  ...(addNewItem ? [{ ...addNewItem,\n    leadingVisual: () => /*#__PURE__*/React.createElement(PlusIcon, null),\n    onAction: item => {\n      // TODO: make it possible to pass a leadingVisual when using `addNewItem`\n      addNewItem.handleAddItem({ ...item,\n        id: item.id || generatedUniqueId,\n        leadingVisual: undefined\n      });\n\n      if (selectionVariant === 'multiple') {\n        setInputValue('');\n        setAutocompleteSuggestion('');\n      }\n    }\n  }] : [])], [sortedAndFilteredItemsToRender, addNewItem, setAutocompleteSuggestion, selectionVariant, setInputValue, generatedUniqueId]);\n  useFocusZone({\n    containerRef: listContainerRef,\n    focusOutBehavior: 'wrap',\n    focusableElementFilter: element => {\n      return !(element instanceof HTMLInputElement);\n    },\n    activeDescendantFocus: inputRef,\n    onActiveDescendantChanged: (current, _previous, directlyActivated) => {\n      activeDescendantRef.current = current || null;\n\n      if (current) {\n        const selectedItem = selectableItems.find(item => item.id.toString() === current.getAttribute('data-id'));\n        setHighlightedItem(selectedItem);\n        setIsMenuDirectlyActivated(directlyActivated);\n      }\n\n      if (current && customScrollContainerRef && customScrollContainerRef.current && directlyActivated) {\n        scrollIntoView(current, customScrollContainerRef.current, menuScrollMargins);\n      } else if (current && scrollContainerRef.current && directlyActivated) {\n        scrollIntoView(current, scrollContainerRef.current, menuScrollMargins);\n      }\n    }\n  }, [loading]);\n  useEffect(() => {\n    var _highlightedItem$text;\n\n    if (highlightedItem !== null && highlightedItem !== void 0 && (_highlightedItem$text = highlightedItem.text) !== null && _highlightedItem$text !== void 0 && _highlightedItem$text.startsWith(inputValue) && !selectedItemIds.includes(highlightedItem.id)) {\n      setAutocompleteSuggestion(highlightedItem.text);\n    } else {\n      setAutocompleteSuggestion('');\n    }\n  }, [highlightedItem, inputValue, selectedItemIds, setAutocompleteSuggestion]);\n  useEffect(() => {\n    const itemIdSortResult = [...sortedItemIds].sort(sortOnCloseFn ? sortOnCloseFn : getDefaultSortFn(itemId => isItemSelected(itemId, selectedItemIds)));\n    const sortResultMatchesState = itemIdSortResult.length === sortedItemIds.length && itemIdSortResult.every((element, index) => element === sortedItemIds[index]);\n\n    if (showMenu === false && !sortResultMatchesState) {\n      setSortedItemIds(itemIdSortResult);\n    }\n\n    onOpenChange && onOpenChange(Boolean(showMenu));\n  }, [showMenu, onOpenChange, selectedItemIds, sortOnCloseFn, sortedItemIds]);\n  useEffect(() => {\n    if (selectedItemIds.length) {\n      setSelectedItemLength(selectedItemIds.length);\n    }\n  }, [selectedItemIds, setSelectedItemLength]);\n  return /*#__PURE__*/React.createElement(VisuallyHidden, {\n    isVisible: showMenu\n  }, loading ? /*#__PURE__*/React.createElement(Box, {\n    p: 3,\n    display: \"flex\",\n    justifyContent: \"center\"\n  }, /*#__PURE__*/React.createElement(Spinner, null)) : /*#__PURE__*/React.createElement(\"div\", {\n    ref: listContainerRef\n  }, allItemsToRender.length ? /*#__PURE__*/React.createElement(ActionList, {\n    selectionVariant: \"multiple\" // have to typecast to `ItemProps` because we have an extra property\n    // on `items` for Autocomplete: `metadata`\n    ,\n    items: allItemsToRender,\n    role: \"listbox\",\n    id: `${id}-listbox`,\n    \"aria-labelledby\": ariaLabelledBy\n  }) : /*#__PURE__*/React.createElement(Box, {\n    p: 3\n  }, emptyStateText)));\n}\n\nAutocompleteMenu.displayName = \"AutocompleteMenu\";\nAutocompleteMenu.defaultProps = {\n  emptyStateText: 'No selectable options',\n  selectionVariant: 'single'\n};\nAutocompleteMenu.displayName = 'AutocompleteMenu';\nexport default AutocompleteMenu;"]},"metadata":{},"sourceType":"module"}