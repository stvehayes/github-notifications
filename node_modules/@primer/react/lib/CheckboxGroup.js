"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.CheckboxGroupContext = void 0;

var _react = _interopRequireWildcard(require("react"));

var _CheckboxOrRadioGroup = _interopRequireDefault(require("./_CheckboxOrRadioGroup"));

var _CheckboxOrRadioGroupCaption = _interopRequireDefault(require("./_CheckboxOrRadioGroup/_CheckboxOrRadioGroupCaption"));

var _CheckboxOrRadioGroupLabel = _interopRequireDefault(require("./_CheckboxOrRadioGroup/_CheckboxOrRadioGroupLabel"));

var _CheckboxOrRadioGroupValidation = _interopRequireDefault(require("./_CheckboxOrRadioGroup/_CheckboxOrRadioGroupValidation"));

var _hooks = require("./hooks");

var _ = require(".");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const CheckboxGroupContext = /*#__PURE__*/(0, _react.createContext)({});
exports.CheckboxGroupContext = CheckboxGroupContext;

const CheckboxGroup = ({
  children,
  disabled,
  onChange,
  ...rest
}) => {
  const formControlComponentChildren = _react.default.Children.toArray(children).filter(child => /*#__PURE__*/_react.default.isValidElement(child) && child.type === _.FormControl).map(formControlComponent => /*#__PURE__*/_react.default.isValidElement(formControlComponent) ? formControlComponent.props.children : []).flat();

  const checkedCheckboxes = _react.default.Children.toArray(formControlComponentChildren).filter(child => /*#__PURE__*/_react.default.isValidElement(child) && child.type === _.Checkbox).map(checkbox => /*#__PURE__*/_react.default.isValidElement(checkbox) && (checkbox.props.checked || checkbox.props.defaultChecked) && checkbox.props.value).filter(Boolean);

  const [selectedCheckboxValues, setSelectedCheckboxValues] = (0, _hooks.useRenderForcingRef)(checkedCheckboxes);

  const updateSelectedCheckboxes = e => {
    const {
      value,
      checked
    } = e.currentTarget;

    if (checked) {
      setSelectedCheckboxValues([...(selectedCheckboxValues.current || []), value]);
      return;
    }

    setSelectedCheckboxValues((selectedCheckboxValues.current || []).filter(selectedValue => selectedValue !== value));
  };

  return /*#__PURE__*/_react.default.createElement(CheckboxGroupContext.Provider, {
    value: {
      disabled,
      onChange: e => {
        if (onChange) {
          updateSelectedCheckboxes(e);
          onChange(selectedCheckboxValues.current || [], e);
        }
      }
    }
  }, /*#__PURE__*/_react.default.createElement(_CheckboxOrRadioGroup.default, _extends({
    disabled: disabled
  }, rest), children));
};

CheckboxGroup.displayName = "CheckboxGroup";

var _default = Object.assign(CheckboxGroup, {
  Caption: _CheckboxOrRadioGroupCaption.default,
  Label: _CheckboxOrRadioGroupLabel.default,
  Validation: _CheckboxOrRadioGroupValidation.default
});

exports.default = _default;