"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _ = require("..");

var _FormControlCaption = _interopRequireDefault(require("./_FormControlCaption"));

var _FormControlLabel = _interopRequireDefault(require("./_FormControlLabel"));

var _FormControlValidation = _interopRequireDefault(require("./_FormControlValidation"));

var _slots = require("./slots");

var _ValidationAnimationContainer = _interopRequireDefault(require("../_ValidationAnimationContainer"));

var _constants = require("../constants");

var _FormControlLeadingVisual = _interopRequireDefault(require("./_FormControlLeadingVisual"));

var _CheckboxOrRadioGroupContext = _interopRequireDefault(require("../_CheckboxOrRadioGroup/_CheckboxOrRadioGroupContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const FormControl = /*#__PURE__*/_react.default.forwardRef(({
  children,
  disabled: disabledProp,
  layout,
  id: idProp,
  required,
  sx
}, ref) => {
  const expectedInputComponents = [_.Autocomplete, _.Checkbox, _.Radio, _.Select, _.TextInput, _.TextInputWithTokens, _.Textarea];
  const choiceGroupContext = (0, _react.useContext)(_CheckboxOrRadioGroupContext.default);
  const disabled = (choiceGroupContext === null || choiceGroupContext === void 0 ? void 0 : choiceGroupContext.disabled) || disabledProp;
  const id = (0, _.useSSRSafeId)(idProp);

  const validationChild = _react.default.Children.toArray(children).find(child => /*#__PURE__*/_react.default.isValidElement(child) && child.type === _FormControlValidation.default ? child : null);

  const captionChild = _react.default.Children.toArray(children).find(child => /*#__PURE__*/_react.default.isValidElement(child) && child.type === _FormControlCaption.default ? child : null);

  const labelChild = _react.default.Children.toArray(children).find(child => /*#__PURE__*/_react.default.isValidElement(child) && child.type === _FormControlLabel.default);

  const validationMessageId = validationChild && `${id}-validationMessage`;
  const captionId = captionChild && `${id}-caption`;
  const validationStatus = /*#__PURE__*/_react.default.isValidElement(validationChild) && validationChild.props.variant;

  const InputComponent = _react.default.Children.toArray(children).find(child => expectedInputComponents.some(inputComponent => /*#__PURE__*/_react.default.isValidElement(child) && child.type === inputComponent));

  const inputProps = /*#__PURE__*/_react.default.isValidElement(InputComponent) && InputComponent.props;

  const isChoiceInput = /*#__PURE__*/_react.default.isValidElement(InputComponent) && (InputComponent.type === _.Checkbox || InputComponent.type === _.Radio);

  if (InputComponent) {
    if (inputProps !== null && inputProps !== void 0 && inputProps.id) {
      // eslint-disable-next-line no-console
      console.warn(`instead of passing the 'id' prop directly to the input component, it should be passed to the parent component, <FormControl>`);
    }

    if (inputProps !== null && inputProps !== void 0 && inputProps.disabled) {
      // eslint-disable-next-line no-console
      console.warn(`instead of passing the 'disabled' prop directly to the input component, it should be passed to the parent component, <FormControl>`);
    }

    if (inputProps !== null && inputProps !== void 0 && inputProps.required) {
      // eslint-disable-next-line no-console
      console.warn(`instead of passing the 'required' prop directly to the input component, it should be passed to the parent component, <FormControl>`);
    }
  }

  if (!labelChild) {
    // eslint-disable-next-line no-console
    console.error(`The input field with the id ${id} MUST have a FormControl.Label child.\n\nIf you want to hide the label, pass the 'visuallyHidden' prop to the FormControl.Label component.`);
  }

  if (isChoiceInput) {
    if (validationChild) {
      // eslint-disable-next-line no-console
      console.warn('Validation messages are not rendered for an individual checkbox or radio. The validation message should be shown for all options.');
    }

    if (_react.default.Children.toArray(children).find(child => {
      var _child$props;

      return /*#__PURE__*/_react.default.isValidElement(child) && ((_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.required);
    })) {
      // eslint-disable-next-line no-console
      console.warn('An individual checkbox or radio cannot be a required field.');
    }
  } else {
    if (_react.default.Children.toArray(children).find(child => /*#__PURE__*/_react.default.isValidElement(child) && child.type === _FormControlLeadingVisual.default)) {
      // eslint-disable-next-line no-console
      console.warn('A leading visual is only rendered for a checkbox or radio form control. If you want to render a leading visual inside of your input, check if your input supports a leading visual.');
    }
  }

  return /*#__PURE__*/_react.default.createElement(_slots.Slots, {
    context: {
      captionId,
      disabled,
      id,
      required,
      validationMessageId
    }
  }, slots => {
    const isLabelHidden = /*#__PURE__*/_react.default.isValidElement(slots.Label) && slots.Label.props.visuallyHidden;
    return isChoiceInput || layout === 'horizontal' ? /*#__PURE__*/_react.default.createElement(_.Box, {
      ref: ref,
      display: "flex",
      alignItems: slots.LeadingVisual ? 'center' : undefined,
      sx: sx
    }, /*#__PURE__*/_react.default.createElement(_.Box, {
      sx: {
        '> input': {
          marginLeft: 0,
          marginRight: 0
        }
      }
    }, /*#__PURE__*/_react.default.isValidElement(InputComponent) && /*#__PURE__*/_react.default.cloneElement(InputComponent, {
      id,
      disabled,
      ['aria-describedby']: captionId
    }), _react.default.Children.toArray(children).filter(child => /*#__PURE__*/_react.default.isValidElement(child) && ![_.Checkbox, _.Radio].some(inputComponent => child.type === inputComponent))), slots.LeadingVisual && /*#__PURE__*/_react.default.createElement(_.Box, {
      color: disabled ? 'fg.muted' : 'fg.default',
      sx: {
        '> *': {
          minWidth: slots.Caption ? (0, _constants.get)('fontSizes.4') : (0, _constants.get)('fontSizes.2'),
          minHeight: slots.Caption ? (0, _constants.get)('fontSizes.4') : (0, _constants.get)('fontSizes.2'),
          fill: 'currentColor'
        }
      },
      ml: 2
    }, slots.LeadingVisual), /*#__PURE__*/_react.default.isValidElement(slots.Label) && !slots.Label.props.visuallyHidden || slots.Caption ? /*#__PURE__*/_react.default.createElement(_.Box, {
      display: "flex",
      flexDirection: "column",
      ml: 2
    }, slots.Label, slots.Caption) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, slots.Label, slots.Caption)) : /*#__PURE__*/_react.default.createElement(_.Box, {
      ref: ref,
      display: "flex",
      flexDirection: "column",
      alignItems: "flex-start",
      sx: { ...(isLabelHidden ? {
          '> *:not(label) + *': {
            marginTop: 1
          }
        } : {
          '> * + *': {
            marginTop: 1
          }
        }),
        ...sx
      }
    }, slots.Label, /*#__PURE__*/_react.default.isValidElement(InputComponent) && /*#__PURE__*/_react.default.cloneElement(InputComponent, {
      id,
      required,
      disabled,
      validationStatus,
      ['aria-describedby']: [validationMessageId, captionId].filter(Boolean).join(' '),
      ...InputComponent.props
    }), _react.default.Children.toArray(children).filter(child => /*#__PURE__*/_react.default.isValidElement(child) && !expectedInputComponents.some(inputComponent => child.type === inputComponent)), validationChild && /*#__PURE__*/_react.default.createElement(_ValidationAnimationContainer.default, {
      show: true
    }, slots.Validation), slots.Caption);
  });
});

FormControl.defaultProps = {
  layout: 'vertical'
};

var _default = Object.assign(FormControl, {
  Caption: _FormControlCaption.default,
  Label: _FormControlLabel.default,
  LeadingVisual: _FormControlLeadingVisual.default,
  Validation: _FormControlValidation.default
});

exports.default = _default;