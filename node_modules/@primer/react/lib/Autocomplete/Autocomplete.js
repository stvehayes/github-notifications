"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _ssr = require("@react-aria/ssr");

var _AutocompleteContext = require("./AutocompleteContext");

var _AutocompleteInput = _interopRequireDefault(require("./AutocompleteInput"));

var _AutocompleteMenu = _interopRequireDefault(require("./AutocompleteMenu"));

var _AutocompleteOverlay = _interopRequireDefault(require("./AutocompleteOverlay"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const initialState = {
  inputValue: '',
  showMenu: false,
  isMenuDirectlyActivated: false,
  autocompleteSuggestion: '',
  selectedItemLength: 0
};

const reducer = (state, action) => {
  const {
    type,
    payload
  } = action;

  switch (type) {
    case 'inputValue':
      return { ...state,
        inputValue: payload
      };

    case 'showMenu':
      return { ...state,
        showMenu: payload
      };

    case 'isMenuDirectlyActivated':
      return { ...state,
        isMenuDirectlyActivated: payload
      };

    case 'autocompleteSuggestion':
      return { ...state,
        autocompleteSuggestion: payload
      };

    case 'selectedItemLength':
      return { ...state,
        selectedItemLength: payload
      };

    default:
      return state;
  }
};

const Autocomplete = ({
  children,
  id: idProp
}) => {
  const activeDescendantRef = (0, _react.useRef)(null);
  const scrollContainerRef = (0, _react.useRef)(null);
  const inputRef = (0, _react.useRef)(null);
  const [state, dispatch] = (0, _react.useReducer)(reducer, initialState);
  const {
    inputValue,
    showMenu,
    autocompleteSuggestion,
    isMenuDirectlyActivated,
    selectedItemLength
  } = state;
  const setInputValue = (0, _react.useCallback)(value => {
    dispatch({
      type: 'inputValue',
      payload: value
    });
  }, []);
  const setShowMenu = (0, _react.useCallback)(value => {
    dispatch({
      type: 'showMenu',
      payload: value
    });
  }, []);
  const setAutocompleteSuggestion = (0, _react.useCallback)(value => {
    dispatch({
      type: 'autocompleteSuggestion',
      payload: value
    });
  }, []);
  const setIsMenuDirectlyActivated = (0, _react.useCallback)(value => {
    dispatch({
      type: 'isMenuDirectlyActivated',
      payload: value
    });
  }, []);
  const setSelectedItemLength = (0, _react.useCallback)(value => {
    dispatch({
      type: 'selectedItemLength',
      payload: value
    });
  }, []);
  const id = (0, _ssr.useSSRSafeId)(idProp);
  return /*#__PURE__*/_react.default.createElement(_AutocompleteContext.AutocompleteContext.Provider, {
    value: {
      activeDescendantRef,
      autocompleteSuggestion,
      id,
      inputRef,
      inputValue,
      isMenuDirectlyActivated,
      scrollContainerRef,
      selectedItemLength,
      setAutocompleteSuggestion,
      setInputValue,
      setIsMenuDirectlyActivated,
      setShowMenu,
      setSelectedItemLength,
      showMenu
    }
  }, children);
};

Autocomplete.displayName = "Autocomplete";

var _default = Object.assign(Autocomplete, {
  Context: _AutocompleteContext.AutocompleteContext,
  Input: _AutocompleteInput.default,
  Menu: _AutocompleteMenu.default,
  Overlay: _AutocompleteOverlay.default
});

exports.default = _default;