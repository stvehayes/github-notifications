{"ast":null,"code":"import React from 'react';\nimport { focusTrap } from '@primer/behaviors';\nimport { useProvidedRefOrCreate } from './useProvidedRefOrCreate';\n/**\n * Hook used to trap focus inside a container. Returns a ref that can be added to the container\n * that should trap focus.\n * @param settings {FocusTrapHookSettings}\n */\n\nexport function useFocusTrap(settings) {\n  let dependencies = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const containerRef = useProvidedRefOrCreate(settings === null || settings === void 0 ? void 0 : settings.containerRef);\n  const initialFocusRef = useProvidedRefOrCreate(settings === null || settings === void 0 ? void 0 : settings.initialFocusRef);\n  const disabled = settings === null || settings === void 0 ? void 0 : settings.disabled;\n  const abortController = React.useRef();\n  const previousFocusedElement = React.useRef(null); // If we are enabling a focus trap and haven't already stored the previously focused element\n  // go ahead an do that so we can restore later when the trap is disabled.\n\n  if (!previousFocusedElement.current && !(settings !== null && settings !== void 0 && settings.disabled)) {\n    previousFocusedElement.current = document.activeElement;\n  } // This function removes the event listeners that enable the focus trap and restores focus\n  // to the previously-focused element (if necessary).\n\n\n  function disableTrap() {\n    var _abortController$curr;\n\n    (_abortController$curr = abortController.current) === null || _abortController$curr === void 0 ? void 0 : _abortController$curr.abort();\n\n    if (settings !== null && settings !== void 0 && settings.restoreFocusOnCleanUp && previousFocusedElement.current instanceof HTMLElement) {\n      previousFocusedElement.current.focus();\n      previousFocusedElement.current = null;\n    }\n  }\n\n  React.useEffect(() => {\n    if (containerRef.current instanceof HTMLElement) {\n      if (!disabled) {\n        var _initialFocusRef$curr;\n\n        abortController.current = focusTrap(containerRef.current, (_initialFocusRef$curr = initialFocusRef.current) !== null && _initialFocusRef$curr !== void 0 ? _initialFocusRef$curr : undefined);\n        return () => {\n          disableTrap();\n        };\n      } else {\n        disableTrap();\n      }\n    }\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [containerRef, initialFocusRef, disabled, ...dependencies]);\n  return {\n    containerRef,\n    initialFocusRef\n  };\n}","map":{"version":3,"sources":["/Users/steve/Documents/repos/github-notifications/node_modules/@primer/react/lib-esm/hooks/useFocusTrap.js"],"names":["React","focusTrap","useProvidedRefOrCreate","useFocusTrap","settings","dependencies","containerRef","initialFocusRef","disabled","abortController","useRef","previousFocusedElement","current","document","activeElement","disableTrap","_abortController$curr","abort","restoreFocusOnCleanUp","HTMLElement","focus","useEffect","_initialFocusRef$curr","undefined"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAsBC,QAAtB,EAAmD;AAAA,MAAnBC,YAAmB,uEAAJ,EAAI;AACxD,QAAMC,YAAY,GAAGJ,sBAAsB,CAACE,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACE,YAA9D,CAA3C;AACA,QAAMC,eAAe,GAAGL,sBAAsB,CAACE,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACG,eAA9D,CAA9C;AACA,QAAMC,QAAQ,GAAGJ,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACI,QAA9E;AACA,QAAMC,eAAe,GAAGT,KAAK,CAACU,MAAN,EAAxB;AACA,QAAMC,sBAAsB,GAAGX,KAAK,CAACU,MAAN,CAAa,IAAb,CAA/B,CALwD,CAKL;AACnD;;AAEA,MAAI,CAACC,sBAAsB,CAACC,OAAxB,IAAmC,EAAER,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,IAA4CA,QAAQ,CAACI,QAAvD,CAAvC,EAAyG;AACvGG,IAAAA,sBAAsB,CAACC,OAAvB,GAAiCC,QAAQ,CAACC,aAA1C;AACD,GAVuD,CAUtD;AACF;;;AAGA,WAASC,WAAT,GAAuB;AACrB,QAAIC,qBAAJ;;AAEA,KAACA,qBAAqB,GAAGP,eAAe,CAACG,OAAzC,MAAsD,IAAtD,IAA8DI,qBAAqB,KAAK,KAAK,CAA7F,GAAiG,KAAK,CAAtG,GAA0GA,qBAAqB,CAACC,KAAtB,EAA1G;;AAEA,QAAIb,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,IAA4CA,QAAQ,CAACc,qBAArD,IAA8EP,sBAAsB,CAACC,OAAvB,YAA0CO,WAA5H,EAAyI;AACvIR,MAAAA,sBAAsB,CAACC,OAAvB,CAA+BQ,KAA/B;AACAT,MAAAA,sBAAsB,CAACC,OAAvB,GAAiC,IAAjC;AACD;AACF;;AAEDZ,EAAAA,KAAK,CAACqB,SAAN,CAAgB,MAAM;AACpB,QAAIf,YAAY,CAACM,OAAb,YAAgCO,WAApC,EAAiD;AAC/C,UAAI,CAACX,QAAL,EAAe;AACb,YAAIc,qBAAJ;;AAEAb,QAAAA,eAAe,CAACG,OAAhB,GAA0BX,SAAS,CAACK,YAAY,CAACM,OAAd,EAAuB,CAACU,qBAAqB,GAAGf,eAAe,CAACK,OAAzC,MAAsD,IAAtD,IAA8DU,qBAAqB,KAAK,KAAK,CAA7F,GAAiGA,qBAAjG,GAAyHC,SAAhJ,CAAnC;AACA,eAAO,MAAM;AACXR,UAAAA,WAAW;AACZ,SAFD;AAGD,OAPD,MAOO;AACLA,QAAAA,WAAW;AACZ;AACF;AACF,GAbD,EAaG;AACH,GAACT,YAAD,EAAeC,eAAf,EAAgCC,QAAhC,EAA0C,GAAGH,YAA7C,CAdA;AAeA,SAAO;AACLC,IAAAA,YADK;AAELC,IAAAA;AAFK,GAAP;AAID","sourcesContent":["import React from 'react';\nimport { focusTrap } from '@primer/behaviors';\nimport { useProvidedRefOrCreate } from './useProvidedRefOrCreate';\n\n/**\n * Hook used to trap focus inside a container. Returns a ref that can be added to the container\n * that should trap focus.\n * @param settings {FocusTrapHookSettings}\n */\nexport function useFocusTrap(settings, dependencies = []) {\n  const containerRef = useProvidedRefOrCreate(settings === null || settings === void 0 ? void 0 : settings.containerRef);\n  const initialFocusRef = useProvidedRefOrCreate(settings === null || settings === void 0 ? void 0 : settings.initialFocusRef);\n  const disabled = settings === null || settings === void 0 ? void 0 : settings.disabled;\n  const abortController = React.useRef();\n  const previousFocusedElement = React.useRef(null); // If we are enabling a focus trap and haven't already stored the previously focused element\n  // go ahead an do that so we can restore later when the trap is disabled.\n\n  if (!previousFocusedElement.current && !(settings !== null && settings !== void 0 && settings.disabled)) {\n    previousFocusedElement.current = document.activeElement;\n  } // This function removes the event listeners that enable the focus trap and restores focus\n  // to the previously-focused element (if necessary).\n\n\n  function disableTrap() {\n    var _abortController$curr;\n\n    (_abortController$curr = abortController.current) === null || _abortController$curr === void 0 ? void 0 : _abortController$curr.abort();\n\n    if (settings !== null && settings !== void 0 && settings.restoreFocusOnCleanUp && previousFocusedElement.current instanceof HTMLElement) {\n      previousFocusedElement.current.focus();\n      previousFocusedElement.current = null;\n    }\n  }\n\n  React.useEffect(() => {\n    if (containerRef.current instanceof HTMLElement) {\n      if (!disabled) {\n        var _initialFocusRef$curr;\n\n        abortController.current = focusTrap(containerRef.current, (_initialFocusRef$curr = initialFocusRef.current) !== null && _initialFocusRef$curr !== void 0 ? _initialFocusRef$curr : undefined);\n        return () => {\n          disableTrap();\n        };\n      } else {\n        disableTrap();\n      }\n    }\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [containerRef, initialFocusRef, disabled, ...dependencies]);\n  return {\n    containerRef,\n    initialFocusRef\n  };\n}"]},"metadata":{},"sourceType":"module"}