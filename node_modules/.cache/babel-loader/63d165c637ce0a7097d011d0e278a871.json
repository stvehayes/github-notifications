{"ast":null,"code":"import React from 'react';\nimport { createPortal } from 'react-dom';\nimport useLayoutEffect from '../utils/useIsomorphicLayoutEffect';\nconst PRIMER_PORTAL_ROOT_ID = '__primerPortalRoot__';\nconst DEFAULT_PORTAL_CONTAINER_NAME = '__default__';\nconst portalRootRegistry = {};\n/**\n * Register a container to serve as a portal root.\n * @param root The element that will be the root for portals created in this container\n * @param name The name of the container, to be used with the `containerName` prop on the Portal Component.\n * If name is not specified, registers the default portal root.\n */\n\nexport function registerPortalRoot(root) {\n  let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_PORTAL_CONTAINER_NAME;\n  portalRootRegistry[name] = root;\n} // Ensures that a default portal root exists and is registered. If a DOM element exists\n// with id __primerPortalRoot__, allow that element to serve as the default portal root.\n// Otherwise, create that element and attach it to the end of document.body.\n\nfunction ensureDefaultPortal() {\n  const existingDefaultPortalContainer = portalRootRegistry[DEFAULT_PORTAL_CONTAINER_NAME];\n\n  if (!existingDefaultPortalContainer || !document.body.contains(existingDefaultPortalContainer)) {\n    let defaultPortalContainer = document.getElementById(PRIMER_PORTAL_ROOT_ID);\n\n    if (!(defaultPortalContainer instanceof Element)) {\n      defaultPortalContainer = document.createElement('div');\n      defaultPortalContainer.setAttribute('id', PRIMER_PORTAL_ROOT_ID);\n      defaultPortalContainer.style.position = 'absolute';\n      defaultPortalContainer.style.top = '0';\n      defaultPortalContainer.style.left = '0';\n      const suitablePortalRoot = document.querySelector('[data-portal-root]');\n\n      if (suitablePortalRoot) {\n        suitablePortalRoot.appendChild(defaultPortalContainer);\n      } else {\n        document.body.appendChild(defaultPortalContainer);\n      }\n    }\n\n    registerPortalRoot(defaultPortalContainer);\n  }\n}\n/**\n * Creates a React Portal, placing all children in a separate physical DOM root node.\n * @see https://reactjs.org/docs/portals.html\n */\n\n\nexport const Portal = _ref => {\n  let {\n    children,\n    onMount,\n    containerName: _containerName\n  } = _ref;\n  const hostElement = document.createElement('div'); // Portaled content should get their own stacking context so they don't interfere\n  // with each other in unexpected ways. One should never find themselves tempted\n  // to change the zIndex to a value other than \"1\".\n\n  hostElement.style.position = 'relative';\n  hostElement.style.zIndex = '1';\n  const elementRef = React.useRef(hostElement);\n  useLayoutEffect(() => {\n    let containerName = _containerName;\n\n    if (containerName === undefined) {\n      containerName = DEFAULT_PORTAL_CONTAINER_NAME;\n      ensureDefaultPortal();\n    }\n\n    const parentElement = portalRootRegistry[containerName];\n\n    if (!parentElement) {\n      throw new Error(`Portal container '${_containerName}' is not yet registered. Container must be registered with registerPortal before use.`);\n    }\n\n    const element = elementRef.current;\n    parentElement.appendChild(element);\n    onMount === null || onMount === void 0 ? void 0 : onMount();\n    return () => {\n      parentElement.removeChild(element);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [elementRef]);\n  return /*#__PURE__*/createPortal(children, elementRef.current);\n};","map":{"version":3,"sources":["/Users/steve/Documents/repos/github-notifications/node_modules/@primer/react/lib-esm/Portal/Portal.js"],"names":["React","createPortal","useLayoutEffect","PRIMER_PORTAL_ROOT_ID","DEFAULT_PORTAL_CONTAINER_NAME","portalRootRegistry","registerPortalRoot","root","name","ensureDefaultPortal","existingDefaultPortalContainer","document","body","contains","defaultPortalContainer","getElementById","Element","createElement","setAttribute","style","position","top","left","suitablePortalRoot","querySelector","appendChild","Portal","children","onMount","containerName","_containerName","hostElement","zIndex","elementRef","useRef","undefined","parentElement","Error","element","current","removeChild"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { createPortal } from 'react-dom';\nimport useLayoutEffect from '../utils/useIsomorphicLayoutEffect';\nconst PRIMER_PORTAL_ROOT_ID = '__primerPortalRoot__';\nconst DEFAULT_PORTAL_CONTAINER_NAME = '__default__';\nconst portalRootRegistry = {};\n/**\n * Register a container to serve as a portal root.\n * @param root The element that will be the root for portals created in this container\n * @param name The name of the container, to be used with the `containerName` prop on the Portal Component.\n * If name is not specified, registers the default portal root.\n */\n\nexport function registerPortalRoot(root, name = DEFAULT_PORTAL_CONTAINER_NAME) {\n  portalRootRegistry[name] = root;\n} // Ensures that a default portal root exists and is registered. If a DOM element exists\n// with id __primerPortalRoot__, allow that element to serve as the default portal root.\n// Otherwise, create that element and attach it to the end of document.body.\n\nfunction ensureDefaultPortal() {\n  const existingDefaultPortalContainer = portalRootRegistry[DEFAULT_PORTAL_CONTAINER_NAME];\n\n  if (!existingDefaultPortalContainer || !document.body.contains(existingDefaultPortalContainer)) {\n    let defaultPortalContainer = document.getElementById(PRIMER_PORTAL_ROOT_ID);\n\n    if (!(defaultPortalContainer instanceof Element)) {\n      defaultPortalContainer = document.createElement('div');\n      defaultPortalContainer.setAttribute('id', PRIMER_PORTAL_ROOT_ID);\n      defaultPortalContainer.style.position = 'absolute';\n      defaultPortalContainer.style.top = '0';\n      defaultPortalContainer.style.left = '0';\n      const suitablePortalRoot = document.querySelector('[data-portal-root]');\n\n      if (suitablePortalRoot) {\n        suitablePortalRoot.appendChild(defaultPortalContainer);\n      } else {\n        document.body.appendChild(defaultPortalContainer);\n      }\n    }\n\n    registerPortalRoot(defaultPortalContainer);\n  }\n}\n\n/**\n * Creates a React Portal, placing all children in a separate physical DOM root node.\n * @see https://reactjs.org/docs/portals.html\n */\nexport const Portal = ({\n  children,\n  onMount,\n  containerName: _containerName\n}) => {\n  const hostElement = document.createElement('div'); // Portaled content should get their own stacking context so they don't interfere\n  // with each other in unexpected ways. One should never find themselves tempted\n  // to change the zIndex to a value other than \"1\".\n\n  hostElement.style.position = 'relative';\n  hostElement.style.zIndex = '1';\n  const elementRef = React.useRef(hostElement);\n  useLayoutEffect(() => {\n    let containerName = _containerName;\n\n    if (containerName === undefined) {\n      containerName = DEFAULT_PORTAL_CONTAINER_NAME;\n      ensureDefaultPortal();\n    }\n\n    const parentElement = portalRootRegistry[containerName];\n\n    if (!parentElement) {\n      throw new Error(`Portal container '${_containerName}' is not yet registered. Container must be registered with registerPortal before use.`);\n    }\n\n    const element = elementRef.current;\n    parentElement.appendChild(element);\n    onMount === null || onMount === void 0 ? void 0 : onMount();\n    return () => {\n      parentElement.removeChild(element);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [elementRef]);\n  return /*#__PURE__*/createPortal(children, elementRef.current);\n};"]},"metadata":{},"sourceType":"module"}