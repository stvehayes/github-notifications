{"ast":null,"code":"import React from 'react';\nimport { useForceUpdate } from './use-force-update';\n/** createSlots is a factory that can create a\n *  typesafe Slots + Slot pair to use in a component definition\n *  For example: ActionList.Item uses createSlots to get a Slots wrapper\n *  + Slot component that is used by LeadingVisual, Description\n */\n\nconst createSlots = slotNames => {\n  const SlotsContext = /*#__PURE__*/React.createContext({\n    registerSlot: () => null,\n    unregisterSlot: () => null,\n    context: {}\n  });\n  /** Slots uses a Double render strategy inspired by [reach-ui/descendants](https://github.com/reach/reach-ui/tree/develop/packages/descendants)\n   *  Slot registers themself with the Slots parent.\n   *  When all the children have mounted = registered themselves in slot,\n   *  we re-render the parent component to render with slots\n   */\n\n  const Slots = _ref => {\n    let {\n      context = {},\n      children\n    } = _ref;\n    // initialise slots\n    const slotsDefinition = {};\n    slotNames.map(name => slotsDefinition[name] = null);\n    const slotsRef = React.useRef(slotsDefinition);\n    const rerenderWithSlots = useForceUpdate();\n    const [isMounted, setIsMounted] = React.useState(false); // fires after all the effects in children\n\n    React.useEffect(() => {\n      rerenderWithSlots();\n      setIsMounted(true);\n    }, [rerenderWithSlots]);\n    const registerSlot = React.useCallback((name, contents) => {\n      slotsRef.current[name] = contents; // don't render until the component mounts = all slots are registered\n\n      if (isMounted) rerenderWithSlots();\n    }, [isMounted, rerenderWithSlots]); // Slot can be removed from the tree as well,\n    // we need to unregister them from the slot\n\n    const unregisterSlot = React.useCallback(name => {\n      slotsRef.current[name] = null;\n      rerenderWithSlots();\n    }, [rerenderWithSlots]);\n    /**\n     * Slots uses a render prop API so abstract the\n     * implementation detail of using a context provider.\n     */\n\n    const slots = slotsRef.current;\n    return /*#__PURE__*/React.createElement(SlotsContext.Provider, {\n      value: {\n        registerSlot,\n        unregisterSlot,\n        context\n      }\n    }, children(slots));\n  };\n\n  const Slot = _ref2 => {\n    let {\n      name,\n      children\n    } = _ref2;\n    const {\n      registerSlot,\n      unregisterSlot,\n      context\n    } = React.useContext(SlotsContext);\n    React.useEffect(() => {\n      registerSlot(name, typeof children === 'function' ? children(context) : children);\n      return () => unregisterSlot(name);\n    }, [name, children, registerSlot, unregisterSlot, context]);\n    return null;\n  };\n\n  return {\n    Slots,\n    Slot\n  };\n};\n\nexport default createSlots;","map":{"version":3,"sources":["/Users/steve/Documents/repos/github-notifications/node_modules/@primer/react/lib-esm/utils/create-slots.js"],"names":["React","useForceUpdate","createSlots","slotNames","SlotsContext","createContext","registerSlot","unregisterSlot","context","Slots","children","slotsDefinition","map","name","slotsRef","useRef","rerenderWithSlots","isMounted","setIsMounted","useState","useEffect","useCallback","contents","current","slots","createElement","Provider","value","Slot","useContext"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useForceUpdate } from './use-force-update';\n/** createSlots is a factory that can create a\n *  typesafe Slots + Slot pair to use in a component definition\n *  For example: ActionList.Item uses createSlots to get a Slots wrapper\n *  + Slot component that is used by LeadingVisual, Description\n */\n\nconst createSlots = slotNames => {\n  const SlotsContext = /*#__PURE__*/React.createContext({\n    registerSlot: () => null,\n    unregisterSlot: () => null,\n    context: {}\n  });\n  /** Slots uses a Double render strategy inspired by [reach-ui/descendants](https://github.com/reach/reach-ui/tree/develop/packages/descendants)\n   *  Slot registers themself with the Slots parent.\n   *  When all the children have mounted = registered themselves in slot,\n   *  we re-render the parent component to render with slots\n   */\n\n  const Slots = ({\n    context = {},\n    children\n  }) => {\n    // initialise slots\n    const slotsDefinition = {};\n    slotNames.map(name => slotsDefinition[name] = null);\n    const slotsRef = React.useRef(slotsDefinition);\n    const rerenderWithSlots = useForceUpdate();\n    const [isMounted, setIsMounted] = React.useState(false); // fires after all the effects in children\n\n    React.useEffect(() => {\n      rerenderWithSlots();\n      setIsMounted(true);\n    }, [rerenderWithSlots]);\n    const registerSlot = React.useCallback((name, contents) => {\n      slotsRef.current[name] = contents; // don't render until the component mounts = all slots are registered\n\n      if (isMounted) rerenderWithSlots();\n    }, [isMounted, rerenderWithSlots]); // Slot can be removed from the tree as well,\n    // we need to unregister them from the slot\n\n    const unregisterSlot = React.useCallback(name => {\n      slotsRef.current[name] = null;\n      rerenderWithSlots();\n    }, [rerenderWithSlots]);\n    /**\n     * Slots uses a render prop API so abstract the\n     * implementation detail of using a context provider.\n     */\n\n    const slots = slotsRef.current;\n    return /*#__PURE__*/React.createElement(SlotsContext.Provider, {\n      value: {\n        registerSlot,\n        unregisterSlot,\n        context\n      }\n    }, children(slots));\n  };\n\n  const Slot = ({\n    name,\n    children\n  }) => {\n    const {\n      registerSlot,\n      unregisterSlot,\n      context\n    } = React.useContext(SlotsContext);\n    React.useEffect(() => {\n      registerSlot(name, typeof children === 'function' ? children(context) : children);\n      return () => unregisterSlot(name);\n    }, [name, children, registerSlot, unregisterSlot, context]);\n    return null;\n  };\n\n  return {\n    Slots,\n    Slot\n  };\n};\n\nexport default createSlots;"]},"metadata":{},"sourceType":"module"}