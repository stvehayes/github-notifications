"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _octiconsReact = require("@primer/octicons-react");

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _styledSystem = require("styled-system");

var _constants = require("../constants");

var _sx = _interopRequireDefault(require("../sx"));

var _TokenBase = require("./TokenBase");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const variants = (0, _styledSystem.variant)({
  prop: 'size',
  variants: {
    small: {
      height: _TokenBase.tokenSizes.small,
      width: _TokenBase.tokenSizes.small
    },
    medium: {
      height: _TokenBase.tokenSizes.medium,
      width: _TokenBase.tokenSizes.medium
    },
    large: {
      height: _TokenBase.tokenSizes.large,
      width: _TokenBase.tokenSizes.large
    },
    extralarge: {
      height: _TokenBase.tokenSizes.extralarge,
      width: _TokenBase.tokenSizes.extralarge
    },
    // xlarge will eventually replace "extralarge" per this ADR: https://github.com/github/primer/blob/main/adrs/2022-02-09-size-naming-guidelines.md
    xlarge: {
      height: _TokenBase.tokenSizes.xlarge,
      width: _TokenBase.tokenSizes.xlarge
    }
  }
});

const getTokenButtonIconSize = size => parseInt(_TokenBase.tokenSizes[size || _TokenBase.defaultTokenSize], 10) * 0.75;

const StyledTokenButton = _styledComponents.default.span.withConfig({
  displayName: "_RemoveTokenButton__StyledTokenButton",
  componentId: "sc-urhpr1-0"
})(["background-color:transparent;font-family:inherit;color:currentColor;cursor:pointer;display:inline-flex;justify-content:center;align-items:center;user-select:none;appearance:none;text-decoration:none;padding:0;transform:", ";align-self:baseline;border:0;border-radius:999px;", " &:hover,&:focus{background-color:", ";}&:active{background-color:", ";}", " ", ""], props => `translate(${props.borderOffset}px, -${props.borderOffset}px)`, props => {
  switch (props.size) {
    case 'large':
    case 'extralarge':
    case 'xlarge':
      return (0, _styledComponents.css)(["margin-left:", ";"], (0, _constants.get)('space.2'));

    default:
      return (0, _styledComponents.css)(["margin-left:", ";"], (0, _constants.get)('space.1'));
  }
}, (0, _constants.get)('colors.neutral.muted'), (0, _constants.get)('colors.neutral.subtle'), variants, _sx.default);

const RemoveTokenButton = ({
  'aria-label': ariaLabel,
  isParentInteractive,
  size,
  ...rest
}) => {
  delete rest.children;
  return /*#__PURE__*/_react.default.createElement(StyledTokenButton, _extends({
    as: isParentInteractive ? 'span' : 'button',
    tabIndex: isParentInteractive ? -1 : undefined,
    "aria-label": !isParentInteractive ? 'Remove token' : ariaLabel,
    size: size
  }, rest), /*#__PURE__*/_react.default.createElement(_octiconsReact.XIcon, {
    size: getTokenButtonIconSize(size)
  }));
};

RemoveTokenButton.displayName = "RemoveTokenButton";
RemoveTokenButton.defaultProps = {
  size: _TokenBase.defaultTokenSize
};
var _default = RemoveTokenButton;
exports.default = _default;