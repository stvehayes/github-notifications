{"ast":null,"code":"import { useCallback, useRef, useState } from 'react';\n/**\n * There are certain situations where a ref might be set after the current render cycle for a\n * component has finished.  e.g. a forward ref from a conditionally rendered child component.\n * In these situations, we need to force a re-render, which is done here by the useState hook.\n * @type TRef The type of the RefObject which should be created.\n */\n\nexport function useRenderForcingRef(value) {\n  const [refCurrent, setRefCurrent] = useState(value || null);\n  const ref = useRef(null);\n  ref.current = refCurrent;\n  const setRef = useCallback(newRef => {\n    ref.current = newRef;\n    setRefCurrent(newRef);\n  }, [ref]);\n  return [ref, setRef];\n}","map":{"version":3,"sources":["/Users/steve/Documents/repos/github-notifications/node_modules/@primer/react/lib-esm/hooks/useRenderForcingRef.js"],"names":["useCallback","useRef","useState","useRenderForcingRef","value","refCurrent","setRefCurrent","ref","current","setRef","newRef"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,EAA8BC,QAA9B,QAA8C,OAA9C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AACzC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAACE,KAAK,IAAI,IAAV,CAA5C;AACA,QAAMG,GAAG,GAAGN,MAAM,CAAC,IAAD,CAAlB;AACAM,EAAAA,GAAG,CAACC,OAAJ,GAAcH,UAAd;AACA,QAAMI,MAAM,GAAGT,WAAW,CAACU,MAAM,IAAI;AACnCH,IAAAA,GAAG,CAACC,OAAJ,GAAcE,MAAd;AACAJ,IAAAA,aAAa,CAACI,MAAD,CAAb;AACD,GAHyB,EAGvB,CAACH,GAAD,CAHuB,CAA1B;AAIA,SAAO,CAACA,GAAD,EAAME,MAAN,CAAP;AACD","sourcesContent":["import { useCallback, useRef, useState } from 'react';\n/**\n * There are certain situations where a ref might be set after the current render cycle for a\n * component has finished.  e.g. a forward ref from a conditionally rendered child component.\n * In these situations, we need to force a re-render, which is done here by the useState hook.\n * @type TRef The type of the RefObject which should be created.\n */\n\nexport function useRenderForcingRef(value) {\n  const [refCurrent, setRefCurrent] = useState(value || null);\n  const ref = useRef(null);\n  ref.current = refCurrent;\n  const setRef = useCallback(newRef => {\n    ref.current = newRef;\n    setRefCurrent(newRef);\n  }, [ref]);\n  return [ref, setRef];\n}"]},"metadata":{},"sourceType":"module"}