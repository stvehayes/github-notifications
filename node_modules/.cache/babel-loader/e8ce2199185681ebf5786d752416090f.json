{"ast":null,"code":"import { useOnOutsideClick } from './useOnOutsideClick';\nimport { useOpenAndCloseFocus } from './useOpenAndCloseFocus';\nimport { useOnEscapePress } from './useOnEscapePress';\nimport { useProvidedRefOrCreate } from './useProvidedRefOrCreate';\nexport const useOverlay = _ref => {\n  let {\n    overlayRef: _overlayRef,\n    returnFocusRef,\n    initialFocusRef,\n    onEscape,\n    ignoreClickRefs,\n    onClickOutside,\n    preventFocusOnOpen\n  } = _ref;\n  const overlayRef = useProvidedRefOrCreate(_overlayRef);\n  useOpenAndCloseFocus({\n    containerRef: overlayRef,\n    returnFocusRef,\n    initialFocusRef,\n    preventFocusOnOpen\n  });\n  useOnOutsideClick({\n    containerRef: overlayRef,\n    ignoreClickRefs,\n    onClickOutside\n  }); // We only want one overlay to close at a time\n\n  const preventeddefaultCheckedEscape = event => {\n    onEscape(event);\n    event.preventDefault();\n  };\n\n  useOnEscapePress(preventeddefaultCheckedEscape);\n  return {\n    ref: overlayRef\n  };\n};","map":{"version":3,"sources":["/Users/steve/Documents/repos/notifications/node_modules/@primer/react/lib-esm/hooks/useOverlay.js"],"names":["useOnOutsideClick","useOpenAndCloseFocus","useOnEscapePress","useProvidedRefOrCreate","useOverlay","overlayRef","_overlayRef","returnFocusRef","initialFocusRef","onEscape","ignoreClickRefs","onClickOutside","preventFocusOnOpen","containerRef","preventeddefaultCheckedEscape","event","preventDefault","ref"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,qBAAlC;AACA,SAASC,oBAAT,QAAqC,wBAArC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AACA,OAAO,MAAMC,UAAU,GAAG,QAQpB;AAAA,MARqB;AACzBC,IAAAA,UAAU,EAAEC,WADa;AAEzBC,IAAAA,cAFyB;AAGzBC,IAAAA,eAHyB;AAIzBC,IAAAA,QAJyB;AAKzBC,IAAAA,eALyB;AAMzBC,IAAAA,cANyB;AAOzBC,IAAAA;AAPyB,GAQrB;AACJ,QAAMP,UAAU,GAAGF,sBAAsB,CAACG,WAAD,CAAzC;AACAL,EAAAA,oBAAoB,CAAC;AACnBY,IAAAA,YAAY,EAAER,UADK;AAEnBE,IAAAA,cAFmB;AAGnBC,IAAAA,eAHmB;AAInBI,IAAAA;AAJmB,GAAD,CAApB;AAMAZ,EAAAA,iBAAiB,CAAC;AAChBa,IAAAA,YAAY,EAAER,UADE;AAEhBK,IAAAA,eAFgB;AAGhBC,IAAAA;AAHgB,GAAD,CAAjB,CARI,CAYA;;AAEJ,QAAMG,6BAA6B,GAAGC,KAAK,IAAI;AAC7CN,IAAAA,QAAQ,CAACM,KAAD,CAAR;AACAA,IAAAA,KAAK,CAACC,cAAN;AACD,GAHD;;AAKAd,EAAAA,gBAAgB,CAACY,6BAAD,CAAhB;AACA,SAAO;AACLG,IAAAA,GAAG,EAAEZ;AADA,GAAP;AAGD,CA/BM","sourcesContent":["import { useOnOutsideClick } from './useOnOutsideClick';\nimport { useOpenAndCloseFocus } from './useOpenAndCloseFocus';\nimport { useOnEscapePress } from './useOnEscapePress';\nimport { useProvidedRefOrCreate } from './useProvidedRefOrCreate';\nexport const useOverlay = ({\n  overlayRef: _overlayRef,\n  returnFocusRef,\n  initialFocusRef,\n  onEscape,\n  ignoreClickRefs,\n  onClickOutside,\n  preventFocusOnOpen\n}) => {\n  const overlayRef = useProvidedRefOrCreate(_overlayRef);\n  useOpenAndCloseFocus({\n    containerRef: overlayRef,\n    returnFocusRef,\n    initialFocusRef,\n    preventFocusOnOpen\n  });\n  useOnOutsideClick({\n    containerRef: overlayRef,\n    ignoreClickRefs,\n    onClickOutside\n  }); // We only want one overlay to close at a time\n\n  const preventeddefaultCheckedEscape = event => {\n    onEscape(event);\n    event.preventDefault();\n  };\n\n  useOnEscapePress(preventeddefaultCheckedEscape);\n  return {\n    ref: overlayRef\n  };\n};"]},"metadata":{},"sourceType":"module"}