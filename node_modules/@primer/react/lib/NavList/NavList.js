"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NavList = void 0;

var _octiconsReact = require("@primer/octicons-react");

var _ssr = require("@react-aria/ssr");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _ActionList = require("../ActionList");

var _Box = _interopRequireDefault(require("../Box"));

var _StyledOcticon = _interopRequireDefault(require("../StyledOcticon"));

var _sx = _interopRequireWildcard(require("../sx"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const NavBox = _styledComponents.default.nav.withConfig({
  displayName: "NavList__NavBox",
  componentId: "sc-1c8ygf7-0"
})(_sx.default);

const Root = /*#__PURE__*/_react.default.forwardRef(({
  children,
  ...props
}, ref) => {
  return /*#__PURE__*/_react.default.createElement(NavBox, _extends({}, props, {
    ref: ref
  }), /*#__PURE__*/_react.default.createElement(_ActionList.ActionList, null, children));
});

Root.displayName = 'NavList'; // ----------------------------------------------------------------------------
// NavList.Item

const Item = /*#__PURE__*/_react.default.forwardRef(({
  'aria-current': ariaCurrent,
  children,
  sx: sxProp = {},
  ...props
}, ref) => {
  const {
    depth
  } = _react.default.useContext(SubNavContext); // Get SubNav from children


  const subNav = _react.default.Children.toArray(children).find(child => /*#__PURE__*/(0, _react.isValidElement)(child) && child.type === SubNav); // Get children without SubNav


  const childrenWithoutSubNav = _react.default.Children.toArray(children).filter(child => /*#__PURE__*/(0, _react.isValidElement)(child) ? child.type !== SubNav : true); // Render ItemWithSubNav if SubNav is present


  if (subNav && /*#__PURE__*/(0, _react.isValidElement)(subNav) && depth < 1) {
    return /*#__PURE__*/_react.default.createElement(ItemWithSubNav, {
      subNav: subNav,
      sx: sxProp
    }, childrenWithoutSubNav);
  }

  return /*#__PURE__*/_react.default.createElement(_ActionList.ActionList.LinkItem, _extends({
    ref: ref,
    "aria-current": ariaCurrent,
    active: Boolean(ariaCurrent) && ariaCurrent !== 'false',
    sx: (0, _sx.merge)({
      paddingLeft: depth > 0 ? 5 : null,
      // Indent sub-items
      fontSize: depth > 0 ? 0 : null,
      // Reduce font size of sub-items
      fontWeight: depth > 0 ? 'normal' : null // Sub-items don't get bolded

    }, sxProp)
  }, props), children);
});

Item.displayName = 'NavList.Item'; // ----------------------------------------------------------------------------
// ItemWithSubNav (internal)

const ItemWithSubNavContext = /*#__PURE__*/_react.default.createContext({
  buttonId: '',
  subNavId: '',
  isOpen: false
}); // TODO: ref prop
// TODO: Animate open/close transition


function ItemWithSubNav({
  children,
  subNav,
  sx: sxProp = {}
}) {
  const buttonId = (0, _ssr.useSSRSafeId)();
  const subNavId = (0, _ssr.useSSRSafeId)();

  const [isOpen, setIsOpen] = _react.default.useState(false);

  const subNavRef = _react.default.useRef(null);

  const [containsCurrentItem, setContainsCurrentItem] = _react.default.useState(false);

  _react.default.useLayoutEffect(() => {
    if (subNavRef.current) {
      // Check if SubNav contains current item
      const currentItem = subNavRef.current.querySelector('[aria-current]');

      if (currentItem && currentItem.getAttribute('aria-current') !== 'false') {
        setContainsCurrentItem(true);
        setIsOpen(true);
      }
    }
  }, [subNav]);

  return /*#__PURE__*/_react.default.createElement(ItemWithSubNavContext.Provider, {
    value: {
      buttonId,
      subNavId,
      isOpen
    }
  }, /*#__PURE__*/_react.default.createElement(_Box.default, {
    as: "li",
    "aria-labelledby": buttonId,
    sx: {
      listStyle: 'none'
    }
  }, /*#__PURE__*/_react.default.createElement(_ActionList.ActionList.Item, {
    as: "button",
    id: buttonId,
    "aria-expanded": isOpen,
    "aria-controls": subNavId // When the subNav is closed, how should we indicated that the subNav contains the current item?
    ,
    active: !isOpen && containsCurrentItem,
    onClick: () => setIsOpen(open => !open),
    sx: (0, _sx.merge)({
      fontWeight: containsCurrentItem ? 'bold' : null // Parent item is bold if any of it's sub-items are current

    }, sxProp)
  }, children, /*#__PURE__*/_react.default.createElement(_ActionList.ActionList.TrailingVisual, null, /*#__PURE__*/_react.default.createElement(_StyledOcticon.default, {
    icon: _octiconsReact.ChevronDownIcon,
    sx: {
      transform: isOpen ? 'rotate(180deg)' : 'rotate(0deg)'
    }
  }))), /*#__PURE__*/_react.default.createElement("div", {
    ref: subNavRef
  }, subNav)));
}

ItemWithSubNav.displayName = "ItemWithSubNav";

const SubNavContext = /*#__PURE__*/_react.default.createContext({
  depth: 0
}); // TODO: ref prop
// NOTE: SubNav must be a direct child of an Item


const SubNav = ({
  children,
  sx: sxProp = {}
}) => {
  const {
    buttonId,
    subNavId,
    isOpen
  } = _react.default.useContext(ItemWithSubNavContext);

  const {
    depth
  } = _react.default.useContext(SubNavContext);

  if (!buttonId || !subNavId) {
    // eslint-disable-next-line no-console
    console.error('NavList.SubNav must be a child of a NavList.Item');
  }

  if (depth > 0) {
    // eslint-disable-next-line no-console
    console.error('NavList.SubNav only supports one level of nesting');
    return null;
  }

  return /*#__PURE__*/_react.default.createElement(SubNavContext.Provider, {
    value: {
      depth: depth + 1
    }
  }, /*#__PURE__*/_react.default.createElement(_Box.default, {
    as: "ul",
    id: subNavId,
    "aria-labelledby": buttonId,
    sx: (0, _sx.merge)({
      padding: 0,
      margin: 0,
      display: isOpen ? 'block' : 'none'
    }, sxProp)
  }, children));
};

SubNav.displayName = "SubNav";
SubNav.displayName = 'NavList.SubNav'; // ----------------------------------------------------------------------------
// NavList.LeadingVisual

const LeadingVisual = _ActionList.ActionList.LeadingVisual;
LeadingVisual.displayName = 'NavList.LeadingVisual'; // ----------------------------------------------------------------------------
// NavList.TrailingVisual

const TrailingVisual = _ActionList.ActionList.TrailingVisual;
TrailingVisual.displayName = 'NavList.TrailingVisual'; // ----------------------------------------------------------------------------
// NavList.Divider

const Divider = _ActionList.ActionList.Divider;
Divider.displayName = 'NavList.Divider'; // ----------------------------------------------------------------------------
// NavList.Group

const defaultSx = {}; // TODO: ref prop

const Group = ({
  title,
  children,
  sx: sxProp = defaultSx,
  ...props
}) => {
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ActionList.ActionList.Divider, {
    sx: {
      '&:first-child': {
        display: 'none'
      }
    }
  }), /*#__PURE__*/_react.default.createElement(_ActionList.ActionList.Group, _extends({}, props, {
    title: title,
    sx: sxProp
  }), children));
};

Group.displayName = 'NavList.Group'; // ----------------------------------------------------------------------------
// Export

const NavList = Object.assign(Root, {
  Item,
  SubNav,
  LeadingVisual,
  TrailingVisual,
  Divider,
  Group
});
exports.NavList = NavList;