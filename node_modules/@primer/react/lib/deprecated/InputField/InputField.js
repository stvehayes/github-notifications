"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _ = require("../../");

var _InputValidation = _interopRequireDefault(require("../../_InputValidation"));

var _InputFieldCaption = _interopRequireDefault(require("./_InputFieldCaption"));

var _InputFieldLabel = _interopRequireDefault(require("./_InputFieldLabel"));

var _InputFieldValidation = _interopRequireDefault(require("./_InputFieldValidation"));

var _slots = require("./slots");

var _ValidationAnimationContainer = _interopRequireDefault(require("../../_ValidationAnimationContainer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @deprecated Use FormControl instead. See https://primer.style/react/FormControl for more details. */
const InputField = ({
  children,
  disabled,
  id: idProp,
  required,
  validationMap,
  validationResult
}) => {
  var _React$Children$map, _React$Children$map2;

  const expectedInputComponents = [_.TextInput, _.TextInputWithTokens, _.Autocomplete, _.Select];
  const id = (0, _.useSSRSafeId)(idProp);
  const validationChildren = (_React$Children$map = _react.default.Children.map(children, child => /*#__PURE__*/_react.default.isValidElement(child) && child.type === _InputFieldValidation.default ? child : null)) === null || _React$Children$map === void 0 ? void 0 : _React$Children$map.filter(Boolean);
  const captionChildren = (_React$Children$map2 = _react.default.Children.map(children, child => /*#__PURE__*/_react.default.isValidElement(child) && child.type === _InputFieldCaption.default ? child : null)) === null || _React$Children$map2 === void 0 ? void 0 : _React$Children$map2.filter(Boolean);

  const labelChild = _react.default.Children.toArray(children).find(child => /*#__PURE__*/_react.default.isValidElement(child) && child.type === _InputFieldLabel.default);

  const validationChildToRender = validationChildren === null || validationChildren === void 0 ? void 0 : validationChildren.find(child => child.props.validationKey === validationResult);
  const validationMessageId = validationChildToRender ? `${id}-validationMsg` : undefined;
  const captionId = captionChildren !== null && captionChildren !== void 0 && captionChildren.length ? `${id}-caption` : undefined;

  const InputComponent = _react.default.Children.toArray(children).find(child => expectedInputComponents.some(inputComponent => /*#__PURE__*/_react.default.isValidElement(child) && child.type === inputComponent));

  const inputProps = /*#__PURE__*/_react.default.isValidElement(InputComponent) ? InputComponent.props : undefined;

  if (!InputComponent) {
    // eslint-disable-next-line no-console
    console.warn(`To correctly render this field with the correct ARIA attributes passed to the input, please pass one of the component from @primer/react as a direct child of the InputField component:
      - TextInput
      - TextInputWithTokens
      - Autocomplete`);
  } else {
    if (inputProps !== null && inputProps !== void 0 && inputProps.id) {
      // eslint-disable-next-line no-console
      console.warn(`instead of passing the 'id' prop directly to the input component, it should be passed to the parent component, <InputField>`);
    }

    if (inputProps !== null && inputProps !== void 0 && inputProps.disabled) {
      // eslint-disable-next-line no-console
      console.warn(`instead of passing the 'disabled' prop directly to the input component, it should be passed to the parent component, <InputField>`);
    }

    if (inputProps !== null && inputProps !== void 0 && inputProps.required) {
      // eslint-disable-next-line no-console
      console.warn(`instead of passing the 'required' prop directly to the input component, it should be passed to the parent component, <InputField>`);
    }
  }

  if (!labelChild) {
    // eslint-disable-next-line no-console
    console.error(`The input field with the id ${id} MUST have a InputField.Label child.\n\nIf you want to hide the label, pass the 'visuallyHidden' prop to the InputField.Label component.`);
  }

  return /*#__PURE__*/_react.default.createElement(_slots.Slots, {
    context: {
      captionId,
      disabled,
      id,
      required,
      validationMessageId
    }
  }, slots => {
    const isLabelHidden = /*#__PURE__*/_react.default.isValidElement(slots.Label) && slots.Label.props.visuallyHidden;
    return /*#__PURE__*/_react.default.createElement(_.Box, {
      display: "flex",
      flexDirection: "column",
      width: "100%",
      sx: isLabelHidden ? {
        '> *:not(label) + *': {
          marginTop: 2
        }
      } : {
        '> * + *': {
          marginTop: 2
        }
      }
    }, _react.default.Children.toArray(children).filter(child => /*#__PURE__*/_react.default.isValidElement(child) && child.type !== _InputFieldValidation.default && !expectedInputComponents.some(inputComponent => child.type === inputComponent)), slots.Label, /*#__PURE__*/_react.default.isValidElement(InputComponent) && /*#__PURE__*/_react.default.cloneElement(InputComponent, {
      id,
      required,
      disabled,
      ['aria-describedby']: [validationMessageId, captionId].filter(Boolean).join(' ')
    }), validationChildToRender && validationMap && validationResult && validationMessageId && /*#__PURE__*/_react.default.createElement(_ValidationAnimationContainer.default, {
      show: true
    }, /*#__PURE__*/_react.default.createElement(_InputValidation.default, {
      validationStatus: validationMap[validationResult],
      id: validationMessageId
    }, validationChildToRender)), slots.Caption);
  });
};

InputField.displayName = "InputField";

var _default = Object.assign(InputField, {
  Caption: _InputFieldCaption.default,
  Label: _InputFieldLabel.default,
  Validation: _InputFieldValidation.default
});

exports.default = _default;