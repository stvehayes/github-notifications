{"ast":null,"code":"function t(t, n, r) {\n  return Math.min(Math.max(t, r), n);\n}\n\nclass n extends Error {\n  constructor(t) {\n    super(`Failed to parse color: \"${t}\"`);\n  }\n\n}\n\nfunction r(r) {\n  if (\"string\" != typeof r) throw new n(r);\n  if (\"transparent\" === r.trim().toLowerCase()) return [0, 0, 0, 0];\n  let e = r.trim();\n  e = u.test(r) ? function (t) {\n    const r = t.toLowerCase().trim(),\n          e = o[function (t) {\n      let n = 5381,\n          r = t.length;\n\n      for (; r;) n = 33 * n ^ t.charCodeAt(--r);\n\n      return (n >>> 0) % 2341;\n    }(r)];\n\n    if (!e) throw new n(t);\n    return `#${e}`;\n  }(r) : r;\n  const f = s.exec(e);\n\n  if (f) {\n    const t = Array.from(f).slice(1);\n    return [...t.slice(0, 3).map(t => parseInt(_(t, 2), 16)), parseInt(_(t[3] || \"f\", 2), 16) / 255];\n  }\n\n  const p = i.exec(e);\n\n  if (p) {\n    const t = Array.from(p).slice(1);\n    return [...t.slice(0, 3).map(t => parseInt(t, 16)), parseInt(t[3] || \"ff\", 16) / 255];\n  }\n\n  const z = a.exec(e);\n\n  if (z) {\n    const t = Array.from(z).slice(1);\n    return [...t.slice(0, 3).map(t => parseInt(t, 10)), parseFloat(t[3] || \"1\")];\n  }\n\n  const h = c.exec(e);\n\n  if (h) {\n    const [e, o, _, s] = Array.from(h).slice(1).map(parseFloat);\n    if (t(0, 100, o) !== o) throw new n(r);\n    if (t(0, 100, _) !== _) throw new n(r);\n    return [...l(e, o, _), s || 1];\n  }\n\n  throw new n(r);\n}\n\nconst e = t => parseInt(t.replace(/_/g, \"\"), 36),\n      o = \"1q29ehhb 1n09sgk7 1kl1ekf_ _yl4zsno 16z9eiv3 1p29lhp8 _bd9zg04 17u0____ _iw9zhe5 _to73___ _r45e31e _7l6g016 _jh8ouiv _zn3qba8 1jy4zshs 11u87k0u 1ro9yvyo 1aj3xael 1gz9zjz0 _3w8l4xo 1bf1ekf_ _ke3v___ _4rrkb__ 13j776yz _646mbhl _nrjr4__ _le6mbhl 1n37ehkb _m75f91n _qj3bzfz 1939yygw 11i5z6x8 _1k5f8xs 1509441m 15t5lwgf _ae2th1n _tg1ugcv 1lp1ugcv 16e14up_ _h55rw7n _ny9yavn _7a11xb_ 1ih442g9 _pv442g9 1mv16xof 14e6y7tu 1oo9zkds 17d1cisi _4v9y70f _y98m8kc 1019pq0v 12o9zda8 _348j4f4 1et50i2o _8epa8__ _ts6senj 1o350i2o 1mi9eiuo 1259yrp0 1ln80gnw _632xcoy 1cn9zldc _f29edu4 1n490c8q _9f9ziet 1b94vk74 _m49zkct 1kz6s73a 1eu9dtog _q58s1rz 1dy9sjiq __u89jo3 _aj5nkwg _ld89jo3 13h9z6wx _qa9z2ii _l119xgq _bs5arju 1hj4nwk9 1qt4nwk9 1ge6wau6 14j9zlcw 11p1edc_ _ms1zcxe _439shk6 _jt9y70f _754zsow 1la40eju _oq5p___ _x279qkz 1fa5r3rv _yd2d9ip _424tcku _8y1di2_ _zi2uabw _yy7rn9h 12yz980_ __39ljp6 1b59zg0x _n39zfzp 1fy9zest _b33k___ _hp9wq92 1il50hz4 _io472ub _lj9z3eo 19z9ykg0 _8t8iu3a 12b9bl4a 1ak5yw0o _896v4ku _tb8k8lv _s59zi6t _c09ze0p 1lg80oqn 1id9z8wb _238nba5 1kq6wgdi _154zssg _tn3zk49 _da9y6tc 1sg7cv4f _r12jvtt 1gq5fmkz 1cs9rvci _lp9jn1c _xw1tdnb 13f9zje6 16f6973h _vo7ir40 _bt5arjf _rc45e4t _hr4e100 10v4e100 _hc9zke2 _w91egv_ _sj2r1kk 13c87yx8 _vqpds__ _ni8ggk8 _tj9yqfb 1ia2j4r4 _7x9b10u 1fc9ld4j 1eq9zldr _5j9lhpx _ez9zl6o _md61fzm\".split(\" \").reduce((t, n) => {\n  const r = e(n.substring(0, 3)),\n        o = e(n.substring(3)).toString(16);\n  let _ = \"\";\n\n  for (let t = 0; t < 6 - o.length; t++) _ += \"0\";\n\n  return t[r] = `${_}${o}`, t;\n}, {}),\n      _ = (t, n) => Array.from(Array(n)).map(() => t).join(\"\"),\n      s = new RegExp(`^#${_(\"([a-f0-9])\", 3)}([a-f0-9])?$`, \"i\"),\n      i = new RegExp(`^#${_(\"([a-f0-9]{2})\", 3)}([a-f0-9]{2})?$`, \"i\"),\n      a = new RegExp(`^rgba?\\\\(\\\\s*(\\\\d+)\\\\s*${_(\",\\\\s*(\\\\d+)\\\\s*\", 2)}(?:,\\\\s*([\\\\d.]+))?\\\\s*\\\\)$`, \"i\"),\n      c = /^hsla?\\(\\s*([\\d.]+)\\s*,\\s*([\\d.]+)%\\s*,\\s*([\\d.]+)%(?:\\s*,\\s*([\\d.]+))?\\s*\\)$/i,\n      u = /^[a-z]+$/i,\n      f = t => Math.round(255 * t),\n      l = (t, n, r) => {\n  let e = r / 100;\n  if (0 === n) return [e, e, e].map(f);\n\n  const o = (t % 360 + 360) % 360 / 60,\n        _ = (1 - Math.abs(2 * e - 1)) * (n / 100),\n        s = _ * (1 - Math.abs(o % 2 - 1));\n\n  let i = 0,\n      a = 0,\n      c = 0;\n  o >= 0 && o < 1 ? (i = _, a = s) : o >= 1 && o < 2 ? (i = s, a = _) : o >= 2 && o < 3 ? (a = _, c = s) : o >= 3 && o < 4 ? (a = s, c = _) : o >= 4 && o < 5 ? (i = s, c = _) : o >= 5 && o < 6 && (i = _, c = s);\n  const u = e - _ / 2;\n  return [i + u, a + u, c + u].map(f);\n};\n\nfunction p(t) {\n  const [n, e, o, _] = r(t).map((t, n) => 3 === n ? t : t / 255),\n        s = Math.max(n, e, o),\n        i = Math.min(n, e, o),\n        a = (s + i) / 2;\n  if (s === i) return [0, 0, a, _];\n  const c = s - i;\n  return [60 * (n === s ? (e - o) / c + (e < o ? 6 : 0) : e === s ? (o - n) / c + 2 : (n - e) / c + 4), a > .5 ? c / (2 - s - i) : c / (s + i), a, _];\n}\n\nfunction z(n, r, e, o) {\n  return `hsla(${(n % 360).toFixed()}, ${t(0, 100, 100 * r).toFixed()}%, ${t(0, 100, 100 * e).toFixed()}%, ${parseFloat(t(0, 1, o).toFixed(3))})`;\n}\n\nfunction h(t, n) {\n  const [r, e, o, _] = p(t);\n  return z(r + n, e, o, _);\n}\n\nfunction d(t, n) {\n  const [r, e, o, _] = p(t);\n  return z(r, e, o - n, _);\n}\n\nfunction g(t, n) {\n  const [r, e, o, _] = p(t);\n  return z(r, e - n, o, _);\n}\n\nfunction w(t) {\n  if (\"transparent\" === t) return 0;\n\n  function n(t) {\n    const n = t / 255;\n    return n <= .03928 ? n / 12.92 : Math.pow((n + .055) / 1.055, 2.4);\n  }\n\n  const [e, o, _] = r(t);\n  return .2126 * n(e) + .7152 * n(o) + .0722 * n(_);\n}\n\nfunction x(t, n) {\n  const r = w(t),\n        e = w(n);\n  return r > e ? (r + .05) / (e + .05) : (e + .05) / (r + .05);\n}\n\nfunction m(n, r, e, o) {\n  return `rgba(${t(0, 255, n).toFixed()}, ${t(0, 255, r).toFixed()}, ${t(0, 255, e).toFixed()}, ${parseFloat(t(0, 1, o).toFixed(3))})`;\n}\n\nfunction y(t, n, e) {\n  const o = (t, n) => 3 === n ? t : t / 255,\n        [_, s, i, a] = r(t).map(o),\n        [c, u, f, l] = r(n).map(o),\n        p = l - a,\n        z = 2 * e - 1,\n        h = ((z * p == -1 ? z : z + p / (1 + z * p)) + 1) / 2,\n        d = 1 - h;\n\n  return m(255 * (_ * d + c * h), 255 * (s * d + u * h), 255 * (i * d + f * h), l * e + a * (1 - e));\n}\n\nfunction b() {\n  var n = [].slice.call(arguments);\n  return r => {\n    const e = n.length - 1,\n          o = t(0, e, Math.floor(r * e)),\n          _ = t(0, e, Math.ceil(r * e)),\n          s = 1 / e;\n\n    return y(n[o], n[_], (r - s * o) / s);\n  };\n}\n\nconst k = {\n  decorative: 1.5,\n  readable: 3,\n  aa: 4.5,\n  aaa: 7\n};\n\nfunction j(t) {\n  let n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"aa\";\n  return x(t, \"#fff\") < k[n];\n}\n\nfunction $(t, n) {\n  return d(t, -n);\n}\n\nfunction v(t, n) {\n  const [e, o, _, s] = r(t);\n  return m(e, o, _, s - n);\n}\n\nfunction q(t, n) {\n  return v(t, -n);\n}\n\nfunction F(t) {\n  return w(t) > .179;\n}\n\nfunction M(t) {\n  return F(t) ? \"#000\" : \"#fff\";\n}\n\nfunction A(t, n) {\n  return g(t, -n);\n}\n\nfunction I(n) {\n  const [e, o, _, s] = r(n);\n\n  let i = n => {\n    const r = t(0, 255, n).toString(16);\n    return 1 === r.length ? `0${r}` : r;\n  };\n\n  return `#${i(e)}${i(o)}${i(_)}${s < 1 ? i(Math.round(255 * s)) : \"\"}`;\n}\n\nfunction E(t) {\n  return m(...r(t));\n}\n\nfunction C(t) {\n  return z(...p(t));\n}\n\nexport { n as ColorError, h as adjustHue, d as darken, g as desaturate, x as getContrast, w as getLuminance, b as getScale, t as guard, j as hasBadContrast, z as hsla, $ as lighten, y as mix, q as opacify, p as parseToHsla, r as parseToRgba, M as readableColor, F as readableColorIsBlack, m as rgba, A as saturate, I as toHex, C as toHsla, E as toRgba, v as transparentize };","map":{"version":3,"mappings":"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","names":["guard","low","high","value","Math","min","max","ColorError","Error","constructor","color","super","parseToRgba","trim","toLowerCase","normalizedColor","namedColorRegex","test","normalizedColorName","result","compressedColorMap","str","hash","i","length","charCodeAt","nameToHex","reducedHexMatch","reducedHexRegex","exec","arr","Array","from","slice","map","x","parseInt","r","hexMatch","hexRegex","rgbaMatch","rgbaRegex","parseFloat","hslaMatch","hslaRegex","h","s","l","a","hslToRgb","colorToInt","replace","split","reduce","acc","next","key","substring","hex","toString","prefix","amount","join","RegExp","roundColor","round","hue","saturation","lightness","huePrime","chroma","abs","secondComponent","red","green","blue","lightnessModification","parseToHsla","alpha","index","delta","hsla","toFixed","adjustHue","degrees","darken","desaturate","getLuminance","f","channel","pow","g","b","getContrast","color1","color2","luminance1","luminance2","rgba","mix","weight","normalize","n","r1","g1","b1","a1","r2","g2","b2","a2","alphaDelta","normalizedWeight","weight2","weight1","getScale","colors","lastIndex","lowIndex","floor","highIndex","ceil","unit","guidelines","decorative","readable","aa","aaa","hasBadContrast","standard","lighten","transparentize","opacify","readableColorIsBlack","readableColor","saturate","toHex","toRgba","toHsla"],"sources":["/Users/steve/Documents/repos/github-notifications/node_modules/color2k/src/guard.ts","/Users/steve/Documents/repos/github-notifications/node_modules/color2k/src/ColorError.ts","/Users/steve/Documents/repos/github-notifications/node_modules/color2k/src/parseToRgba.ts","/Users/steve/Documents/repos/github-notifications/node_modules/color2k/src/parseToHsla.ts","/Users/steve/Documents/repos/github-notifications/node_modules/color2k/src/hsla.ts","/Users/steve/Documents/repos/github-notifications/node_modules/color2k/src/adjustHue.ts","/Users/steve/Documents/repos/github-notifications/node_modules/color2k/src/darken.ts","/Users/steve/Documents/repos/github-notifications/node_modules/color2k/src/desaturate.ts","/Users/steve/Documents/repos/github-notifications/node_modules/color2k/src/getLuminance.ts","/Users/steve/Documents/repos/github-notifications/node_modules/color2k/src/getContrast.ts","/Users/steve/Documents/repos/github-notifications/node_modules/color2k/src/rgba.ts","/Users/steve/Documents/repos/github-notifications/node_modules/color2k/src/mix.ts","/Users/steve/Documents/repos/github-notifications/node_modules/color2k/src/getScale.ts","/Users/steve/Documents/repos/github-notifications/node_modules/color2k/src/hasBadContrast.ts","/Users/steve/Documents/repos/github-notifications/node_modules/color2k/src/lighten.ts","/Users/steve/Documents/repos/github-notifications/node_modules/color2k/src/transparentize.ts","/Users/steve/Documents/repos/github-notifications/node_modules/color2k/src/opacify.ts","/Users/steve/Documents/repos/github-notifications/node_modules/color2k/src/readableColorIsBlack.ts","/Users/steve/Documents/repos/github-notifications/node_modules/color2k/src/readableColor.ts","/Users/steve/Documents/repos/github-notifications/node_modules/color2k/src/saturate.ts","/Users/steve/Documents/repos/github-notifications/node_modules/color2k/src/toHex.ts","/Users/steve/Documents/repos/github-notifications/node_modules/color2k/src/toRgba.ts","/Users/steve/Documents/repos/github-notifications/node_modules/color2k/src/toHsla.ts"],"sourcesContent":["/**\n * A simple guard function:\n *\n * ```js\n * Math.min(Math.max(low, value), high)\n * ```\n */\nfunction guard(low: number, high: number, value: number): number {\n  return Math.min(Math.max(low, value), high);\n}\n\nexport default guard;\n","class ColorError extends Error {\n  constructor(color: string) {\n    super(`Failed to parse color: \"${color}\"`);\n  }\n}\n\nexport default ColorError;\n","import guard from './guard';\nimport ColorError from './ColorError';\n\n/**\n * Parses a color into red, gree, blue, alpha parts\n *\n * @param color the input color. Can be a RGB, RBGA, HSL, HSLA, or named color\n */\nfunction parseToRgba(color: string): [number, number, number, number] {\n  if (typeof color !== 'string') throw new ColorError(color);\n  if (color.trim().toLowerCase() === 'transparent') return [0, 0, 0, 0];\n\n  let normalizedColor = color.trim();\n  normalizedColor = namedColorRegex.test(color) ? nameToHex(color) : color;\n\n  const reducedHexMatch = reducedHexRegex.exec(normalizedColor);\n  if (reducedHexMatch) {\n    const arr = Array.from(reducedHexMatch).slice(1);\n    return [\n      ...arr.slice(0, 3).map((x) => parseInt(r(x, 2), 16)),\n      parseInt(r(arr[3] || 'f', 2), 16) / 255,\n    ] as [number, number, number, number];\n  }\n\n  const hexMatch = hexRegex.exec(normalizedColor);\n  if (hexMatch) {\n    const arr = Array.from(hexMatch).slice(1);\n    return [\n      ...arr.slice(0, 3).map((x) => parseInt(x, 16)),\n      parseInt(arr[3] || 'ff', 16) / 255,\n    ] as [number, number, number, number];\n  }\n\n  const rgbaMatch = rgbaRegex.exec(normalizedColor);\n  if (rgbaMatch) {\n    const arr = Array.from(rgbaMatch).slice(1);\n    return [\n      ...arr.slice(0, 3).map((x) => parseInt(x, 10)),\n      parseFloat(arr[3] || '1'),\n    ] as [number, number, number, number];\n  }\n\n  const hslaMatch = hslaRegex.exec(normalizedColor);\n  if (hslaMatch) {\n    const [h, s, l, a] = Array.from(hslaMatch).slice(1).map(parseFloat);\n    if (guard(0, 100, s) !== s) throw new ColorError(color);\n    if (guard(0, 100, l) !== l) throw new ColorError(color);\n    return [...hslToRgb(h, s, l), a || 1] as [number, number, number, number];\n  }\n\n  throw new ColorError(color);\n}\n\nfunction hash(str: string) {\n  let hash = 5381;\n  let i = str.length;\n\n  while (i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n\n  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */\n  return (hash >>> 0) % 2341;\n}\n\nconst colorToInt = (x: string) => parseInt(x.replace(/_/g, ''), 36);\n\nconst compressedColorMap = '1q29ehhb 1n09sgk7 1kl1ekf_ _yl4zsno 16z9eiv3 1p29lhp8 _bd9zg04 17u0____ _iw9zhe5 _to73___ _r45e31e _7l6g016 _jh8ouiv _zn3qba8 1jy4zshs 11u87k0u 1ro9yvyo 1aj3xael 1gz9zjz0 _3w8l4xo 1bf1ekf_ _ke3v___ _4rrkb__ 13j776yz _646mbhl _nrjr4__ _le6mbhl 1n37ehkb _m75f91n _qj3bzfz 1939yygw 11i5z6x8 _1k5f8xs 1509441m 15t5lwgf _ae2th1n _tg1ugcv 1lp1ugcv 16e14up_ _h55rw7n _ny9yavn _7a11xb_ 1ih442g9 _pv442g9 1mv16xof 14e6y7tu 1oo9zkds 17d1cisi _4v9y70f _y98m8kc 1019pq0v 12o9zda8 _348j4f4 1et50i2o _8epa8__ _ts6senj 1o350i2o 1mi9eiuo 1259yrp0 1ln80gnw _632xcoy 1cn9zldc _f29edu4 1n490c8q _9f9ziet 1b94vk74 _m49zkct 1kz6s73a 1eu9dtog _q58s1rz 1dy9sjiq __u89jo3 _aj5nkwg _ld89jo3 13h9z6wx _qa9z2ii _l119xgq _bs5arju 1hj4nwk9 1qt4nwk9 1ge6wau6 14j9zlcw 11p1edc_ _ms1zcxe _439shk6 _jt9y70f _754zsow 1la40eju _oq5p___ _x279qkz 1fa5r3rv _yd2d9ip _424tcku _8y1di2_ _zi2uabw _yy7rn9h 12yz980_ __39ljp6 1b59zg0x _n39zfzp 1fy9zest _b33k___ _hp9wq92 1il50hz4 _io472ub _lj9z3eo 19z9ykg0 _8t8iu3a 12b9bl4a 1ak5yw0o _896v4ku _tb8k8lv _s59zi6t _c09ze0p 1lg80oqn 1id9z8wb _238nba5 1kq6wgdi _154zssg _tn3zk49 _da9y6tc 1sg7cv4f _r12jvtt 1gq5fmkz 1cs9rvci _lp9jn1c _xw1tdnb 13f9zje6 16f6973h _vo7ir40 _bt5arjf _rc45e4t _hr4e100 10v4e100 _hc9zke2 _w91egv_ _sj2r1kk 13c87yx8 _vqpds__ _ni8ggk8 _tj9yqfb 1ia2j4r4 _7x9b10u 1fc9ld4j 1eq9zldr _5j9lhpx _ez9zl6o _md61fzm'\n  .split(' ')\n  .reduce((acc, next) => {\n    const key = colorToInt(next.substring(0, 3));\n    const hex = colorToInt(next.substring(3)).toString(16);\n\n    // NOTE: padStart could be used here but it breaks Node 6 compat\n    // https://github.com/ricokahler/color2k/issues/351\n    let prefix = '';\n    for (let i = 0; i < 6 - hex.length; i++) {\n      prefix += '0';\n    }\n\n    acc[key] = `${prefix}${hex}`;\n    return acc;\n  }, {} as { [key: string]: string });\n\n/**\n * Checks if a string is a CSS named color and returns its equivalent hex value, otherwise returns the original color.\n */\nfunction nameToHex(color: string): string {\n  const normalizedColorName = color.toLowerCase().trim();\n  const result = compressedColorMap[hash(normalizedColorName)];\n  if (!result) throw new ColorError(color);\n  return `#${result}`;\n}\n\nconst r = (str: string, amount: number) =>\n  Array.from(Array(amount))\n    .map(() => str)\n    .join('');\n\nconst reducedHexRegex = new RegExp(`^#${r('([a-f0-9])', 3)}([a-f0-9])?$`, 'i');\nconst hexRegex = new RegExp(`^#${r('([a-f0-9]{2})', 3)}([a-f0-9]{2})?$`, 'i');\nconst rgbaRegex = new RegExp(\n  `^rgba?\\\\(\\\\s*(\\\\d+)\\\\s*${r(\n    ',\\\\s*(\\\\d+)\\\\s*',\n    2\n  )}(?:,\\\\s*([\\\\d.]+))?\\\\s*\\\\)$`,\n  'i'\n);\nconst hslaRegex = /^hsla?\\(\\s*([\\d.]+)\\s*,\\s*([\\d.]+)%\\s*,\\s*([\\d.]+)%(?:\\s*,\\s*([\\d.]+))?\\s*\\)$/i;\nconst namedColorRegex = /^[a-z]+$/i;\n\nconst roundColor = (color: number): number => {\n  return Math.round(color * 255);\n};\n\nconst hslToRgb = (\n  hue: number,\n  saturation: number,\n  lightness: number\n): [number, number, number] => {\n  let l = lightness / 100;\n  if (saturation === 0) {\n    // achromatic\n    return [l, l, l].map(roundColor) as [number, number, number];\n  }\n\n  // formulae from https://en.wikipedia.org/wiki/HSL_and_HSV\n  const huePrime = (((hue % 360) + 360) % 360) / 60;\n  const chroma = (1 - Math.abs(2 * l - 1)) * (saturation / 100);\n  const secondComponent = chroma * (1 - Math.abs((huePrime % 2) - 1));\n\n  let red = 0;\n  let green = 0;\n  let blue = 0;\n\n  if (huePrime >= 0 && huePrime < 1) {\n    red = chroma;\n    green = secondComponent;\n  } else if (huePrime >= 1 && huePrime < 2) {\n    red = secondComponent;\n    green = chroma;\n  } else if (huePrime >= 2 && huePrime < 3) {\n    green = chroma;\n    blue = secondComponent;\n  } else if (huePrime >= 3 && huePrime < 4) {\n    green = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 4 && huePrime < 5) {\n    red = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 5 && huePrime < 6) {\n    red = chroma;\n    blue = secondComponent;\n  }\n\n  const lightnessModification = l - chroma / 2;\n  const finalRed = red + lightnessModification;\n  const finalGreen = green + lightnessModification;\n  const finalBlue = blue + lightnessModification;\n\n  return [finalRed, finalGreen, finalBlue].map(roundColor) as [\n    number,\n    number,\n    number\n  ];\n};\n\nexport default parseToRgba;\n","// taken from:\n// https://github.com/styled-components/polished/blob/a23a6a2bb26802b3d922d9c3b67bac3f3a54a310/src/internalHelpers/_rgbToHsl.js\nimport parseToRgba from './parseToRgba';\n\n/**\n * Parses a color in hue, saturation, lightness, and the alpha channel.\n *\n * Hue is a number between 0 and 360, saturation, lightness, and alpha are\n * decimal percentages between 0 and 1\n */\nfunction parseToHsla(color: string): [number, number, number, number] {\n  const [red, green, blue, alpha] = parseToRgba(color).map((value, index) =>\n    // 3rd index is alpha channel which is already normalized\n    index === 3 ? value : value / 255\n  );\n\n  const max = Math.max(red, green, blue);\n  const min = Math.min(red, green, blue);\n  const lightness = (max + min) / 2;\n\n  // achromatic\n  if (max === min) return [0, 0, lightness, alpha];\n\n  const delta = max - min;\n  const saturation =\n    lightness > 0.5 ? delta / (2 - max - min) : delta / (max + min);\n\n  const hue =\n    60 *\n    (red === max\n      ? (green - blue) / delta + (green < blue ? 6 : 0)\n      : green === max\n      ? (blue - red) / delta + 2\n      : (red - green) / delta + 4);\n\n  return [hue, saturation, lightness, alpha];\n}\n\nexport default parseToHsla;\n","import guard from './guard';\n\n/**\n * Takes in hsla parts and constructs an hsla string\n *\n * @param hue The color circle (from 0 to 360) - 0 (or 360) is red, 120 is green, 240 is blue\n * @param saturation Percentage of saturation, given as a decimal between 0 and 1\n * @param lightness Percentage of lightness, given as a decimal between 0 and 1\n * @param alpha Percentage of opacity, given as a decimal between 0 and 1\n */\nfunction hsla(\n  hue: number,\n  saturation: number,\n  lightness: number,\n  alpha: number\n): string {\n  return `hsla(${(hue % 360).toFixed()}, ${guard(\n    0,\n    100,\n    saturation * 100\n  ).toFixed()}%, ${guard(0, 100, lightness * 100).toFixed()}%, ${parseFloat(\n    guard(0, 1, alpha).toFixed(3)\n  )})`;\n}\n\nexport default hsla;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Adjusts the current hue of the color by the given degrees. Wraps around when\n * over 360.\n *\n * @param color input color\n * @param degrees degrees to adjust the input color, accepts degree integers\n * (0 - 360) and wraps around on overflow\n */\nfunction adjustHue(color: string, degrees: number): string {\n  const [h, s, l, a] = parseToHsla(color);\n  return hsla(h + degrees, s, l, a);\n}\n\nexport default adjustHue;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Darkens using lightness. This is equivalent to subtracting the lightness\n * from the L in HSL.\n *\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction darken(color: string, amount: number): string {\n  const [hue, saturation, lightness, alpha] = parseToHsla(color);\n  return hsla(hue, saturation, lightness - amount, alpha);\n}\n\nexport default darken;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Desaturates the input color by the given amount via subtracting from the `s`\n * in `hsla`.\n *\n * @param amount The amount to desaturate, given as a decimal between 0 and 1\n */\nfunction desaturate(color: string, amount: number): string {\n  const [h, s, l, a] = parseToHsla(color);\n  return hsla(h, s - amount, l, a);\n}\n\nexport default desaturate;\n","import parseToRgba from './parseToRgba';\n// taken from:\n// https://github.com/styled-components/polished/blob/0764c982551b487469043acb56281b0358b3107b/src/color/getLuminance.js\n\n/**\n * Returns a number (float) representing the luminance of a color.\n */\nfunction getLuminance(color: string): number {\n  if (color === 'transparent') return 0;\n\n  function f(x: number) {\n    const channel = x / 255;\n    return channel <= 0.03928\n      ? channel / 12.92\n      : Math.pow(((channel + 0.055) / 1.055), 2.4);\n  }\n\n  const [r, g, b] = parseToRgba(color);\n  return 0.2126 * f(r) + 0.7152 * f(g) + 0.0722 * f(b);\n}\n\nexport default getLuminance;\n","// taken from:\n// https://github.com/styled-components/polished/blob/0764c982551b487469043acb56281b0358b3107b/src/color/getContrast.js\nimport getLuminance from './getLuminance';\n\n/**\n * Returns the contrast ratio between two colors based on\n * [W3's recommended equation for calculating contrast](http://www.w3.org/TR/WCAG20/#contrast-ratiodef).\n */\nfunction getContrast(color1: string, color2: string): number {\n  const luminance1 = getLuminance(color1);\n  const luminance2 = getLuminance(color2);\n\n  return luminance1 > luminance2\n    ? (luminance1 + 0.05) / (luminance2 + 0.05)\n    : (luminance2 + 0.05) / (luminance1 + 0.05);\n}\n\nexport default getContrast;\n","import guard from './guard';\n\n/**\n * Takes in rgba parts and returns an rgba string\n *\n * @param red The amount of red in the red channel, given in a number between 0 and 255 inclusive\n * @param green The amount of green in the red channel, given in a number between 0 and 255 inclusive\n * @param blue The amount of blue in the red channel, given in a number between 0 and 255 inclusive\n * @param alpha Percentage of opacity, given as a decimal between 0 and 1\n */\nfunction rgba(red: number, green: number, blue: number, alpha: number): string {\n  return `rgba(${guard(0, 255, red).toFixed()}, ${guard(\n    0,\n    255,\n    green\n  ).toFixed()}, ${guard(0, 255, blue).toFixed()}, ${parseFloat(\n    guard(0, 1, alpha).toFixed(3)\n  )})`;\n}\n\nexport default rgba;\n","import parseToRgba from './parseToRgba';\nimport rgba from './rgba';\n\n/**\n * Mixes two colors together. Taken from sass's implementation.\n */\nfunction mix(color1: string, color2: string, weight: number): string {\n  const normalize = (n: number, index: number) =>\n    // 3rd index is alpha channel which is already normalized\n    index === 3 ? n : n / 255;\n\n  const [r1, g1, b1, a1] = parseToRgba(color1).map(normalize);\n  const [r2, g2, b2, a2] = parseToRgba(color2).map(normalize);\n\n  // The formula is copied from the original Sass implementation:\n  // http://sass-lang.com/documentation/Sass/Script/Functions.html#mix-instance_method\n  const alphaDelta = a2 - a1;\n  const normalizedWeight = weight * 2 - 1;\n  const combinedWeight =\n    normalizedWeight * alphaDelta === -1\n      ? normalizedWeight\n      : normalizedWeight + alphaDelta / (1 + normalizedWeight * alphaDelta);\n  const weight2 = (combinedWeight + 1) / 2;\n  const weight1 = 1 - weight2;\n\n  const r = (r1 * weight1 + r2 * weight2) * 255;\n  const g = (g1 * weight1 + g2 * weight2) * 255;\n  const b = (b1 * weight1 + b2 * weight2) * 255;\n  const a = a2 * weight + a1 * (1 - weight);\n\n  return rgba(r, g, b, a);\n}\n\nexport default mix;\n","import mix from './mix';\nimport guard from './guard';\n\n/**\n * Given a series colors, this function will return a `scale(x)` function that\n * accepts a percentage as a decimal between 0 and 1 and returns the color at\n * that percentage in the scale.\n *\n * ```js\n * const scale = getScale('red', 'yellow', 'green');\n * console.log(scale(0)); // rgba(255, 0, 0, 1)\n * console.log(scale(0.5)); // rgba(255, 255, 0, 1)\n * console.log(scale(1)); // rgba(0, 128, 0, 1)\n * ```\n *\n * If you'd like to limit the domain and range like chroma-js, we recommend\n * wrapping scale again.\n *\n * ```js\n * const _scale = getScale('red', 'yellow', 'green');\n * const scale = x => _scale(x / 100);\n *\n * console.log(scale(0)); // rgba(255, 0, 0, 1)\n * console.log(scale(50)); // rgba(255, 255, 0, 1)\n * console.log(scale(100)); // rgba(0, 128, 0, 1)\n * ```\n */\nfunction getScale(...colors: string[]): (n: number) => string {\n  return (n) => {\n    const lastIndex = colors.length - 1;\n    const lowIndex = guard(0, lastIndex, Math.floor(n * lastIndex));\n    const highIndex = guard(0, lastIndex, Math.ceil(n * lastIndex));\n\n    const color1 = colors[lowIndex];\n    const color2 = colors[highIndex];\n\n    const unit = 1 / lastIndex;\n    const weight = (n - unit * lowIndex) / unit;\n\n    return mix(color1, color2, weight);\n  };\n}\n\nexport default getScale;\n","import getContrast from './getContrast';\n\nconst guidelines = {\n  decorative: 1.5,\n  readable: 3,\n  aa: 4.5,\n  aaa: 7,\n};\n\n/**\n * Returns whether or not a color has bad contrast against \n * a white background according to a given standard\n */\nfunction hasBadContrast(\n  color: string,\n  standard: 'decorative' | 'readable' | 'aa' | 'aaa' = 'aa'\n): boolean {\n  return getContrast(color, '#fff') < guidelines[standard];\n}\n\nexport default hasBadContrast;\n","import darken from './darken';\n/**\n * Lightens a color by a given amount. This is equivalent to\n * `darken(color, -amount)`\n *\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction lighten(color: string, amount: number): string {\n  return darken(color, -amount);\n}\n\nexport default lighten;\n","import parseToRgba from './parseToRgba';\nimport rgba from './rgba';\n\n/**\n * Takes in a color and makes it more transparent by convert to `rgba` and\n * decreasing the amount in the alpha channel.\n *\n * @param amount The amount to increase the transparency by, given as a decimal between 0 and 1\n */\nfunction transparentize(color: string, amount: number): string {\n  const [r, g, b, a] = parseToRgba(color);\n  return rgba(r, g, b, a - amount);\n}\n\nexport default transparentize;\n","import transparentize from './transparentize';\n\n/**\n * Takes a color and un-transparentizes it. Equivalent to\n * `transparentize(color, -amount)`\n *\n * @param amount The amount to increase the opacity by, given as a decimal between 0 and 1\n */\nfunction opacify(color: string, amount: number): string {\n  return transparentize(color, -amount);\n}\n\nexport default opacify;\n","import getLuminance from './getLuminance';\n\n/**\n * An alternative function to `readableColor`. Returns whether or not the \n * readable color (i.e. the color to be place on top the input color) should be\n * black.\n */\nfunction readableColorIsBlack(color: string): boolean {\n  return getLuminance(color) > 0.179;\n}\n\nexport default readableColorIsBlack;\n","import readableColorIsBlack from './readableColorIsBlack';\n\n/**\n * Returns black or white for best contrast depending on the luminosity of the\n * given color.\n */\nfunction readableColor(color: string): string {\n  return readableColorIsBlack(color) ? '#000' : '#fff';\n}\n\nexport default readableColor;\n","import desaturate from './desaturate';\n\n/**\n * Saturates a color by converting it to `hsl` and increasing the saturation\n * amount. Equivalent to `desaturate(color, -amount)`\n * \n * @param color Input color\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction saturate(color: string, amount: number): string {\n  return desaturate(color, -amount);\n}\n\nexport default saturate;\n","import parseToRgba from './parseToRgba';\nimport guard from './guard';\n\n/**\n * Takes in any color and returns it as a hex code.\n */\nfunction toHex(color: string): string {\n  const [r, g, b, a] = parseToRgba(color);\n\n  let hex = (x: number) => {\n    const h = guard(0, 255, x).toString(16);\n    // NOTE: padStart could be used here but it breaks Node 6 compat\n    // https://github.com/ricokahler/color2k/issues/351\n    return h.length === 1 ? `0${h}` : h;\n  };\n\n  return `#${hex(r)}${hex(g)}${hex(b)}${a < 1 ? hex(Math.round(a * 255)) : ''}`;\n}\n\nexport default toHex;\n","import parseToRgba from './parseToRgba';\nimport rgba from './rgba';\n\n/**\n * Takes in any color and returns it as an rgba string.\n */\nfunction toRgba(color: string): string {\n  return rgba(...parseToRgba(color));\n}\n\nexport default toRgba;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Takes in any color and returns it as an hsla string.\n */\nfunction toHsla(color: string): string {\n  return hsla(...parseToHsla(color));\n}\n\nexport default toHsla;\n"]},"metadata":{},"sourceType":"module"}