"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toolbarTypes = exports.withThemeProvider = void 0;

var _react = _interopRequireDefault(require("react"));

var _index = require("../index");

var _styledComponents = require("styled-components");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// set global theme styles for each story
const GlobalStyle = (0, _styledComponents.createGlobalStyle)(["body{background-color:", ";color:", ";}"], (0, _index.themeGet)('colors.canvas.default'), (0, _index.themeGet)('colors.fg.default')); // only remove padding for multi-theme view grid

const GlobalStyleMultiTheme = (0, _styledComponents.createGlobalStyle)(["body{padding:0 !important;}"]); // we don't import StoryContext from storybook because of exports that conflict
// with primer/react more: https://github.com/primer/react/runs/6129115026?check_suite_focus=true

const withThemeProvider = (Story, context) => {
  // used for testing ThemeProvider.stories.tsx
  if (context.parameters.disableThemeDecorator) return /*#__PURE__*/_react.default.createElement(Story, context);
  const {
    colorScheme
  } = context.globals;

  if (colorScheme === 'all') {
    return /*#__PURE__*/_react.default.createElement(_index.Box, {
      sx: {
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(0, 1fr))',
        height: '100vh'
      }
    }, /*#__PURE__*/_react.default.createElement(GlobalStyleMultiTheme, null), Object.keys(_index.theme.colorSchemes).map(scheme => /*#__PURE__*/_react.default.createElement(_index.ThemeProvider, {
      key: scheme,
      colorMode: "day",
      dayScheme: scheme
    }, /*#__PURE__*/_react.default.createElement(_index.BaseStyles, null, /*#__PURE__*/_react.default.createElement(_index.Box, {
      sx: {
        padding: '1rem',
        height: '100%',
        backgroundColor: 'canvas.default',
        color: 'fg.default'
      }
    }, /*#__PURE__*/_react.default.createElement("div", {
      id: `html-addon-root-${scheme}`
    }, /*#__PURE__*/_react.default.createElement(Story, context)))))));
  }

  return /*#__PURE__*/_react.default.createElement(_index.ThemeProvider, {
    colorMode: "day",
    dayScheme: colorScheme
  }, /*#__PURE__*/_react.default.createElement(GlobalStyle, null), /*#__PURE__*/_react.default.createElement(_index.BaseStyles, null, /*#__PURE__*/_react.default.createElement("div", {
    id: "html-addon-root"
  }, /*#__PURE__*/_react.default.createElement(Story, context))));
};

exports.withThemeProvider = withThemeProvider;
withThemeProvider.displayName = "withThemeProvider";
const toolbarTypes = {
  colorScheme: {
    name: 'Color scheme',
    description: 'Switch color scheme',
    defaultValue: 'light',
    toolbar: {
      icon: 'photo',
      items: [...Object.keys(_index.theme.colorSchemes), 'all'],
      showName: true
    }
  }
};
exports.toolbarTypes = toolbarTypes;