{"ast":null,"code":"export function buildPaginationModel(pageCount, currentPage, showPages, marginPageCount, surroundingPageCount) {\n  const pages = [];\n\n  if (showPages) {\n    const pageNums = [];\n\n    const addPage = n => {\n      if (n >= 1 && n <= pageCount) {\n        pageNums.push(n);\n      }\n    }; // Start by defining the window of pages to show around the current page.\n    // If the window goes off either edge, shift it until it fits.\n\n\n    let extentLeft = currentPage - surroundingPageCount;\n    let extentRight = currentPage + surroundingPageCount;\n\n    if (extentLeft < 1 && extentRight > pageCount) {\n      // Our window is larger than the entire range,\n      // so simply display every page.\n      extentLeft = 1;\n      extentRight = pageCount;\n    } else if (extentLeft < 1) {\n      while (extentLeft < 1) {\n        extentLeft++;\n        extentRight++;\n      }\n    } else if (extentRight > pageCount) {\n      while (extentRight > pageCount) {\n        extentLeft--;\n        extentRight--;\n      }\n    } // Next, include the pages in the margins.\n    // If a margin page is already covered in the window,\n    // extend the window to the other direction.\n\n\n    for (let i = 1; i <= marginPageCount; i++) {\n      const leftPage = i;\n      const rightPage = pageCount - (i - 1);\n\n      if (leftPage >= extentLeft) {\n        extentRight++;\n      } else {\n        addPage(leftPage);\n      }\n\n      if (rightPage <= extentRight) {\n        extentLeft--;\n      } else {\n        addPage(rightPage);\n      }\n    }\n\n    for (let i = extentLeft; i <= extentRight; i++) {\n      addPage(i);\n    }\n\n    const sorted = pageNums.slice().sort((a, b) => a - b).filter((item, idx, ary) => !idx || item !== ary[idx - 1]);\n\n    for (let idx = 0; idx < sorted.length; idx++) {\n      const num = sorted[idx];\n      const selected = num === currentPage;\n\n      if (idx === 0) {\n        if (num !== 1) {\n          // If the first page isn't page one,\n          // we need to add a break\n          pages.push({\n            type: 'BREAK',\n            num: 1\n          });\n        }\n\n        pages.push({\n          type: 'NUM',\n          num,\n          selected\n        });\n      } else {\n        const last = sorted[idx - 1];\n        const delta = num - last;\n\n        if (delta === 1) {\n          pages.push({\n            type: 'NUM',\n            num,\n            selected\n          });\n        } else {\n          // We skipped some, so add a break\n          pages.push({\n            type: 'BREAK',\n            num: num - 1\n          });\n          pages.push({\n            type: 'NUM',\n            num,\n            selected\n          });\n        }\n      }\n    }\n\n    const lastPage = pages[pages.length - 1];\n\n    if (lastPage.type === 'NUM' && lastPage.num !== pageCount) {\n      // The last page we rendered wasn't the actual last page,\n      // so we need an additional break\n      pages.push({\n        type: 'BREAK',\n        num: pageCount\n      });\n    }\n  }\n\n  const prev = {\n    type: 'PREV',\n    num: currentPage - 1,\n    disabled: currentPage === 1\n  };\n  const next = {\n    type: 'NEXT',\n    num: currentPage + 1,\n    disabled: currentPage === pageCount\n  };\n  return [prev, ...pages, next];\n}\nexport function buildComponentData(page, hrefBuilder, onClick) {\n  const props = {};\n  let content = '';\n  let key = '';\n\n  switch (page.type) {\n    case 'PREV':\n      {\n        key = 'page-prev';\n        content = 'Previous';\n\n        if (page.disabled) {\n          Object.assign(props, {\n            as: 'span',\n            'aria-disabled': 'true'\n          });\n        } else {\n          Object.assign(props, {\n            rel: 'prev',\n            href: hrefBuilder(page.num),\n            'aria-label': 'Previous Page',\n            onClick\n          });\n        }\n\n        break;\n      }\n\n    case 'NEXT':\n      {\n        key = 'page-next';\n        content = 'Next';\n\n        if (page.disabled) {\n          Object.assign(props, {\n            as: 'span',\n            'aria-disabled': 'true'\n          });\n        } else {\n          Object.assign(props, {\n            rel: 'next',\n            href: hrefBuilder(page.num),\n            'aria-label': 'Next Page',\n            onClick\n          });\n        }\n\n        break;\n      }\n\n    case 'NUM':\n      {\n        key = `page-${page.num}`;\n        content = String(page.num);\n\n        if (page.selected) {\n          Object.assign(props, {\n            as: 'em',\n            'aria-current': 'page'\n          });\n        } else {\n          Object.assign(props, {\n            href: hrefBuilder(page.num),\n            'aria-label': `Page ${page.num}`,\n            onClick\n          });\n        }\n\n        break;\n      }\n\n    case 'BREAK':\n      {\n        key = `page-${page.num}-break`;\n        content = 'â€¦';\n        Object.assign(props, {\n          as: 'span',\n          'aria-disabled': true\n        });\n      }\n  }\n\n  return {\n    props,\n    key,\n    content\n  };\n}","map":{"version":3,"sources":["/Users/steve/Documents/repos/github-notifications/node_modules/@primer/react/lib-esm/Pagination/model.js"],"names":["buildPaginationModel","pageCount","currentPage","showPages","marginPageCount","surroundingPageCount","pages","pageNums","addPage","n","push","extentLeft","extentRight","i","leftPage","rightPage","sorted","slice","sort","a","b","filter","item","idx","ary","length","num","selected","type","last","delta","lastPage","prev","disabled","next","buildComponentData","page","hrefBuilder","onClick","props","content","key","Object","assign","as","rel","href","String"],"mappings":"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","sourcesContent":["export function buildPaginationModel(pageCount, currentPage, showPages, marginPageCount, surroundingPageCount) {\n  const pages = [];\n\n  if (showPages) {\n    const pageNums = [];\n\n    const addPage = n => {\n      if (n >= 1 && n <= pageCount) {\n        pageNums.push(n);\n      }\n    }; // Start by defining the window of pages to show around the current page.\n    // If the window goes off either edge, shift it until it fits.\n\n\n    let extentLeft = currentPage - surroundingPageCount;\n    let extentRight = currentPage + surroundingPageCount;\n\n    if (extentLeft < 1 && extentRight > pageCount) {\n      // Our window is larger than the entire range,\n      // so simply display every page.\n      extentLeft = 1;\n      extentRight = pageCount;\n    } else if (extentLeft < 1) {\n      while (extentLeft < 1) {\n        extentLeft++;\n        extentRight++;\n      }\n    } else if (extentRight > pageCount) {\n      while (extentRight > pageCount) {\n        extentLeft--;\n        extentRight--;\n      }\n    } // Next, include the pages in the margins.\n    // If a margin page is already covered in the window,\n    // extend the window to the other direction.\n\n\n    for (let i = 1; i <= marginPageCount; i++) {\n      const leftPage = i;\n      const rightPage = pageCount - (i - 1);\n\n      if (leftPage >= extentLeft) {\n        extentRight++;\n      } else {\n        addPage(leftPage);\n      }\n\n      if (rightPage <= extentRight) {\n        extentLeft--;\n      } else {\n        addPage(rightPage);\n      }\n    }\n\n    for (let i = extentLeft; i <= extentRight; i++) {\n      addPage(i);\n    }\n\n    const sorted = pageNums.slice().sort((a, b) => a - b).filter((item, idx, ary) => !idx || item !== ary[idx - 1]);\n\n    for (let idx = 0; idx < sorted.length; idx++) {\n      const num = sorted[idx];\n      const selected = num === currentPage;\n\n      if (idx === 0) {\n        if (num !== 1) {\n          // If the first page isn't page one,\n          // we need to add a break\n          pages.push({\n            type: 'BREAK',\n            num: 1\n          });\n        }\n\n        pages.push({\n          type: 'NUM',\n          num,\n          selected\n        });\n      } else {\n        const last = sorted[idx - 1];\n        const delta = num - last;\n\n        if (delta === 1) {\n          pages.push({\n            type: 'NUM',\n            num,\n            selected\n          });\n        } else {\n          // We skipped some, so add a break\n          pages.push({\n            type: 'BREAK',\n            num: num - 1\n          });\n          pages.push({\n            type: 'NUM',\n            num,\n            selected\n          });\n        }\n      }\n    }\n\n    const lastPage = pages[pages.length - 1];\n\n    if (lastPage.type === 'NUM' && lastPage.num !== pageCount) {\n      // The last page we rendered wasn't the actual last page,\n      // so we need an additional break\n      pages.push({\n        type: 'BREAK',\n        num: pageCount\n      });\n    }\n  }\n\n  const prev = {\n    type: 'PREV',\n    num: currentPage - 1,\n    disabled: currentPage === 1\n  };\n  const next = {\n    type: 'NEXT',\n    num: currentPage + 1,\n    disabled: currentPage === pageCount\n  };\n  return [prev, ...pages, next];\n}\nexport function buildComponentData(page, hrefBuilder, onClick) {\n  const props = {};\n  let content = '';\n  let key = '';\n\n  switch (page.type) {\n    case 'PREV':\n      {\n        key = 'page-prev';\n        content = 'Previous';\n\n        if (page.disabled) {\n          Object.assign(props, {\n            as: 'span',\n            'aria-disabled': 'true'\n          });\n        } else {\n          Object.assign(props, {\n            rel: 'prev',\n            href: hrefBuilder(page.num),\n            'aria-label': 'Previous Page',\n            onClick\n          });\n        }\n\n        break;\n      }\n\n    case 'NEXT':\n      {\n        key = 'page-next';\n        content = 'Next';\n\n        if (page.disabled) {\n          Object.assign(props, {\n            as: 'span',\n            'aria-disabled': 'true'\n          });\n        } else {\n          Object.assign(props, {\n            rel: 'next',\n            href: hrefBuilder(page.num),\n            'aria-label': 'Next Page',\n            onClick\n          });\n        }\n\n        break;\n      }\n\n    case 'NUM':\n      {\n        key = `page-${page.num}`;\n        content = String(page.num);\n\n        if (page.selected) {\n          Object.assign(props, {\n            as: 'em',\n            'aria-current': 'page'\n          });\n        } else {\n          Object.assign(props, {\n            href: hrefBuilder(page.num),\n            'aria-label': `Page ${page.num}`,\n            onClick\n          });\n        }\n\n        break;\n      }\n\n    case 'BREAK':\n      {\n        key = `page-${page.num}-break`;\n        content = 'â€¦';\n        Object.assign(props, {\n          as: 'span',\n          'aria-disabled': true\n        });\n      }\n  }\n\n  return {\n    props,\n    key,\n    content\n  };\n}"]},"metadata":{},"sourceType":"module"}