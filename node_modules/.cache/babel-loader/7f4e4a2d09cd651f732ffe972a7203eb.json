{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useCallback, useContext } from 'react';\nimport { useAnchoredPosition } from '../hooks';\nimport Overlay from '../Overlay';\nimport { AutocompleteContext } from './AutocompleteContext';\nimport { useCombinedRefs } from '../hooks/useCombinedRefs'; // TODO: consider making 'aria-labelledby' required\n\nfunction AutocompleteOverlay(_ref) {\n  let {\n    menuAnchorRef,\n    overlayProps: oldOverlayProps,\n    children,\n    ...newOverlayProps\n  } = _ref;\n  const autocompleteContext = useContext(AutocompleteContext);\n\n  if (autocompleteContext === null) {\n    throw new Error('AutocompleteContext returned null values');\n  }\n\n  const overlayProps = { ...oldOverlayProps,\n    ...newOverlayProps\n  };\n  const {\n    inputRef,\n    scrollContainerRef,\n    selectedItemLength,\n    setShowMenu,\n    showMenu = false\n  } = autocompleteContext;\n  const {\n    floatingElementRef,\n    position\n  } = useAnchoredPosition({\n    side: 'outside-bottom',\n    align: 'start',\n    anchorElementRef: menuAnchorRef ? menuAnchorRef : inputRef\n  }, [showMenu, selectedItemLength]);\n  const combinedOverlayRef = useCombinedRefs(scrollContainerRef, floatingElementRef);\n  const closeOptionList = useCallback(() => {\n    setShowMenu(false);\n  }, [setShowMenu]);\n\n  if (typeof window === 'undefined') {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Overlay, _extends({\n    returnFocusRef: inputRef,\n    preventFocusOnOpen: true,\n    onClickOutside: closeOptionList,\n    onEscape: closeOptionList,\n    ref: combinedOverlayRef,\n    top: position === null || position === void 0 ? void 0 : position.top,\n    left: position === null || position === void 0 ? void 0 : position.left,\n    visibility: showMenu ? 'visible' : 'hidden',\n    sx: {\n      overflow: 'auto'\n    }\n  }, overlayProps), children);\n}\n\nAutocompleteOverlay.displayName = \"AutocompleteOverlay\";\nAutocompleteOverlay.displayName = 'AutocompleteOverlay';\nexport default AutocompleteOverlay;","map":{"version":3,"sources":["/Users/steve/Documents/repos/github-notifications/node_modules/@primer/react/lib-esm/Autocomplete/AutocompleteOverlay.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","React","useCallback","useContext","useAnchoredPosition","Overlay","AutocompleteContext","useCombinedRefs","AutocompleteOverlay","menuAnchorRef","overlayProps","oldOverlayProps","children","newOverlayProps","autocompleteContext","Error","inputRef","scrollContainerRef","selectedItemLength","setShowMenu","showMenu","floatingElementRef","position","side","align","anchorElementRef","combinedOverlayRef","closeOptionList","window","createElement","returnFocusRef","preventFocusOnOpen","onClickOutside","onEscape","ref","top","left","visibility","sx","overflow","displayName"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useCallback, useContext } from 'react';\nimport { useAnchoredPosition } from '../hooks';\nimport Overlay from '../Overlay';\nimport { AutocompleteContext } from './AutocompleteContext';\nimport { useCombinedRefs } from '../hooks/useCombinedRefs';\n\n// TODO: consider making 'aria-labelledby' required\nfunction AutocompleteOverlay({\n  menuAnchorRef,\n  overlayProps: oldOverlayProps,\n  children,\n  ...newOverlayProps\n}) {\n  const autocompleteContext = useContext(AutocompleteContext);\n\n  if (autocompleteContext === null) {\n    throw new Error('AutocompleteContext returned null values');\n  }\n\n  const overlayProps = { ...oldOverlayProps,\n    ...newOverlayProps\n  };\n  const {\n    inputRef,\n    scrollContainerRef,\n    selectedItemLength,\n    setShowMenu,\n    showMenu = false\n  } = autocompleteContext;\n  const {\n    floatingElementRef,\n    position\n  } = useAnchoredPosition({\n    side: 'outside-bottom',\n    align: 'start',\n    anchorElementRef: menuAnchorRef ? menuAnchorRef : inputRef\n  }, [showMenu, selectedItemLength]);\n  const combinedOverlayRef = useCombinedRefs(scrollContainerRef, floatingElementRef);\n  const closeOptionList = useCallback(() => {\n    setShowMenu(false);\n  }, [setShowMenu]);\n\n  if (typeof window === 'undefined') {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Overlay, _extends({\n    returnFocusRef: inputRef,\n    preventFocusOnOpen: true,\n    onClickOutside: closeOptionList,\n    onEscape: closeOptionList,\n    ref: combinedOverlayRef,\n    top: position === null || position === void 0 ? void 0 : position.top,\n    left: position === null || position === void 0 ? void 0 : position.left,\n    visibility: showMenu ? 'visible' : 'hidden',\n    sx: {\n      overflow: 'auto'\n    }\n  }, overlayProps), children);\n}\n\nAutocompleteOverlay.displayName = \"AutocompleteOverlay\";\nAutocompleteOverlay.displayName = 'AutocompleteOverlay';\nexport default AutocompleteOverlay;"]},"metadata":{},"sourceType":"module"}