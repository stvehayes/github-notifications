{"ast":null,"code":"import React from 'react';\nimport { getAnchoredPosition } from '@primer/behaviors';\nimport { useProvidedRefOrCreate } from './useProvidedRefOrCreate';\nimport { useResizeObserver } from './useResizeObserver';\nimport useLayoutEffect from '../utils/useIsomorphicLayoutEffect';\n/**\n * Calculates the top and left values for an absolutely-positioned floating element\n * to be anchored to some anchor element. Returns refs for the floating element\n * and the anchor element, along with the position.\n * @param settings Settings for calculating the anchored position.\n * @param dependencies Dependencies to determine when to re-calculate the position.\n * @returns An object of {top: number, left: number} to absolutely-position the\n * floating element.\n */\n\nexport function useAnchoredPosition(settings) {\n  let dependencies = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const floatingElementRef = useProvidedRefOrCreate(settings === null || settings === void 0 ? void 0 : settings.floatingElementRef);\n  const anchorElementRef = useProvidedRefOrCreate(settings === null || settings === void 0 ? void 0 : settings.anchorElementRef);\n  const [position, setPosition] = React.useState(undefined);\n  const updatePosition = React.useCallback(() => {\n    if (floatingElementRef.current instanceof Element && anchorElementRef.current instanceof Element) {\n      setPosition(getAnchoredPosition(floatingElementRef.current, anchorElementRef.current, settings));\n    } else {\n      setPosition(undefined);\n    }\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [floatingElementRef, anchorElementRef, ...dependencies]);\n  useLayoutEffect(updatePosition, [updatePosition]);\n  useResizeObserver(updatePosition);\n  return {\n    floatingElementRef,\n    anchorElementRef,\n    position\n  };\n}","map":{"version":3,"sources":["/Users/steve/Documents/repos/notifications/node_modules/@primer/react/lib-esm/hooks/useAnchoredPosition.js"],"names":["React","getAnchoredPosition","useProvidedRefOrCreate","useResizeObserver","useLayoutEffect","useAnchoredPosition","settings","dependencies","floatingElementRef","anchorElementRef","position","setPosition","useState","undefined","updatePosition","useCallback","current","Element"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,mBAAT,QAAoC,mBAApC;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,mBAAT,CAA6BC,QAA7B,EAA0D;AAAA,MAAnBC,YAAmB,uEAAJ,EAAI;AAC/D,QAAMC,kBAAkB,GAAGN,sBAAsB,CAACI,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACE,kBAA9D,CAAjD;AACA,QAAMC,gBAAgB,GAAGP,sBAAsB,CAACI,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACG,gBAA9D,CAA/C;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BX,KAAK,CAACY,QAAN,CAAeC,SAAf,CAAhC;AACA,QAAMC,cAAc,GAAGd,KAAK,CAACe,WAAN,CAAkB,MAAM;AAC7C,QAAIP,kBAAkB,CAACQ,OAAnB,YAAsCC,OAAtC,IAAiDR,gBAAgB,CAACO,OAAjB,YAAoCC,OAAzF,EAAkG;AAChGN,MAAAA,WAAW,CAACV,mBAAmB,CAACO,kBAAkB,CAACQ,OAApB,EAA6BP,gBAAgB,CAACO,OAA9C,EAAuDV,QAAvD,CAApB,CAAX;AACD,KAFD,MAEO;AACLK,MAAAA,WAAW,CAACE,SAAD,CAAX;AACD;AACF,GANsB,EAMpB;AACH,GAACL,kBAAD,EAAqBC,gBAArB,EAAuC,GAAGF,YAA1C,CAPuB,CAAvB;AAQAH,EAAAA,eAAe,CAACU,cAAD,EAAiB,CAACA,cAAD,CAAjB,CAAf;AACAX,EAAAA,iBAAiB,CAACW,cAAD,CAAjB;AACA,SAAO;AACLN,IAAAA,kBADK;AAELC,IAAAA,gBAFK;AAGLC,IAAAA;AAHK,GAAP;AAKD","sourcesContent":["import React from 'react';\nimport { getAnchoredPosition } from '@primer/behaviors';\nimport { useProvidedRefOrCreate } from './useProvidedRefOrCreate';\nimport { useResizeObserver } from './useResizeObserver';\nimport useLayoutEffect from '../utils/useIsomorphicLayoutEffect';\n\n/**\n * Calculates the top and left values for an absolutely-positioned floating element\n * to be anchored to some anchor element. Returns refs for the floating element\n * and the anchor element, along with the position.\n * @param settings Settings for calculating the anchored position.\n * @param dependencies Dependencies to determine when to re-calculate the position.\n * @returns An object of {top: number, left: number} to absolutely-position the\n * floating element.\n */\nexport function useAnchoredPosition(settings, dependencies = []) {\n  const floatingElementRef = useProvidedRefOrCreate(settings === null || settings === void 0 ? void 0 : settings.floatingElementRef);\n  const anchorElementRef = useProvidedRefOrCreate(settings === null || settings === void 0 ? void 0 : settings.anchorElementRef);\n  const [position, setPosition] = React.useState(undefined);\n  const updatePosition = React.useCallback(() => {\n    if (floatingElementRef.current instanceof Element && anchorElementRef.current instanceof Element) {\n      setPosition(getAnchoredPosition(floatingElementRef.current, anchorElementRef.current, settings));\n    } else {\n      setPosition(undefined);\n    }\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [floatingElementRef, anchorElementRef, ...dependencies]);\n  useLayoutEffect(updatePosition, [updatePosition]);\n  useResizeObserver(updatePosition);\n  return {\n    floatingElementRef,\n    anchorElementRef,\n    position\n  };\n}"]},"metadata":{},"sourceType":"module"}