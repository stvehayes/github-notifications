"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Slot = void 0;

var _react = _interopRequireDefault(require("react"));

var _ = require("../..");

var _createSlots = _interopRequireDefault(require("../../utils/create-slots"));

var _ValidationAnimationContainer = _interopRequireDefault(require("../../_ValidationAnimationContainer"));

var _InputValidation = _interopRequireDefault(require("../../_InputValidation"));

var _ChoiceFieldsetListItem = _interopRequireDefault(require("./ChoiceFieldsetListItem"));

var _ChoiceFieldsetDescription = _interopRequireDefault(require("./ChoiceFieldsetDescription"));

var _ChoiceFieldsetLegend = _interopRequireDefault(require("./ChoiceFieldsetLegend"));

var _ChoiceFieldsetList = _interopRequireDefault(require("./ChoiceFieldsetList"));

var _ChoiceFieldsetValidation = _interopRequireDefault(require("./ChoiceFieldsetValidation"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const {
  Slots,
  Slot
} = (0, _createSlots.default)(['Description', 'ChoiceList', 'Legend', 'Validation']);
exports.Slot = Slot;

const ChoiceFieldset = ({
  children,
  disabled,
  id,
  name,
  onSelect,
  required,
  selected,
  validationMap,
  validationResult
}) => {
  var _React$Children$map;

  const fieldsetId = (0, _.useSSRSafeId)(id);
  const validationChildren = (_React$Children$map = _react.default.Children.map(children, child => /*#__PURE__*/_react.default.isValidElement(child) && child.type === _ChoiceFieldsetValidation.default ? child : null)) === null || _React$Children$map === void 0 ? void 0 : _React$Children$map.filter(Boolean);
  const validationChildToRender = validationChildren === null || validationChildren === void 0 ? void 0 : validationChildren.find(child => child.props.validationKey === validationResult);
  const validationMessageId = validationChildToRender ? `${fieldsetId}-validationMsg` : undefined;
  return /*#__PURE__*/_react.default.createElement(Slots, {
    context: {
      disabled,
      name,
      onSelect,
      required,
      selected,
      validationMessageId
    }
  }, slots => {
    const isLegendVisible = /*#__PURE__*/_react.default.isValidElement(slots.Legend) && slots.Legend.props.isVisible;
    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_.Box, {
      as: "fieldset",
      border: "none",
      margin: 0,
      padding: 0,
      "aria-describedby": [validationMessageId].filter(Boolean).join(' ')
    }, _react.default.Children.toArray(children).filter(child => /*#__PURE__*/_react.default.isValidElement(child) && child.type !== _ChoiceFieldsetValidation.default), /*#__PURE__*/_react.default.createElement(_.Box, {
      mb: isLegendVisible ? 3 : undefined
    }, slots.Legend, slots.Description), slots.ChoiceList), validationChildToRender && /*#__PURE__*/_react.default.createElement(_.Box, {
      mt: 3
    }, validationMap && validationResult && validationMessageId && /*#__PURE__*/_react.default.createElement(_ValidationAnimationContainer.default, {
      show: true
    }, /*#__PURE__*/_react.default.createElement(_InputValidation.default, {
      validationStatus: validationMap[validationResult],
      id: validationMessageId
    }, validationChildToRender))));
  });
};

ChoiceFieldset.displayName = "ChoiceFieldset";

/**
 * @deprecated Use `CheckboxGroup` or `RadioGroup` instead. See https://primer.style/react/CheckboxGroup and https://primer.style/react/RadioGroup for more info
 */
var _default = Object.assign(ChoiceFieldset, {
  Description: _ChoiceFieldsetDescription.default,
  Item: _ChoiceFieldsetListItem.default,
  Legend: _ChoiceFieldsetLegend.default,
  List: _ChoiceFieldsetList.default,
  Validation: _ChoiceFieldsetValidation.default
});

exports.default = _default;