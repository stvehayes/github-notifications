"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _ = require("..");

var _ValidationAnimationContainer = _interopRequireDefault(require("../_ValidationAnimationContainer"));

var _CheckboxOrRadioGroupCaption = _interopRequireDefault(require("./_CheckboxOrRadioGroupCaption"));

var _CheckboxOrRadioGroupLabel = _interopRequireDefault(require("./_CheckboxOrRadioGroupLabel"));

var _CheckboxOrRadioGroupValidation = _interopRequireDefault(require("./_CheckboxOrRadioGroupValidation"));

var _slots = require("./slots");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _constants = require("../constants");

var _CheckboxOrRadioGroupContext = _interopRequireDefault(require("./_CheckboxOrRadioGroupContext"));

var _VisuallyHidden = _interopRequireDefault(require("../_VisuallyHidden"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const Body = _styledComponents.default.div.withConfig({
  displayName: "CheckboxOrRadioGroup__Body",
  componentId: "sc-1qo75yk-0"
})(["display:flex;flex-direction:column;list-style:none;margin:0;padding:0;> * + *{margin-top:", ";}"], (0, _constants.get)('space.2'));

const CheckboxOrRadioGroup = ({
  'aria-labelledby': ariaLabelledby,
  children,
  disabled,
  id: idProp,
  required,
  sx
}) => {
  const labelChild = _react.default.Children.toArray(children).find(child => /*#__PURE__*/_react.default.isValidElement(child) && child.type === _CheckboxOrRadioGroupLabel.default);

  const validationChild = _react.default.Children.toArray(children).find(child => /*#__PURE__*/_react.default.isValidElement(child) && child.type === _CheckboxOrRadioGroupValidation.default ? child : null);

  const captionChild = _react.default.Children.toArray(children).find(child => /*#__PURE__*/_react.default.isValidElement(child) && child.type === _CheckboxOrRadioGroupCaption.default ? child : null);

  const id = (0, _.useSSRSafeId)(idProp);
  const validationMessageId = validationChild && `${id}-validationMessage`;
  const captionId = captionChild && `${id}-caption`;

  if (!labelChild && !ariaLabelledby) {
    // eslint-disable-next-line no-console
    console.warn('A choice group must be labelled using a `CheckboxOrRadioGroup.Label` child, or by passing `aria-labelledby` to the CheckboxOrRadioGroup component.');
  }

  return /*#__PURE__*/_react.default.createElement(_slots.Slots, {
    context: {
      disabled,
      required,
      captionId,
      validationMessageId
    }
  }, slots => {
    const isLegendVisible = /*#__PURE__*/_react.default.isValidElement(labelChild) && !labelChild.props.visuallyHidden;
    return /*#__PURE__*/_react.default.createElement(_CheckboxOrRadioGroupContext.default.Provider, {
      value: {
        disabled
      }
    }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_.Box, _extends({
      border: "none",
      margin: 0,
      mb: validationChild ? 2 : undefined,
      padding: 0
    }, labelChild && {
      as: 'fieldset',
      disabled
    }, {
      sx: sx
    }), labelChild ?
    /*#__PURE__*/

    /*
      Placing the caption text and validation text in the <legend> provides a better user
      experience for more screenreaders.
       Reference: https://blog.tenon.io/accessible-validation-of-checkbox-and-radiobutton-groups/
    */
    _react.default.createElement(_.Box, {
      as: "legend",
      mb: isLegendVisible ? 2 : undefined,
      padding: 0
    }, slots.Label, slots.Caption, /*#__PURE__*/_react.default.isValidElement(slots.Validation) && slots.Validation.props.children && /*#__PURE__*/_react.default.createElement(_VisuallyHidden.default, null, slots.Validation.props.children)) :
    /*
      If CheckboxOrRadioGroup.Label wasn't passed as a child, we don't render a <legend> 
      but we still want to render a caption
    */
    slots.Caption, /*#__PURE__*/_react.default.createElement(Body, !labelChild && {
      ['aria-labelledby']: ariaLabelledby,
      ['aria-describedby']: [validationMessageId, captionId].filter(Boolean).join(' '),
      as: 'div',
      role: 'group'
    }, _react.default.Children.toArray(children).filter(child => /*#__PURE__*/_react.default.isValidElement(child)))), validationChild && /*#__PURE__*/_react.default.createElement(_ValidationAnimationContainer.default // If we have CheckboxOrRadioGroup.Label as a child, we render a screenreader-accessible validation message in the <legend>
    , {
      "aria-hidden": Boolean(labelChild),
      show: true
    }, slots.Validation)));
  });
};

CheckboxOrRadioGroup.displayName = "CheckboxOrRadioGroup";
CheckboxOrRadioGroup.defaultProps = {
  disabled: false,
  required: false
};

var _default = Object.assign(CheckboxOrRadioGroup, {
  Caption: _CheckboxOrRadioGroupCaption.default,
  Label: _CheckboxOrRadioGroupLabel.default,
  Validation: _CheckboxOrRadioGroupValidation.default
});

exports.default = _default;