{"ast":null,"code":"import React from 'react';\nimport { iterateFocusableElements } from '@primer/behaviors/utils';\nimport { useProvidedRefOrCreate } from './useProvidedRefOrCreate';\n/*\n * A mnemonic indicates to the user which key to press (single)\n * to activate a command or navigate to a component\n * typically appearing in a menu title, menu item, or the text of a button.\n */\n\nexport const useMnemonics = (open, providedRef) => {\n  const containerRef = useProvidedRefOrCreate(providedRef);\n  React.useEffect(function addAriaKeyshortcuts() {\n    if (!open || !containerRef.current) return;\n    const container = containerRef.current;\n    const focusableItems = [...iterateFocusableElements(container)];\n    focusableItems.map(item => {\n      var _item$textContent; // if item already has aria-keyshortcuts defined by user, skip\n\n\n      if (item.getAttribute('aria-keyshortcuts')) return;\n      const firstLetter = (_item$textContent = item.textContent) === null || _item$textContent === void 0 ? void 0 : _item$textContent.toLowerCase()[0];\n      if (firstLetter) item.setAttribute('aria-keyshortcuts', firstLetter);\n    });\n  }, [open, containerRef]);\n  React.useEffect(function handleKeyDown() {\n    if (!open || !containerRef.current) return;\n    const container = containerRef.current;\n\n    const handler = event => {\n      var _elementToFocus; // skip if a TextInput has focus\n\n\n      const activeElement = document.activeElement;\n      if (activeElement.tagName === 'INPUT') return; // skip if used with modifier to preserve shortcuts like âŒ˜ + F\n\n      const hasModifier = event.ctrlKey || event.altKey || event.metaKey;\n      if (hasModifier) return; // skip if it's not a alphabet key\n\n      if (!isAlphabetKey(event)) return; // if this is a typeahead event, don't propagate outside of menu\n\n      event.stopPropagation();\n      const query = event.key.toLowerCase();\n      let elementToFocus;\n      const focusableItems = [...iterateFocusableElements(container)];\n      const itemsMatchingKey = focusableItems.filter(item => {\n        var _item$getAttribute;\n\n        const keyshortcuts = (_item$getAttribute = item.getAttribute('aria-keyshortcuts')) === null || _item$getAttribute === void 0 ? void 0 : _item$getAttribute.split(' ').map(shortcut => shortcut.toLowerCase());\n        return keyshortcuts && keyshortcuts.includes(query);\n      });\n      const currentActiveIndex = itemsMatchingKey.indexOf(activeElement); // If the last element is already selected, cycle through the list\n\n      if (currentActiveIndex === itemsMatchingKey.length - 1) {\n        elementToFocus = itemsMatchingKey[0];\n      } else {\n        elementToFocus = itemsMatchingKey.find((item, index) => {\n          return index > currentActiveIndex;\n        });\n      }\n\n      (_elementToFocus = elementToFocus) === null || _elementToFocus === void 0 ? void 0 : _elementToFocus.focus();\n    };\n\n    container.addEventListener('keydown', handler);\n    return () => container.removeEventListener('keydown', handler);\n  }, [open, containerRef]);\n\n  const isAlphabetKey = event => {\n    return event.key.length === 1 && /[a-z\\d]/i.test(event.key);\n  };\n\n  return {\n    containerRef\n  };\n};","map":{"version":3,"sources":["/Users/steve/Documents/repos/github-notifications/node_modules/@primer/react/lib-esm/hooks/useMnemonics.js"],"names":["React","iterateFocusableElements","useProvidedRefOrCreate","useMnemonics","open","providedRef","containerRef","useEffect","addAriaKeyshortcuts","current","container","focusableItems","map","item","_item$textContent","getAttribute","firstLetter","textContent","toLowerCase","setAttribute","handleKeyDown","handler","event","_elementToFocus","activeElement","document","tagName","hasModifier","ctrlKey","altKey","metaKey","isAlphabetKey","stopPropagation","query","key","elementToFocus","itemsMatchingKey","filter","_item$getAttribute","keyshortcuts","split","shortcut","includes","currentActiveIndex","indexOf","length","find","index","focus","addEventListener","removeEventListener","test"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { iterateFocusableElements } from '@primer/behaviors/utils';\nimport { useProvidedRefOrCreate } from './useProvidedRefOrCreate';\n/*\n * A mnemonic indicates to the user which key to press (single)\n * to activate a command or navigate to a component\n * typically appearing in a menu title, menu item, or the text of a button.\n */\n\nexport const useMnemonics = (open, providedRef) => {\n  const containerRef = useProvidedRefOrCreate(providedRef);\n  React.useEffect(function addAriaKeyshortcuts() {\n    if (!open || !containerRef.current) return;\n    const container = containerRef.current;\n    const focusableItems = [...iterateFocusableElements(container)];\n    focusableItems.map(item => {\n      var _item$textContent;\n\n      // if item already has aria-keyshortcuts defined by user, skip\n      if (item.getAttribute('aria-keyshortcuts')) return;\n      const firstLetter = (_item$textContent = item.textContent) === null || _item$textContent === void 0 ? void 0 : _item$textContent.toLowerCase()[0];\n      if (firstLetter) item.setAttribute('aria-keyshortcuts', firstLetter);\n    });\n  }, [open, containerRef]);\n  React.useEffect(function handleKeyDown() {\n    if (!open || !containerRef.current) return;\n    const container = containerRef.current;\n\n    const handler = event => {\n      var _elementToFocus;\n\n      // skip if a TextInput has focus\n      const activeElement = document.activeElement;\n      if (activeElement.tagName === 'INPUT') return; // skip if used with modifier to preserve shortcuts like âŒ˜ + F\n\n      const hasModifier = event.ctrlKey || event.altKey || event.metaKey;\n      if (hasModifier) return; // skip if it's not a alphabet key\n\n      if (!isAlphabetKey(event)) return; // if this is a typeahead event, don't propagate outside of menu\n\n      event.stopPropagation();\n      const query = event.key.toLowerCase();\n      let elementToFocus;\n      const focusableItems = [...iterateFocusableElements(container)];\n      const itemsMatchingKey = focusableItems.filter(item => {\n        var _item$getAttribute;\n\n        const keyshortcuts = (_item$getAttribute = item.getAttribute('aria-keyshortcuts')) === null || _item$getAttribute === void 0 ? void 0 : _item$getAttribute.split(' ').map(shortcut => shortcut.toLowerCase());\n        return keyshortcuts && keyshortcuts.includes(query);\n      });\n      const currentActiveIndex = itemsMatchingKey.indexOf(activeElement); // If the last element is already selected, cycle through the list\n\n      if (currentActiveIndex === itemsMatchingKey.length - 1) {\n        elementToFocus = itemsMatchingKey[0];\n      } else {\n        elementToFocus = itemsMatchingKey.find((item, index) => {\n          return index > currentActiveIndex;\n        });\n      }\n\n      (_elementToFocus = elementToFocus) === null || _elementToFocus === void 0 ? void 0 : _elementToFocus.focus();\n    };\n\n    container.addEventListener('keydown', handler);\n    return () => container.removeEventListener('keydown', handler);\n  }, [open, containerRef]);\n\n  const isAlphabetKey = event => {\n    return event.key.length === 1 && /[a-z\\d]/i.test(event.key);\n  };\n\n  return {\n    containerRef\n  };\n};"]},"metadata":{},"sourceType":"module"}