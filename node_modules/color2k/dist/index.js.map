{"version":3,"file":"index.js","sources":["../src/guard.ts","../src/ColorError.ts","../src/parseToRgba.ts","../src/parseToHsla.ts","../src/hsla.ts","../src/darken.ts","../src/desaturate.ts","../src/getLuminance.ts","../src/getContrast.ts","../src/rgba.ts","../src/mix.ts","../src/hasBadContrast.ts","../src/transparentize.ts","../src/readableColorIsBlack.ts","../src/adjustHue.ts","../src/getScale.ts","../src/lighten.ts","../src/opacify.ts","../src/readableColor.ts","../src/saturate.ts","../src/toHex.ts","../src/toHsla.ts","../src/toRgba.ts"],"sourcesContent":["/**\n * A simple guard function:\n *\n * ```js\n * Math.min(Math.max(low, value), high)\n * ```\n */\nfunction guard(low: number, high: number, value: number): number {\n  return Math.min(Math.max(low, value), high);\n}\n\nexport default guard;\n","class ColorError extends Error {\n  constructor(color: string) {\n    super(`Failed to parse color: \"${color}\"`);\n  }\n}\n\nexport default ColorError;\n","import guard from './guard';\nimport ColorError from './ColorError';\n\n/**\n * Parses a color into red, gree, blue, alpha parts\n *\n * @param color the input color. Can be a RGB, RBGA, HSL, HSLA, or named color\n */\nfunction parseToRgba(color: string): [number, number, number, number] {\n  if (typeof color !== 'string') throw new ColorError(color);\n  if (color.trim().toLowerCase() === 'transparent') return [0, 0, 0, 0];\n\n  let normalizedColor = color.trim();\n  normalizedColor = namedColorRegex.test(color) ? nameToHex(color) : color;\n\n  const reducedHexMatch = reducedHexRegex.exec(normalizedColor);\n  if (reducedHexMatch) {\n    const arr = Array.from(reducedHexMatch).slice(1);\n    return [\n      ...arr.slice(0, 3).map((x) => parseInt(r(x, 2), 16)),\n      parseInt(r(arr[3] || 'f', 2), 16) / 255,\n    ] as [number, number, number, number];\n  }\n\n  const hexMatch = hexRegex.exec(normalizedColor);\n  if (hexMatch) {\n    const arr = Array.from(hexMatch).slice(1);\n    return [\n      ...arr.slice(0, 3).map((x) => parseInt(x, 16)),\n      parseInt(arr[3] || 'ff', 16) / 255,\n    ] as [number, number, number, number];\n  }\n\n  const rgbaMatch = rgbaRegex.exec(normalizedColor);\n  if (rgbaMatch) {\n    const arr = Array.from(rgbaMatch).slice(1);\n    return [\n      ...arr.slice(0, 3).map((x) => parseInt(x, 10)),\n      parseFloat(arr[3] || '1'),\n    ] as [number, number, number, number];\n  }\n\n  const hslaMatch = hslaRegex.exec(normalizedColor);\n  if (hslaMatch) {\n    const [h, s, l, a] = Array.from(hslaMatch).slice(1).map(parseFloat);\n    if (guard(0, 100, s) !== s) throw new ColorError(color);\n    if (guard(0, 100, l) !== l) throw new ColorError(color);\n    return [...hslToRgb(h, s, l), a || 1] as [number, number, number, number];\n  }\n\n  throw new ColorError(color);\n}\n\nfunction hash(str: string) {\n  let hash = 5381;\n  let i = str.length;\n\n  while (i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n\n  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */\n  return (hash >>> 0) % 2341;\n}\n\nconst colorToInt = (x: string) => parseInt(x.replace(/_/g, ''), 36);\n\nconst compressedColorMap = '1q29ehhb 1n09sgk7 1kl1ekf_ _yl4zsno 16z9eiv3 1p29lhp8 _bd9zg04 17u0____ _iw9zhe5 _to73___ _r45e31e _7l6g016 _jh8ouiv _zn3qba8 1jy4zshs 11u87k0u 1ro9yvyo 1aj3xael 1gz9zjz0 _3w8l4xo 1bf1ekf_ _ke3v___ _4rrkb__ 13j776yz _646mbhl _nrjr4__ _le6mbhl 1n37ehkb _m75f91n _qj3bzfz 1939yygw 11i5z6x8 _1k5f8xs 1509441m 15t5lwgf _ae2th1n _tg1ugcv 1lp1ugcv 16e14up_ _h55rw7n _ny9yavn _7a11xb_ 1ih442g9 _pv442g9 1mv16xof 14e6y7tu 1oo9zkds 17d1cisi _4v9y70f _y98m8kc 1019pq0v 12o9zda8 _348j4f4 1et50i2o _8epa8__ _ts6senj 1o350i2o 1mi9eiuo 1259yrp0 1ln80gnw _632xcoy 1cn9zldc _f29edu4 1n490c8q _9f9ziet 1b94vk74 _m49zkct 1kz6s73a 1eu9dtog _q58s1rz 1dy9sjiq __u89jo3 _aj5nkwg _ld89jo3 13h9z6wx _qa9z2ii _l119xgq _bs5arju 1hj4nwk9 1qt4nwk9 1ge6wau6 14j9zlcw 11p1edc_ _ms1zcxe _439shk6 _jt9y70f _754zsow 1la40eju _oq5p___ _x279qkz 1fa5r3rv _yd2d9ip _424tcku _8y1di2_ _zi2uabw _yy7rn9h 12yz980_ __39ljp6 1b59zg0x _n39zfzp 1fy9zest _b33k___ _hp9wq92 1il50hz4 _io472ub _lj9z3eo 19z9ykg0 _8t8iu3a 12b9bl4a 1ak5yw0o _896v4ku _tb8k8lv _s59zi6t _c09ze0p 1lg80oqn 1id9z8wb _238nba5 1kq6wgdi _154zssg _tn3zk49 _da9y6tc 1sg7cv4f _r12jvtt 1gq5fmkz 1cs9rvci _lp9jn1c _xw1tdnb 13f9zje6 16f6973h _vo7ir40 _bt5arjf _rc45e4t _hr4e100 10v4e100 _hc9zke2 _w91egv_ _sj2r1kk 13c87yx8 _vqpds__ _ni8ggk8 _tj9yqfb 1ia2j4r4 _7x9b10u 1fc9ld4j 1eq9zldr _5j9lhpx _ez9zl6o _md61fzm'\n  .split(' ')\n  .reduce((acc, next) => {\n    const key = colorToInt(next.substring(0, 3));\n    const hex = colorToInt(next.substring(3)).toString(16);\n\n    // NOTE: padStart could be used here but it breaks Node 6 compat\n    // https://github.com/ricokahler/color2k/issues/351\n    let prefix = '';\n    for (let i = 0; i < 6 - hex.length; i++) {\n      prefix += '0';\n    }\n\n    acc[key] = `${prefix}${hex}`;\n    return acc;\n  }, {} as { [key: string]: string });\n\n/**\n * Checks if a string is a CSS named color and returns its equivalent hex value, otherwise returns the original color.\n */\nfunction nameToHex(color: string): string {\n  const normalizedColorName = color.toLowerCase().trim();\n  const result = compressedColorMap[hash(normalizedColorName)];\n  if (!result) throw new ColorError(color);\n  return `#${result}`;\n}\n\nconst r = (str: string, amount: number) =>\n  Array.from(Array(amount))\n    .map(() => str)\n    .join('');\n\nconst reducedHexRegex = new RegExp(`^#${r('([a-f0-9])', 3)}([a-f0-9])?$`, 'i');\nconst hexRegex = new RegExp(`^#${r('([a-f0-9]{2})', 3)}([a-f0-9]{2})?$`, 'i');\nconst rgbaRegex = new RegExp(\n  `^rgba?\\\\(\\\\s*(\\\\d+)\\\\s*${r(\n    ',\\\\s*(\\\\d+)\\\\s*',\n    2\n  )}(?:,\\\\s*([\\\\d.]+))?\\\\s*\\\\)$`,\n  'i'\n);\nconst hslaRegex = /^hsla?\\(\\s*([\\d.]+)\\s*,\\s*([\\d.]+)%\\s*,\\s*([\\d.]+)%(?:\\s*,\\s*([\\d.]+))?\\s*\\)$/i;\nconst namedColorRegex = /^[a-z]+$/i;\n\nconst roundColor = (color: number): number => {\n  return Math.round(color * 255);\n};\n\nconst hslToRgb = (\n  hue: number,\n  saturation: number,\n  lightness: number\n): [number, number, number] => {\n  let l = lightness / 100;\n  if (saturation === 0) {\n    // achromatic\n    return [l, l, l].map(roundColor) as [number, number, number];\n  }\n\n  // formulae from https://en.wikipedia.org/wiki/HSL_and_HSV\n  const huePrime = (((hue % 360) + 360) % 360) / 60;\n  const chroma = (1 - Math.abs(2 * l - 1)) * (saturation / 100);\n  const secondComponent = chroma * (1 - Math.abs((huePrime % 2) - 1));\n\n  let red = 0;\n  let green = 0;\n  let blue = 0;\n\n  if (huePrime >= 0 && huePrime < 1) {\n    red = chroma;\n    green = secondComponent;\n  } else if (huePrime >= 1 && huePrime < 2) {\n    red = secondComponent;\n    green = chroma;\n  } else if (huePrime >= 2 && huePrime < 3) {\n    green = chroma;\n    blue = secondComponent;\n  } else if (huePrime >= 3 && huePrime < 4) {\n    green = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 4 && huePrime < 5) {\n    red = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 5 && huePrime < 6) {\n    red = chroma;\n    blue = secondComponent;\n  }\n\n  const lightnessModification = l - chroma / 2;\n  const finalRed = red + lightnessModification;\n  const finalGreen = green + lightnessModification;\n  const finalBlue = blue + lightnessModification;\n\n  return [finalRed, finalGreen, finalBlue].map(roundColor) as [\n    number,\n    number,\n    number\n  ];\n};\n\nexport default parseToRgba;\n","// taken from:\n// https://github.com/styled-components/polished/blob/a23a6a2bb26802b3d922d9c3b67bac3f3a54a310/src/internalHelpers/_rgbToHsl.js\nimport parseToRgba from './parseToRgba';\n\n/**\n * Parses a color in hue, saturation, lightness, and the alpha channel.\n *\n * Hue is a number between 0 and 360, saturation, lightness, and alpha are\n * decimal percentages between 0 and 1\n */\nfunction parseToHsla(color: string): [number, number, number, number] {\n  const [red, green, blue, alpha] = parseToRgba(color).map((value, index) =>\n    // 3rd index is alpha channel which is already normalized\n    index === 3 ? value : value / 255\n  );\n\n  const max = Math.max(red, green, blue);\n  const min = Math.min(red, green, blue);\n  const lightness = (max + min) / 2;\n\n  // achromatic\n  if (max === min) return [0, 0, lightness, alpha];\n\n  const delta = max - min;\n  const saturation =\n    lightness > 0.5 ? delta / (2 - max - min) : delta / (max + min);\n\n  const hue =\n    60 *\n    (red === max\n      ? (green - blue) / delta + (green < blue ? 6 : 0)\n      : green === max\n      ? (blue - red) / delta + 2\n      : (red - green) / delta + 4);\n\n  return [hue, saturation, lightness, alpha];\n}\n\nexport default parseToHsla;\n","import guard from './guard';\n\n/**\n * Takes in hsla parts and constructs an hsla string\n *\n * @param hue The color circle (from 0 to 360) - 0 (or 360) is red, 120 is green, 240 is blue\n * @param saturation Percentage of saturation, given as a decimal between 0 and 1\n * @param lightness Percentage of lightness, given as a decimal between 0 and 1\n * @param alpha Percentage of opacity, given as a decimal between 0 and 1\n */\nfunction hsla(\n  hue: number,\n  saturation: number,\n  lightness: number,\n  alpha: number\n): string {\n  return `hsla(${(hue % 360).toFixed()}, ${guard(\n    0,\n    100,\n    saturation * 100\n  ).toFixed()}%, ${guard(0, 100, lightness * 100).toFixed()}%, ${parseFloat(\n    guard(0, 1, alpha).toFixed(3)\n  )})`;\n}\n\nexport default hsla;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Darkens using lightness. This is equivalent to subtracting the lightness\n * from the L in HSL.\n *\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction darken(color: string, amount: number): string {\n  const [hue, saturation, lightness, alpha] = parseToHsla(color);\n  return hsla(hue, saturation, lightness - amount, alpha);\n}\n\nexport default darken;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Desaturates the input color by the given amount via subtracting from the `s`\n * in `hsla`.\n *\n * @param amount The amount to desaturate, given as a decimal between 0 and 1\n */\nfunction desaturate(color: string, amount: number): string {\n  const [h, s, l, a] = parseToHsla(color);\n  return hsla(h, s - amount, l, a);\n}\n\nexport default desaturate;\n","import parseToRgba from './parseToRgba';\n// taken from:\n// https://github.com/styled-components/polished/blob/0764c982551b487469043acb56281b0358b3107b/src/color/getLuminance.js\n\n/**\n * Returns a number (float) representing the luminance of a color.\n */\nfunction getLuminance(color: string): number {\n  if (color === 'transparent') return 0;\n\n  function f(x: number) {\n    const channel = x / 255;\n    return channel <= 0.03928\n      ? channel / 12.92\n      : Math.pow(((channel + 0.055) / 1.055), 2.4);\n  }\n\n  const [r, g, b] = parseToRgba(color);\n  return 0.2126 * f(r) + 0.7152 * f(g) + 0.0722 * f(b);\n}\n\nexport default getLuminance;\n","// taken from:\n// https://github.com/styled-components/polished/blob/0764c982551b487469043acb56281b0358b3107b/src/color/getContrast.js\nimport getLuminance from './getLuminance';\n\n/**\n * Returns the contrast ratio between two colors based on\n * [W3's recommended equation for calculating contrast](http://www.w3.org/TR/WCAG20/#contrast-ratiodef).\n */\nfunction getContrast(color1: string, color2: string): number {\n  const luminance1 = getLuminance(color1);\n  const luminance2 = getLuminance(color2);\n\n  return luminance1 > luminance2\n    ? (luminance1 + 0.05) / (luminance2 + 0.05)\n    : (luminance2 + 0.05) / (luminance1 + 0.05);\n}\n\nexport default getContrast;\n","import guard from './guard';\n\n/**\n * Takes in rgba parts and returns an rgba string\n *\n * @param red The amount of red in the red channel, given in a number between 0 and 255 inclusive\n * @param green The amount of green in the red channel, given in a number between 0 and 255 inclusive\n * @param blue The amount of blue in the red channel, given in a number between 0 and 255 inclusive\n * @param alpha Percentage of opacity, given as a decimal between 0 and 1\n */\nfunction rgba(red: number, green: number, blue: number, alpha: number): string {\n  return `rgba(${guard(0, 255, red).toFixed()}, ${guard(\n    0,\n    255,\n    green\n  ).toFixed()}, ${guard(0, 255, blue).toFixed()}, ${parseFloat(\n    guard(0, 1, alpha).toFixed(3)\n  )})`;\n}\n\nexport default rgba;\n","import parseToRgba from './parseToRgba';\nimport rgba from './rgba';\n\n/**\n * Mixes two colors together. Taken from sass's implementation.\n */\nfunction mix(color1: string, color2: string, weight: number): string {\n  const normalize = (n: number, index: number) =>\n    // 3rd index is alpha channel which is already normalized\n    index === 3 ? n : n / 255;\n\n  const [r1, g1, b1, a1] = parseToRgba(color1).map(normalize);\n  const [r2, g2, b2, a2] = parseToRgba(color2).map(normalize);\n\n  // The formula is copied from the original Sass implementation:\n  // http://sass-lang.com/documentation/Sass/Script/Functions.html#mix-instance_method\n  const alphaDelta = a2 - a1;\n  const normalizedWeight = weight * 2 - 1;\n  const combinedWeight =\n    normalizedWeight * alphaDelta === -1\n      ? normalizedWeight\n      : normalizedWeight + alphaDelta / (1 + normalizedWeight * alphaDelta);\n  const weight2 = (combinedWeight + 1) / 2;\n  const weight1 = 1 - weight2;\n\n  const r = (r1 * weight1 + r2 * weight2) * 255;\n  const g = (g1 * weight1 + g2 * weight2) * 255;\n  const b = (b1 * weight1 + b2 * weight2) * 255;\n  const a = a2 * weight + a1 * (1 - weight);\n\n  return rgba(r, g, b, a);\n}\n\nexport default mix;\n","import getContrast from './getContrast';\n\nconst guidelines = {\n  decorative: 1.5,\n  readable: 3,\n  aa: 4.5,\n  aaa: 7,\n};\n\n/**\n * Returns whether or not a color has bad contrast against \n * a white background according to a given standard\n */\nfunction hasBadContrast(\n  color: string,\n  standard: 'decorative' | 'readable' | 'aa' | 'aaa' = 'aa'\n): boolean {\n  return getContrast(color, '#fff') < guidelines[standard];\n}\n\nexport default hasBadContrast;\n","import parseToRgba from './parseToRgba';\nimport rgba from './rgba';\n\n/**\n * Takes in a color and makes it more transparent by convert to `rgba` and\n * decreasing the amount in the alpha channel.\n *\n * @param amount The amount to increase the transparency by, given as a decimal between 0 and 1\n */\nfunction transparentize(color: string, amount: number): string {\n  const [r, g, b, a] = parseToRgba(color);\n  return rgba(r, g, b, a - amount);\n}\n\nexport default transparentize;\n","import getLuminance from './getLuminance';\n\n/**\n * An alternative function to `readableColor`. Returns whether or not the \n * readable color (i.e. the color to be place on top the input color) should be\n * black.\n */\nfunction readableColorIsBlack(color: string): boolean {\n  return getLuminance(color) > 0.179;\n}\n\nexport default readableColorIsBlack;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Adjusts the current hue of the color by the given degrees. Wraps around when\n * over 360.\n *\n * @param color input color\n * @param degrees degrees to adjust the input color, accepts degree integers\n * (0 - 360) and wraps around on overflow\n */\nfunction adjustHue(color: string, degrees: number): string {\n  const [h, s, l, a] = parseToHsla(color);\n  return hsla(h + degrees, s, l, a);\n}\n\nexport default adjustHue;\n","import mix from './mix';\nimport guard from './guard';\n\n/**\n * Given a series colors, this function will return a `scale(x)` function that\n * accepts a percentage as a decimal between 0 and 1 and returns the color at\n * that percentage in the scale.\n *\n * ```js\n * const scale = getScale('red', 'yellow', 'green');\n * console.log(scale(0)); // rgba(255, 0, 0, 1)\n * console.log(scale(0.5)); // rgba(255, 255, 0, 1)\n * console.log(scale(1)); // rgba(0, 128, 0, 1)\n * ```\n *\n * If you'd like to limit the domain and range like chroma-js, we recommend\n * wrapping scale again.\n *\n * ```js\n * const _scale = getScale('red', 'yellow', 'green');\n * const scale = x => _scale(x / 100);\n *\n * console.log(scale(0)); // rgba(255, 0, 0, 1)\n * console.log(scale(50)); // rgba(255, 255, 0, 1)\n * console.log(scale(100)); // rgba(0, 128, 0, 1)\n * ```\n */\nfunction getScale(...colors: string[]): (n: number) => string {\n  return (n) => {\n    const lastIndex = colors.length - 1;\n    const lowIndex = guard(0, lastIndex, Math.floor(n * lastIndex));\n    const highIndex = guard(0, lastIndex, Math.ceil(n * lastIndex));\n\n    const color1 = colors[lowIndex];\n    const color2 = colors[highIndex];\n\n    const unit = 1 / lastIndex;\n    const weight = (n - unit * lowIndex) / unit;\n\n    return mix(color1, color2, weight);\n  };\n}\n\nexport default getScale;\n","import darken from './darken';\n/**\n * Lightens a color by a given amount. This is equivalent to\n * `darken(color, -amount)`\n *\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction lighten(color: string, amount: number): string {\n  return darken(color, -amount);\n}\n\nexport default lighten;\n","import transparentize from './transparentize';\n\n/**\n * Takes a color and un-transparentizes it. Equivalent to\n * `transparentize(color, -amount)`\n *\n * @param amount The amount to increase the opacity by, given as a decimal between 0 and 1\n */\nfunction opacify(color: string, amount: number): string {\n  return transparentize(color, -amount);\n}\n\nexport default opacify;\n","import readableColorIsBlack from './readableColorIsBlack';\n\n/**\n * Returns black or white for best contrast depending on the luminosity of the\n * given color.\n */\nfunction readableColor(color: string): string {\n  return readableColorIsBlack(color) ? '#000' : '#fff';\n}\n\nexport default readableColor;\n","import desaturate from './desaturate';\n\n/**\n * Saturates a color by converting it to `hsl` and increasing the saturation\n * amount. Equivalent to `desaturate(color, -amount)`\n * \n * @param color Input color\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction saturate(color: string, amount: number): string {\n  return desaturate(color, -amount);\n}\n\nexport default saturate;\n","import parseToRgba from './parseToRgba';\nimport guard from './guard';\n\n/**\n * Takes in any color and returns it as a hex code.\n */\nfunction toHex(color: string): string {\n  const [r, g, b, a] = parseToRgba(color);\n\n  let hex = (x: number) => {\n    const h = guard(0, 255, x).toString(16);\n    // NOTE: padStart could be used here but it breaks Node 6 compat\n    // https://github.com/ricokahler/color2k/issues/351\n    return h.length === 1 ? `0${h}` : h;\n  };\n\n  return `#${hex(r)}${hex(g)}${hex(b)}${a < 1 ? hex(Math.round(a * 255)) : ''}`;\n}\n\nexport default toHex;\n","import parseToHsla from './parseToHsla';\nimport hsla from './hsla';\n\n/**\n * Takes in any color and returns it as an hsla string.\n */\nfunction toHsla(color: string): string {\n  return hsla(...parseToHsla(color));\n}\n\nexport default toHsla;\n","import parseToRgba from './parseToRgba';\nimport rgba from './rgba';\n\n/**\n * Takes in any color and returns it as an rgba string.\n */\nfunction toRgba(color: string): string {\n  return rgba(...parseToRgba(color));\n}\n\nexport default toRgba;\n"],"names":["guard","low","high","value","Math","min","max","ColorError","Error","constructor","color","super","parseToRgba","trim","toLowerCase","normalizedColor","namedColorRegex","test","normalizedColorName","result","compressedColorMap","str","hash","i","length","charCodeAt","nameToHex","reducedHexMatch","reducedHexRegex","exec","arr","Array","from","slice","map","x","parseInt","r","hexMatch","hexRegex","rgbaMatch","rgbaRegex","parseFloat","hslaMatch","hslaRegex","h","s","l","a","hslToRgb","colorToInt","replace","split","reduce","acc","next","key","substring","hex","toString","prefix","amount","join","RegExp","roundColor","round","hue","saturation","lightness","huePrime","chroma","abs","secondComponent","red","green","blue","lightnessModification","parseToHsla","alpha","index","delta","hsla","toFixed","darken","desaturate","getLuminance","f","channel","pow","g","b","getContrast","color1","color2","luminance1","luminance2","rgba","mix","weight","normalize","n","r1","g1","b1","a1","r2","g2","b2","a2","alphaDelta","normalizedWeight","weight2","weight1","guidelines","decorative","readable","aa","aaa","transparentize","readableColorIsBlack","degrees","colors","lastIndex","lowIndex","floor","highIndex","ceil","unit","standard"],"mappings":"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"}