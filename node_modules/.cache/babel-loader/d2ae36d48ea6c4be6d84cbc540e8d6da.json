{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { createContext } from 'react';\nimport CheckboxOrRadioGroup from './_CheckboxOrRadioGroup';\nimport CheckboxOrRadioGroupCaption from './_CheckboxOrRadioGroup/_CheckboxOrRadioGroupCaption';\nimport CheckboxOrRadioGroupLabel from './_CheckboxOrRadioGroup/_CheckboxOrRadioGroupLabel';\nimport CheckboxOrRadioGroupValidation from './_CheckboxOrRadioGroup/_CheckboxOrRadioGroupValidation';\nimport { useRenderForcingRef } from './hooks';\nimport { Checkbox, FormControl } from '.';\nexport const CheckboxGroupContext = /*#__PURE__*/createContext({});\n\nconst CheckboxGroup = _ref => {\n  let {\n    children,\n    disabled,\n    onChange,\n    ...rest\n  } = _ref;\n  const formControlComponentChildren = React.Children.toArray(children).filter(child => /*#__PURE__*/React.isValidElement(child) && child.type === FormControl).map(formControlComponent => /*#__PURE__*/React.isValidElement(formControlComponent) ? formControlComponent.props.children : []).flat();\n  const checkedCheckboxes = React.Children.toArray(formControlComponentChildren).filter(child => /*#__PURE__*/React.isValidElement(child) && child.type === Checkbox).map(checkbox => /*#__PURE__*/React.isValidElement(checkbox) && (checkbox.props.checked || checkbox.props.defaultChecked) && checkbox.props.value).filter(Boolean);\n  const [selectedCheckboxValues, setSelectedCheckboxValues] = useRenderForcingRef(checkedCheckboxes);\n\n  const updateSelectedCheckboxes = e => {\n    const {\n      value,\n      checked\n    } = e.currentTarget;\n\n    if (checked) {\n      setSelectedCheckboxValues([...(selectedCheckboxValues.current || []), value]);\n      return;\n    }\n\n    setSelectedCheckboxValues((selectedCheckboxValues.current || []).filter(selectedValue => selectedValue !== value));\n  };\n\n  return /*#__PURE__*/React.createElement(CheckboxGroupContext.Provider, {\n    value: {\n      disabled,\n      onChange: e => {\n        if (onChange) {\n          updateSelectedCheckboxes(e);\n          onChange(selectedCheckboxValues.current || [], e);\n        }\n      }\n    }\n  }, /*#__PURE__*/React.createElement(CheckboxOrRadioGroup, _extends({\n    disabled: disabled\n  }, rest), children));\n};\n\nCheckboxGroup.displayName = \"CheckboxGroup\";\nexport default Object.assign(CheckboxGroup, {\n  Caption: CheckboxOrRadioGroupCaption,\n  Label: CheckboxOrRadioGroupLabel,\n  Validation: CheckboxOrRadioGroupValidation\n});","map":{"version":3,"sources":["/Users/steve/Documents/repos/github-notifications/node_modules/@primer/react/lib-esm/CheckboxGroup.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","React","createContext","CheckboxOrRadioGroup","CheckboxOrRadioGroupCaption","CheckboxOrRadioGroupLabel","CheckboxOrRadioGroupValidation","useRenderForcingRef","Checkbox","FormControl","CheckboxGroupContext","CheckboxGroup","children","disabled","onChange","rest","formControlComponentChildren","Children","toArray","filter","child","isValidElement","type","map","formControlComponent","props","flat","checkedCheckboxes","checkbox","checked","defaultChecked","value","Boolean","selectedCheckboxValues","setSelectedCheckboxValues","updateSelectedCheckboxes","e","currentTarget","current","selectedValue","createElement","Provider","displayName","Caption","Label","Validation"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { createContext } from 'react';\nimport CheckboxOrRadioGroup from './_CheckboxOrRadioGroup';\nimport CheckboxOrRadioGroupCaption from './_CheckboxOrRadioGroup/_CheckboxOrRadioGroupCaption';\nimport CheckboxOrRadioGroupLabel from './_CheckboxOrRadioGroup/_CheckboxOrRadioGroupLabel';\nimport CheckboxOrRadioGroupValidation from './_CheckboxOrRadioGroup/_CheckboxOrRadioGroupValidation';\nimport { useRenderForcingRef } from './hooks';\nimport { Checkbox, FormControl } from '.';\nexport const CheckboxGroupContext = /*#__PURE__*/createContext({});\n\nconst CheckboxGroup = ({\n  children,\n  disabled,\n  onChange,\n  ...rest\n}) => {\n  const formControlComponentChildren = React.Children.toArray(children).filter(child => /*#__PURE__*/React.isValidElement(child) && child.type === FormControl).map(formControlComponent => /*#__PURE__*/React.isValidElement(formControlComponent) ? formControlComponent.props.children : []).flat();\n  const checkedCheckboxes = React.Children.toArray(formControlComponentChildren).filter(child => /*#__PURE__*/React.isValidElement(child) && child.type === Checkbox).map(checkbox => /*#__PURE__*/React.isValidElement(checkbox) && (checkbox.props.checked || checkbox.props.defaultChecked) && checkbox.props.value).filter(Boolean);\n  const [selectedCheckboxValues, setSelectedCheckboxValues] = useRenderForcingRef(checkedCheckboxes);\n\n  const updateSelectedCheckboxes = e => {\n    const {\n      value,\n      checked\n    } = e.currentTarget;\n\n    if (checked) {\n      setSelectedCheckboxValues([...(selectedCheckboxValues.current || []), value]);\n      return;\n    }\n\n    setSelectedCheckboxValues((selectedCheckboxValues.current || []).filter(selectedValue => selectedValue !== value));\n  };\n\n  return /*#__PURE__*/React.createElement(CheckboxGroupContext.Provider, {\n    value: {\n      disabled,\n      onChange: e => {\n        if (onChange) {\n          updateSelectedCheckboxes(e);\n          onChange(selectedCheckboxValues.current || [], e);\n        }\n      }\n    }\n  }, /*#__PURE__*/React.createElement(CheckboxOrRadioGroup, _extends({\n    disabled: disabled\n  }, rest), children));\n};\n\nCheckboxGroup.displayName = \"CheckboxGroup\";\nexport default Object.assign(CheckboxGroup, {\n  Caption: CheckboxOrRadioGroupCaption,\n  Label: CheckboxOrRadioGroupLabel,\n  Validation: CheckboxOrRadioGroupValidation\n});"]},"metadata":{},"sourceType":"module"}