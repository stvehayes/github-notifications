{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { AutocompleteContext } from './AutocompleteContext';\nimport TextInput from '../TextInput';\nimport { useCombinedRefs } from '../hooks/useCombinedRefs';\nconst AutocompleteInput = /*#__PURE__*/React.forwardRef((_ref, forwardedRef) => {\n  let {\n    as: Component = TextInput,\n    onFocus,\n    onBlur,\n    onChange,\n    onKeyDown,\n    onKeyUp,\n    onKeyPress,\n    value,\n    ...props\n  } = _ref;\n  const autocompleteContext = useContext(AutocompleteContext);\n\n  if (autocompleteContext === null) {\n    throw new Error('AutocompleteContext returned null values');\n  }\n\n  const {\n    activeDescendantRef,\n    autocompleteSuggestion = '',\n    id,\n    inputRef,\n    inputValue = '',\n    isMenuDirectlyActivated,\n    setInputValue,\n    setShowMenu,\n    showMenu\n  } = autocompleteContext;\n  const combinedInputRef = useCombinedRefs(inputRef, forwardedRef);\n  const [highlightRemainingText, setHighlightRemainingText] = useState(true);\n  const handleInputFocus = useCallback(event => {\n    onFocus && onFocus(event);\n    setShowMenu(true);\n  }, [onFocus, setShowMenu]);\n  const handleInputBlur = useCallback(event => {\n    onBlur && onBlur(event); // HACK: wait a tick and check the focused element before hiding the autocomplete menu\n    // this prevents the menu from hiding when the user is clicking an option in the Autoselect.Menu,\n    // but still hides the menu when the user blurs the input by tabbing out or clicking somewhere else on the page\n\n    setTimeout(() => {\n      if (document.activeElement !== combinedInputRef.current) {\n        setShowMenu(false);\n      }\n    }, 0);\n  }, [onBlur, setShowMenu, combinedInputRef]);\n  const handleInputChange = useCallback(event => {\n    onChange && onChange(event);\n    setInputValue(event.currentTarget.value);\n\n    if (!showMenu) {\n      setShowMenu(true);\n    }\n  }, [onChange, setInputValue, setShowMenu, showMenu]);\n  const handleInputKeyDown = useCallback(event => {\n    var _inputRef$current;\n\n    onKeyDown && onKeyDown(event);\n\n    if (event.key === 'Backspace') {\n      setHighlightRemainingText(false);\n    }\n\n    if (event.key === 'Escape' && (_inputRef$current = inputRef.current) !== null && _inputRef$current !== void 0 && _inputRef$current.value) {\n      setInputValue('');\n      inputRef.current.value = '';\n    }\n  }, [inputRef, setInputValue, setHighlightRemainingText, onKeyDown]);\n  const handleInputKeyUp = useCallback(event => {\n    onKeyUp && onKeyUp(event);\n\n    if (event.key === 'Backspace') {\n      setHighlightRemainingText(true);\n    }\n  }, [setHighlightRemainingText, onKeyUp]);\n  const onInputKeyPress = useCallback(event => {\n    onKeyPress && onKeyPress(event);\n\n    if (showMenu && event.key === 'Enter' && activeDescendantRef.current) {\n      event.preventDefault();\n      event.nativeEvent.stopImmediatePropagation(); // Forward Enter key press to active descendant so that item gets activated\n\n      const activeDescendantEvent = new KeyboardEvent(event.type, event.nativeEvent);\n      activeDescendantRef.current.dispatchEvent(activeDescendantEvent);\n    }\n  }, [activeDescendantRef, showMenu, onKeyPress]);\n  useEffect(() => {\n    if (!inputRef.current) {\n      return;\n    } // resets input value to being empty after a selection has been made\n\n\n    if (!autocompleteSuggestion) {\n      inputRef.current.value = inputValue;\n    } // TODO: fix bug where this function prevents `onChange` from being triggered if the highlighted item text\n    //       is the same as what I'm typing\n    //       e.g.: typing 'tw' highlights 'two', but when I 'two', the text input change does not get triggered\n\n\n    if (highlightRemainingText && autocompleteSuggestion && (inputValue || isMenuDirectlyActivated)) {\n      inputRef.current.value = autocompleteSuggestion;\n\n      if (autocompleteSuggestion.toLowerCase().indexOf(inputValue.toLowerCase()) === 0) {\n        inputRef.current.setSelectionRange(inputValue.length, autocompleteSuggestion.length);\n      }\n    } // calling this useEffect when `highlightRemainingText` changes breaks backspace functionality\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [autocompleteSuggestion, inputValue, inputRef, isMenuDirectlyActivated]);\n  useEffect(() => {\n    setInputValue(typeof value !== 'undefined' ? value.toString() : '');\n  }, [value, setInputValue]);\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    onFocus: handleInputFocus,\n    onBlur: handleInputBlur,\n    onChange: handleInputChange,\n    onKeyDown: handleInputKeyDown,\n    onKeyPress: onInputKeyPress,\n    onKeyUp: handleInputKeyUp,\n    ref: combinedInputRef,\n    \"aria-controls\": `${id}-listbox`,\n    \"aria-autocomplete\": \"both\",\n    role: \"combobox\",\n    \"aria-expanded\": showMenu,\n    \"aria-haspopup\": \"listbox\",\n    \"aria-owns\": `${id}-listbox`,\n    autoComplete: \"off\",\n    id: id\n  }, props));\n});\nAutocompleteInput.displayName = 'AutocompleteInput';\nexport default AutocompleteInput;","map":{"version":3,"sources":["/Users/steve/Documents/repos/notifications/node_modules/@primer/react/lib-esm/Autocomplete/AutocompleteInput.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","React","useCallback","useContext","useEffect","useState","AutocompleteContext","TextInput","useCombinedRefs","AutocompleteInput","forwardRef","forwardedRef","as","Component","onFocus","onBlur","onChange","onKeyDown","onKeyUp","onKeyPress","value","props","autocompleteContext","Error","activeDescendantRef","autocompleteSuggestion","id","inputRef","inputValue","isMenuDirectlyActivated","setInputValue","setShowMenu","showMenu","combinedInputRef","highlightRemainingText","setHighlightRemainingText","handleInputFocus","event","handleInputBlur","setTimeout","document","activeElement","current","handleInputChange","currentTarget","handleInputKeyDown","_inputRef$current","handleInputKeyUp","onInputKeyPress","preventDefault","nativeEvent","stopImmediatePropagation","activeDescendantEvent","KeyboardEvent","type","dispatchEvent","toLowerCase","indexOf","setSelectionRange","toString","createElement","ref","role","autoComplete","displayName"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { AutocompleteContext } from './AutocompleteContext';\nimport TextInput from '../TextInput';\nimport { useCombinedRefs } from '../hooks/useCombinedRefs';\nconst AutocompleteInput = /*#__PURE__*/React.forwardRef(({\n  as: Component = TextInput,\n  onFocus,\n  onBlur,\n  onChange,\n  onKeyDown,\n  onKeyUp,\n  onKeyPress,\n  value,\n  ...props\n}, forwardedRef) => {\n  const autocompleteContext = useContext(AutocompleteContext);\n\n  if (autocompleteContext === null) {\n    throw new Error('AutocompleteContext returned null values');\n  }\n\n  const {\n    activeDescendantRef,\n    autocompleteSuggestion = '',\n    id,\n    inputRef,\n    inputValue = '',\n    isMenuDirectlyActivated,\n    setInputValue,\n    setShowMenu,\n    showMenu\n  } = autocompleteContext;\n  const combinedInputRef = useCombinedRefs(inputRef, forwardedRef);\n  const [highlightRemainingText, setHighlightRemainingText] = useState(true);\n  const handleInputFocus = useCallback(event => {\n    onFocus && onFocus(event);\n    setShowMenu(true);\n  }, [onFocus, setShowMenu]);\n  const handleInputBlur = useCallback(event => {\n    onBlur && onBlur(event); // HACK: wait a tick and check the focused element before hiding the autocomplete menu\n    // this prevents the menu from hiding when the user is clicking an option in the Autoselect.Menu,\n    // but still hides the menu when the user blurs the input by tabbing out or clicking somewhere else on the page\n\n    setTimeout(() => {\n      if (document.activeElement !== combinedInputRef.current) {\n        setShowMenu(false);\n      }\n    }, 0);\n  }, [onBlur, setShowMenu, combinedInputRef]);\n  const handleInputChange = useCallback(event => {\n    onChange && onChange(event);\n    setInputValue(event.currentTarget.value);\n\n    if (!showMenu) {\n      setShowMenu(true);\n    }\n  }, [onChange, setInputValue, setShowMenu, showMenu]);\n  const handleInputKeyDown = useCallback(event => {\n    var _inputRef$current;\n\n    onKeyDown && onKeyDown(event);\n\n    if (event.key === 'Backspace') {\n      setHighlightRemainingText(false);\n    }\n\n    if (event.key === 'Escape' && (_inputRef$current = inputRef.current) !== null && _inputRef$current !== void 0 && _inputRef$current.value) {\n      setInputValue('');\n      inputRef.current.value = '';\n    }\n  }, [inputRef, setInputValue, setHighlightRemainingText, onKeyDown]);\n  const handleInputKeyUp = useCallback(event => {\n    onKeyUp && onKeyUp(event);\n\n    if (event.key === 'Backspace') {\n      setHighlightRemainingText(true);\n    }\n  }, [setHighlightRemainingText, onKeyUp]);\n  const onInputKeyPress = useCallback(event => {\n    onKeyPress && onKeyPress(event);\n\n    if (showMenu && event.key === 'Enter' && activeDescendantRef.current) {\n      event.preventDefault();\n      event.nativeEvent.stopImmediatePropagation(); // Forward Enter key press to active descendant so that item gets activated\n\n      const activeDescendantEvent = new KeyboardEvent(event.type, event.nativeEvent);\n      activeDescendantRef.current.dispatchEvent(activeDescendantEvent);\n    }\n  }, [activeDescendantRef, showMenu, onKeyPress]);\n  useEffect(() => {\n    if (!inputRef.current) {\n      return;\n    } // resets input value to being empty after a selection has been made\n\n\n    if (!autocompleteSuggestion) {\n      inputRef.current.value = inputValue;\n    } // TODO: fix bug where this function prevents `onChange` from being triggered if the highlighted item text\n    //       is the same as what I'm typing\n    //       e.g.: typing 'tw' highlights 'two', but when I 'two', the text input change does not get triggered\n\n\n    if (highlightRemainingText && autocompleteSuggestion && (inputValue || isMenuDirectlyActivated)) {\n      inputRef.current.value = autocompleteSuggestion;\n\n      if (autocompleteSuggestion.toLowerCase().indexOf(inputValue.toLowerCase()) === 0) {\n        inputRef.current.setSelectionRange(inputValue.length, autocompleteSuggestion.length);\n      }\n    } // calling this useEffect when `highlightRemainingText` changes breaks backspace functionality\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [autocompleteSuggestion, inputValue, inputRef, isMenuDirectlyActivated]);\n  useEffect(() => {\n    setInputValue(typeof value !== 'undefined' ? value.toString() : '');\n  }, [value, setInputValue]);\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    onFocus: handleInputFocus,\n    onBlur: handleInputBlur,\n    onChange: handleInputChange,\n    onKeyDown: handleInputKeyDown,\n    onKeyPress: onInputKeyPress,\n    onKeyUp: handleInputKeyUp,\n    ref: combinedInputRef,\n    \"aria-controls\": `${id}-listbox`,\n    \"aria-autocomplete\": \"both\",\n    role: \"combobox\",\n    \"aria-expanded\": showMenu,\n    \"aria-haspopup\": \"listbox\",\n    \"aria-owns\": `${id}-listbox`,\n    autoComplete: \"off\",\n    id: id\n  }, props));\n});\nAutocompleteInput.displayName = 'AutocompleteInput';\nexport default AutocompleteInput;"]},"metadata":{},"sourceType":"module"}