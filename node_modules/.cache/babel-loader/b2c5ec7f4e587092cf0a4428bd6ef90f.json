{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport styled from 'styled-components';\nimport React, { useEffect, useRef } from 'react';\nimport useLayoutEffect from './utils/useIsomorphicLayoutEffect';\nimport { get } from './constants';\nimport { useOverlay } from './hooks';\nimport Portal from './Portal';\nimport sx from './sx';\nimport { useCombinedRefs } from './hooks/useCombinedRefs';\nimport { useTheme } from './ThemeProvider';\nconst heightMap = {\n  xsmall: '192px',\n  small: '256px',\n  medium: '320px',\n  large: '432px',\n  xlarge: '600px',\n  auto: 'auto',\n  initial: 'auto' // Passing 'initial' initially applies 'auto'\n\n};\nconst widthMap = {\n  small: '256px',\n  medium: '320px',\n  large: '480px',\n  xlarge: '640px',\n  xxlarge: '960px',\n  auto: 'auto'\n};\nconst animationDuration = 200;\n\nfunction getSlideAnimationStartingVector(anchorSide) {\n  if (anchorSide !== null && anchorSide !== void 0 && anchorSide.endsWith('bottom')) {\n    return {\n      x: 0,\n      y: -1\n    };\n  } else if (anchorSide !== null && anchorSide !== void 0 && anchorSide.endsWith('top')) {\n    return {\n      x: 0,\n      y: 1\n    };\n  } else if (anchorSide !== null && anchorSide !== void 0 && anchorSide.endsWith('right')) {\n    return {\n      x: -1,\n      y: 0\n    };\n  } else if (anchorSide !== null && anchorSide !== void 0 && anchorSide.endsWith('left')) {\n    return {\n      x: 1,\n      y: 0\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0\n  };\n}\n\nconst StyledOverlay = styled.div.withConfig({\n  displayName: \"Overlay__StyledOverlay\",\n  componentId: \"sc-1mkyld6-0\"\n})([\"background-color:\", \";box-shadow:\", \";position:absolute;min-width:192px;max-width:640px;height:\", \";max-height:\", \";width:\", \";border-radius:12px;overflow:hidden;animation:overlay-appear \", \"ms \", \";@keyframes overlay-appear{0%{opacity:0;}100%{opacity:1;}}visibility:var(--styled-overlay-visibility);:focus{outline:none;}@media (forced-colors:active){outline:solid 1px transparent;}\", \";\"], get('colors.canvas.overlay'), get('shadows.overlay.shadow'), props => heightMap[props.height || 'auto'], props => props.maxHeight && heightMap[props.maxHeight], props => widthMap[props.width || 'auto'], animationDuration, get('animation.easeOutCubic'), sx);\n/**\n * An `Overlay` is a flexible floating surface, used to display transient content such as menus,\n * selection options, dialogs, and more. Overlays use shadows to express elevation. The `Overlay`\n * component handles all behaviors needed by overlay UIs as well as the common styles that all overlays * should have.\n * @param ignoreClickRefs Optional. An array of ref objects to ignore clicks on in the `onOutsideClick` behavior. This is often used to ignore clicking on the element that toggles the open/closed state for the `Overlay` to prevent the `Overlay` from being toggled twice.\n * @param initialFocusRef Optional. Ref for the element to focus when the `Overlay` is opened. If nothing is provided, the first focusable element in the `Overlay` body is focused.\n * @param returnFocusRef Required. Ref for the element to focus when the `Overlay` is closed.\n * @param onClickOutside  Required. Function to call when clicking outside of the `Overlay`. Typically this function removes the Overlay.\n * @param onEscape Required. Function to call when user presses `Escape`. Typically this function removes the Overlay.\n * @param width Sets the width of the `Overlay`, pick from our set list of widths, or pass `auto` to automatically set the width based on the content of the `Overlay`. `small` corresponds to `256px`, `medium` corresponds to `320px`, `large` corresponds to `480px`, `xlarge` corresponds to `640px`, `xxlarge` corresponds to `960px`.\n * @param height Sets the height of the `Overlay`, pick from our set list of heights, or pass `auto` to automatically set the height based on the content of the `Overlay`, or pass `initial` to set the height based on the initial content of the `Overlay` (i.e. ignoring content changes). `xsmall` corresponds to `192px`, `small` corresponds to `256px`, `medium` corresponds to `320px`, `large` corresponds to `432px`, `xlarge` corresponds to `600px`.\n * @param maxHeight Sets the maximum height of the `Overlay`, pick from our set list of heights. `xsmall` corresponds to `192px`, `small` corresponds to `256px`, `medium` corresponds to `320px`, `large` corresponds to `432px`, `xlarge` corresponds to `600px`.\n * @param anchorSide If provided, the Overlay will slide into position from the side of the anchor with a brief animation\n * @param top Optional. Vertical position of the overlay, relative to its closest positioned ancestor (often its `Portal`).\n * @param left Optional. Horizontal position of the overlay, relative to its closest positioned ancestor (often its `Portal`).\n * @param portalContainerName Optional. The name of the portal container to render the Overlay into.\n */\n\nconst Overlay = /*#__PURE__*/React.forwardRef((_ref, forwardedRef) => {\n  let {\n    onClickOutside,\n    role = 'none',\n    initialFocusRef,\n    returnFocusRef,\n    ignoreClickRefs,\n    onEscape,\n    visibility = 'visible',\n    height,\n    top,\n    left,\n    anchorSide,\n    portalContainerName,\n    preventFocusOnOpen,\n    ...rest\n  } = _ref;\n  const overlayRef = useRef(null);\n  const combinedRef = useCombinedRefs(overlayRef, forwardedRef);\n  const {\n    theme\n  } = useTheme();\n  const slideAnimationDistance = parseInt(get('space.2')(theme).replace('px', ''));\n  const slideAnimationEasing = get('animation.easeOutCubic')(theme);\n  useOverlay({\n    overlayRef,\n    returnFocusRef,\n    onEscape,\n    ignoreClickRefs,\n    onClickOutside,\n    initialFocusRef,\n    preventFocusOnOpen\n  });\n  useEffect(() => {\n    var _combinedRef$current;\n\n    if (height === 'initial' && (_combinedRef$current = combinedRef.current) !== null && _combinedRef$current !== void 0 && _combinedRef$current.clientHeight) {\n      combinedRef.current.style.height = `${combinedRef.current.clientHeight}px`;\n    }\n  }, [height, combinedRef]);\n  useLayoutEffect(() => {\n    var _overlayRef$current;\n\n    const {\n      x,\n      y\n    } = getSlideAnimationStartingVector(anchorSide);\n\n    if (!x && !y || !((_overlayRef$current = overlayRef.current) !== null && _overlayRef$current !== void 0 && _overlayRef$current.animate) || visibility === 'hidden') {\n      return;\n    } // JS animation is required because Safari does not allow css animations to start paused and then run\n\n\n    overlayRef.current.animate({\n      transform: [`translate(${slideAnimationDistance * x}px, ${slideAnimationDistance * y}px)`, `translate(0, 0)`]\n    }, {\n      duration: animationDuration,\n      easing: slideAnimationEasing\n    });\n  }, [anchorSide, slideAnimationDistance, slideAnimationEasing, visibility]);\n  return /*#__PURE__*/React.createElement(Portal, {\n    containerName: portalContainerName\n  }, /*#__PURE__*/React.createElement(StyledOverlay, _extends({\n    height: height,\n    role: role\n  }, rest, {\n    ref: combinedRef,\n    style: {\n      top: `${top || 0}px`,\n      left: `${left || 0}px`,\n      '--styled-overlay-visibility': visibility\n    }\n  })));\n});\nOverlay.defaultProps = {\n  height: 'auto',\n  width: 'auto'\n};\nexport default Overlay;","map":{"version":3,"sources":["/Users/steve/Documents/repos/github-notifications/node_modules/@primer/react/lib-esm/Overlay.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","styled","React","useEffect","useRef","useLayoutEffect","get","useOverlay","Portal","sx","useCombinedRefs","useTheme","heightMap","xsmall","small","medium","large","xlarge","auto","initial","widthMap","xxlarge","animationDuration","getSlideAnimationStartingVector","anchorSide","endsWith","x","y","StyledOverlay","div","withConfig","displayName","componentId","props","height","maxHeight","width","Overlay","forwardRef","forwardedRef","onClickOutside","role","initialFocusRef","returnFocusRef","ignoreClickRefs","onEscape","visibility","top","left","portalContainerName","preventFocusOnOpen","rest","overlayRef","combinedRef","theme","slideAnimationDistance","parseInt","replace","slideAnimationEasing","_combinedRef$current","current","clientHeight","style","_overlayRef$current","animate","transform","duration","easing","createElement","containerName","ref","defaultProps"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport styled from 'styled-components';\nimport React, { useEffect, useRef } from 'react';\nimport useLayoutEffect from './utils/useIsomorphicLayoutEffect';\nimport { get } from './constants';\nimport { useOverlay } from './hooks';\nimport Portal from './Portal';\nimport sx from './sx';\nimport { useCombinedRefs } from './hooks/useCombinedRefs';\nimport { useTheme } from './ThemeProvider';\nconst heightMap = {\n  xsmall: '192px',\n  small: '256px',\n  medium: '320px',\n  large: '432px',\n  xlarge: '600px',\n  auto: 'auto',\n  initial: 'auto' // Passing 'initial' initially applies 'auto'\n\n};\nconst widthMap = {\n  small: '256px',\n  medium: '320px',\n  large: '480px',\n  xlarge: '640px',\n  xxlarge: '960px',\n  auto: 'auto'\n};\nconst animationDuration = 200;\n\nfunction getSlideAnimationStartingVector(anchorSide) {\n  if (anchorSide !== null && anchorSide !== void 0 && anchorSide.endsWith('bottom')) {\n    return {\n      x: 0,\n      y: -1\n    };\n  } else if (anchorSide !== null && anchorSide !== void 0 && anchorSide.endsWith('top')) {\n    return {\n      x: 0,\n      y: 1\n    };\n  } else if (anchorSide !== null && anchorSide !== void 0 && anchorSide.endsWith('right')) {\n    return {\n      x: -1,\n      y: 0\n    };\n  } else if (anchorSide !== null && anchorSide !== void 0 && anchorSide.endsWith('left')) {\n    return {\n      x: 1,\n      y: 0\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0\n  };\n}\n\nconst StyledOverlay = styled.div.withConfig({\n  displayName: \"Overlay__StyledOverlay\",\n  componentId: \"sc-1mkyld6-0\"\n})([\"background-color:\", \";box-shadow:\", \";position:absolute;min-width:192px;max-width:640px;height:\", \";max-height:\", \";width:\", \";border-radius:12px;overflow:hidden;animation:overlay-appear \", \"ms \", \";@keyframes overlay-appear{0%{opacity:0;}100%{opacity:1;}}visibility:var(--styled-overlay-visibility);:focus{outline:none;}@media (forced-colors:active){outline:solid 1px transparent;}\", \";\"], get('colors.canvas.overlay'), get('shadows.overlay.shadow'), props => heightMap[props.height || 'auto'], props => props.maxHeight && heightMap[props.maxHeight], props => widthMap[props.width || 'auto'], animationDuration, get('animation.easeOutCubic'), sx);\n\n/**\n * An `Overlay` is a flexible floating surface, used to display transient content such as menus,\n * selection options, dialogs, and more. Overlays use shadows to express elevation. The `Overlay`\n * component handles all behaviors needed by overlay UIs as well as the common styles that all overlays * should have.\n * @param ignoreClickRefs Optional. An array of ref objects to ignore clicks on in the `onOutsideClick` behavior. This is often used to ignore clicking on the element that toggles the open/closed state for the `Overlay` to prevent the `Overlay` from being toggled twice.\n * @param initialFocusRef Optional. Ref for the element to focus when the `Overlay` is opened. If nothing is provided, the first focusable element in the `Overlay` body is focused.\n * @param returnFocusRef Required. Ref for the element to focus when the `Overlay` is closed.\n * @param onClickOutside  Required. Function to call when clicking outside of the `Overlay`. Typically this function removes the Overlay.\n * @param onEscape Required. Function to call when user presses `Escape`. Typically this function removes the Overlay.\n * @param width Sets the width of the `Overlay`, pick from our set list of widths, or pass `auto` to automatically set the width based on the content of the `Overlay`. `small` corresponds to `256px`, `medium` corresponds to `320px`, `large` corresponds to `480px`, `xlarge` corresponds to `640px`, `xxlarge` corresponds to `960px`.\n * @param height Sets the height of the `Overlay`, pick from our set list of heights, or pass `auto` to automatically set the height based on the content of the `Overlay`, or pass `initial` to set the height based on the initial content of the `Overlay` (i.e. ignoring content changes). `xsmall` corresponds to `192px`, `small` corresponds to `256px`, `medium` corresponds to `320px`, `large` corresponds to `432px`, `xlarge` corresponds to `600px`.\n * @param maxHeight Sets the maximum height of the `Overlay`, pick from our set list of heights. `xsmall` corresponds to `192px`, `small` corresponds to `256px`, `medium` corresponds to `320px`, `large` corresponds to `432px`, `xlarge` corresponds to `600px`.\n * @param anchorSide If provided, the Overlay will slide into position from the side of the anchor with a brief animation\n * @param top Optional. Vertical position of the overlay, relative to its closest positioned ancestor (often its `Portal`).\n * @param left Optional. Horizontal position of the overlay, relative to its closest positioned ancestor (often its `Portal`).\n * @param portalContainerName Optional. The name of the portal container to render the Overlay into.\n */\nconst Overlay = /*#__PURE__*/React.forwardRef(({\n  onClickOutside,\n  role = 'none',\n  initialFocusRef,\n  returnFocusRef,\n  ignoreClickRefs,\n  onEscape,\n  visibility = 'visible',\n  height,\n  top,\n  left,\n  anchorSide,\n  portalContainerName,\n  preventFocusOnOpen,\n  ...rest\n}, forwardedRef) => {\n  const overlayRef = useRef(null);\n  const combinedRef = useCombinedRefs(overlayRef, forwardedRef);\n  const {\n    theme\n  } = useTheme();\n  const slideAnimationDistance = parseInt(get('space.2')(theme).replace('px', ''));\n  const slideAnimationEasing = get('animation.easeOutCubic')(theme);\n  useOverlay({\n    overlayRef,\n    returnFocusRef,\n    onEscape,\n    ignoreClickRefs,\n    onClickOutside,\n    initialFocusRef,\n    preventFocusOnOpen\n  });\n  useEffect(() => {\n    var _combinedRef$current;\n\n    if (height === 'initial' && (_combinedRef$current = combinedRef.current) !== null && _combinedRef$current !== void 0 && _combinedRef$current.clientHeight) {\n      combinedRef.current.style.height = `${combinedRef.current.clientHeight}px`;\n    }\n  }, [height, combinedRef]);\n  useLayoutEffect(() => {\n    var _overlayRef$current;\n\n    const {\n      x,\n      y\n    } = getSlideAnimationStartingVector(anchorSide);\n\n    if (!x && !y || !((_overlayRef$current = overlayRef.current) !== null && _overlayRef$current !== void 0 && _overlayRef$current.animate) || visibility === 'hidden') {\n      return;\n    } // JS animation is required because Safari does not allow css animations to start paused and then run\n\n\n    overlayRef.current.animate({\n      transform: [`translate(${slideAnimationDistance * x}px, ${slideAnimationDistance * y}px)`, `translate(0, 0)`]\n    }, {\n      duration: animationDuration,\n      easing: slideAnimationEasing\n    });\n  }, [anchorSide, slideAnimationDistance, slideAnimationEasing, visibility]);\n  return /*#__PURE__*/React.createElement(Portal, {\n    containerName: portalContainerName\n  }, /*#__PURE__*/React.createElement(StyledOverlay, _extends({\n    height: height,\n    role: role\n  }, rest, {\n    ref: combinedRef,\n    style: {\n      top: `${top || 0}px`,\n      left: `${left || 0}px`,\n      '--styled-overlay-visibility': visibility\n    }\n  })));\n});\nOverlay.defaultProps = {\n  height: 'auto',\n  width: 'auto'\n};\nexport default Overlay;"]},"metadata":{},"sourceType":"module"}