function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef } from 'react';
import Box from '../Box';
import { merge } from '../sx';
import { useTheme } from '../ThemeProvider';
import { StyledButton } from './types';
import { getVariantStyles, getSizeStyles, getButtonStyles } from './styles';
const ButtonBase = /*#__PURE__*/forwardRef(({
  children,
  as: Component = 'button',
  sx: sxProp = {},
  ...props
}, forwardedRef) => {
  const {
    leadingIcon: LeadingIcon,
    trailingIcon: TrailingIcon,
    variant = 'default',
    size = 'medium'
  } = props;
  const {
    theme
  } = useTheme();
  const iconWrapStyles = {
    display: 'inline-block'
  };
  const sxStyles = merge.all([getButtonStyles(theme), getSizeStyles(size, variant, false), getVariantStyles(variant, theme), sxProp]);
  return /*#__PURE__*/React.createElement(StyledButton, _extends({
    as: Component,
    sx: sxStyles
  }, props, {
    ref: forwardedRef
  }), LeadingIcon && /*#__PURE__*/React.createElement(Box, {
    as: "span",
    "data-component": "leadingIcon",
    sx: iconWrapStyles
  }, /*#__PURE__*/React.createElement(LeadingIcon, null)), children && /*#__PURE__*/React.createElement("span", {
    "data-component": "text"
  }, children), TrailingIcon && /*#__PURE__*/React.createElement(Box, {
    as: "span",
    "data-component": "trailingIcon",
    sx: { ...iconWrapStyles,
      ml: 2
    }
  }, /*#__PURE__*/React.createElement(TrailingIcon, null)));
});
export { ButtonBase };