function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { render, fireEvent } from '@testing-library/react';
import React from 'react';
import { ThemeProvider, SSRProvider } from '..';
import { NavList } from './NavList';
const ReactRouterLikeLink = /*#__PURE__*/React.forwardRef(({
  to,
  ...props
}, ref) => {
  // eslint-disable-next-line jsx-a11y/anchor-has-content
  return /*#__PURE__*/React.createElement("a", _extends({
    ref: ref,
    href: to
  }, props));
});
const NextJSLikeLink = /*#__PURE__*/React.forwardRef(({
  href,
  children
}, ref) => {
  const child = React.Children.only(children);
  const childProps = {
    ref,
    href
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.isValidElement(child) ? /*#__PURE__*/React.cloneElement(child, childProps) : null);
});
describe('NavList', () => {
  it('renders a simple list', () => {
    const {
      container
    } = render( /*#__PURE__*/React.createElement(ThemeProvider, null, /*#__PURE__*/React.createElement(SSRProvider, null, /*#__PURE__*/React.createElement(NavList, null, /*#__PURE__*/React.createElement(NavList.Item, {
      href: "/",
      "aria-current": "page"
    }, "Home"), /*#__PURE__*/React.createElement(NavList.Item, {
      href: "/about"
    }, "About"), /*#__PURE__*/React.createElement(NavList.Item, {
      href: "/contact"
    }, "Contact")))));
    expect(container).toMatchSnapshot();
  });
  it('renders with groups', () => {
    const {
      container
    } = render( /*#__PURE__*/React.createElement(ThemeProvider, null, /*#__PURE__*/React.createElement(SSRProvider, null, /*#__PURE__*/React.createElement(NavList, null, /*#__PURE__*/React.createElement(NavList.Group, {
      title: "Overview"
    }, /*#__PURE__*/React.createElement(NavList.Item, {
      href: "/getting-started",
      "aria-current": "page"
    }, "Getting started")), /*#__PURE__*/React.createElement(NavList.Group, {
      title: "Components"
    }, /*#__PURE__*/React.createElement(NavList.Item, {
      href: "/Avatar"
    }, "Avatar"))))));
    expect(container).toMatchSnapshot();
  });
});
describe('NavList.Item', () => {
  it('passes aria-current prop to the underlying link', () => {
    const {
      getByRole
    } = render( /*#__PURE__*/React.createElement(NavList, null, /*#__PURE__*/React.createElement(NavList.Item, {
      href: "/",
      "aria-current": "page"
    }, "Home"), /*#__PURE__*/React.createElement(NavList.Item, {
      href: "/about"
    }, "About"), /*#__PURE__*/React.createElement(NavList.Item, {
      href: "/contact"
    }, "Contact")));
    const homeLink = getByRole('link', {
      name: 'Home'
    });
    const aboutLink = getByRole('link', {
      name: 'About'
    });
    expect(homeLink).toHaveAttribute('aria-current', 'page');
    expect(aboutLink).not.toHaveAttribute('aria-current');
  });
  it('is compatiable with React-Router-like link components', () => {
    const {
      getByRole
    } = render( /*#__PURE__*/React.createElement(NavList, null, /*#__PURE__*/React.createElement(NavList.Item, {
      as: ReactRouterLikeLink,
      to: '/',
      "aria-current": "page"
    }, "React Router link")));
    const link = getByRole('link', {
      name: 'React Router link'
    });
    expect(link).toHaveAttribute('aria-current', 'page');
    expect(link).toHaveAttribute('href', '/');
  });
  it('is compatible with NextJS-like link components', () => {
    const {
      getByRole
    } = render( /*#__PURE__*/React.createElement(NavList, null, /*#__PURE__*/React.createElement(NextJSLikeLink, {
      href: "/"
    }, /*#__PURE__*/React.createElement(NavList.Item, {
      "aria-current": "page"
    }, "NextJS link"))));
    const link = getByRole('link', {
      name: 'NextJS link'
    });
    expect(link).toHaveAttribute('href', '/');
    expect(link).toHaveAttribute('aria-current', 'page');
  });
});
describe('NavList.Item with NavList.SubNav', () => {
  function NavListWithSubNav() {
    return /*#__PURE__*/React.createElement(NavList, null, /*#__PURE__*/React.createElement(NavList.Item, {
      href: "#"
    }, "Item 1"), /*#__PURE__*/React.createElement(NavList.Item, {
      href: "#"
    }, "Item 2", /*#__PURE__*/React.createElement(NavList.SubNav, null, /*#__PURE__*/React.createElement(NavList.Item, {
      href: "#"
    }, "Sub Item 1"), /*#__PURE__*/React.createElement(NavList.Item, {
      href: "#"
    }, "Sub Item 2"))), /*#__PURE__*/React.createElement(NavList.Item, {
      href: "#"
    }, "Item 3"));
  }

  function NavListWithCurrentSubNav() {
    return /*#__PURE__*/React.createElement(NavList, null, /*#__PURE__*/React.createElement(NavList.Item, {
      href: "#"
    }, "Item 1"), /*#__PURE__*/React.createElement(NavList.Item, {
      href: "#"
    }, "Item 2", /*#__PURE__*/React.createElement(NavList.SubNav, null, /*#__PURE__*/React.createElement(NavList.Item, {
      href: "#",
      "aria-current": "page"
    }, "Sub Item 1"), /*#__PURE__*/React.createElement(NavList.Item, {
      href: "#"
    }, "Sub Item 2"))), /*#__PURE__*/React.createElement(NavList.Item, {
      href: "#"
    }, "Item 3"));
  }

  it('renders as a button', () => {
    const {
      queryByRole
    } = render( /*#__PURE__*/React.createElement(NavListWithSubNav, null));
    const itemWithSubNav = queryByRole('button', {
      name: 'Item 2'
    });
    expect(itemWithSubNav).toBeInTheDocument();
  });
  it('ignores aria-current prop', () => {
    const {
      queryByRole
    } = render( /*#__PURE__*/React.createElement(NavListWithSubNav, null));
    const itemWithSubNav = queryByRole('button', {
      name: 'Item 2'
    });
    expect(itemWithSubNav).not.toHaveAttribute('aria-current');
  });
  it('shows SubNav by default if SubNav contains the current item', () => {
    const {
      queryByRole,
      getByRole
    } = render( /*#__PURE__*/React.createElement(NavListWithCurrentSubNav, null)); // Starts open

    expect(queryByRole('list', {
      name: 'Item 2'
    })).toBeVisible(); // Click to close

    const itemWithSubNav = getByRole('button', {
      name: 'Item 2'
    });
    fireEvent.click(itemWithSubNav);
    expect(queryByRole('list', {
      name: 'Item 2'
    })).toBeNull();
  });
  it('hides SubNav by default if SubNav does not contain the current item', () => {
    const {
      queryByRole
    } = render( /*#__PURE__*/React.createElement(NavListWithSubNav, null));
    const subNav = queryByRole('list', {
      name: 'Item 2'
    });
    expect(subNav).toBeNull();
  });
  it('toggles visiblility of SubNav when clicked', () => {
    const {
      getByRole,
      queryByRole
    } = render( /*#__PURE__*/React.createElement(NavListWithSubNav, null));
    const itemWithSubNav = getByRole('button', {
      name: 'Item 2'
    }); // Starts closed

    expect(queryByRole('list', {
      name: 'Item 2'
    })).toBeNull(); // Click to open

    fireEvent.click(itemWithSubNav);
    expect(queryByRole('list', {
      name: 'Item 2'
    })).toBeVisible(); // Click to close

    fireEvent.click(itemWithSubNav);
    expect(queryByRole('list', {
      name: 'Item 2'
    })).toBeNull();
  });
  it('has active styles if SubNav contains the current item and is closed', () => {
    const {
      container,
      getByRole,
      queryByRole
    } = render( /*#__PURE__*/React.createElement(ThemeProvider, null, /*#__PURE__*/React.createElement(SSRProvider, null, /*#__PURE__*/React.createElement(NavList, null, /*#__PURE__*/React.createElement(NavList.Item, null, "Item", /*#__PURE__*/React.createElement(NavList.SubNav, null, /*#__PURE__*/React.createElement(NavList.Item, {
      href: "#",
      "aria-current": "page"
    }, "Sub Item")))))));
    const button = getByRole('button'); // Starts open

    expect(queryByRole('list', {
      name: 'Item'
    })).toBeVisible(); // Click to close

    fireEvent.click(button);
    expect(queryByRole('list', {
      name: 'Item'
    })).toBeNull(); // Snapshot styles

    expect(container).toMatchSnapshot();
  });
  it('does not have active styles if SubNav contains the current item and is open', () => {
    const {
      container,
      queryByRole
    } = render( /*#__PURE__*/React.createElement(ThemeProvider, null, /*#__PURE__*/React.createElement(SSRProvider, null, /*#__PURE__*/React.createElement(NavList, null, /*#__PURE__*/React.createElement(NavList.Item, null, "Item", /*#__PURE__*/React.createElement(NavList.SubNav, null, /*#__PURE__*/React.createElement(NavList.Item, {
      href: "#",
      "aria-current": "page"
    }, "Sub Item"))))))); // Starts open

    expect(queryByRole('list', {
      name: 'Item'
    })).toBeVisible(); // Snapshot styles

    expect(container).toMatchSnapshot();
  });
  it('prevents multiple levels of nested SubNavs', () => {
    const consoleSpy = jest.spyOn(console, 'error') // Suppress error message in test output
    .mockImplementation(() => null);
    const {
      getByRole
    } = render( /*#__PURE__*/React.createElement(NavList, null, /*#__PURE__*/React.createElement(NavList.Item, null, "Item", /*#__PURE__*/React.createElement(NavList.SubNav, null, /*#__PURE__*/React.createElement(NavList.Item, null, "Sub item", /*#__PURE__*/React.createElement(NavList.SubNav, null, /*#__PURE__*/React.createElement(NavList.Item, {
      href: "#"
    }, "Sub sub item")))))));
    const item = getByRole('button', {
      name: 'Item'
    });
    fireEvent.click(item);
    expect(consoleSpy).toHaveBeenCalled();
  });
  it('is compatiable with React-Router-like link components', () => {
    function NavLink({
      href,
      children
    }) {
      // In a real app, you'd check if the href matches the url of the current page. For testing purposes, we'll use the text of the link to determine if it's current
      const isCurrent = children === 'Current';
      return /*#__PURE__*/React.createElement(NavList.Item, {
        as: ReactRouterLikeLink,
        to: href,
        "aria-current": isCurrent ? 'page' : false
      }, children);
    }

    const {
      queryByRole
    } = render( /*#__PURE__*/React.createElement(NavList, null, /*#__PURE__*/React.createElement(NavLink, {
      href: "/"
    }, "Item 1"), /*#__PURE__*/React.createElement(NavList.Item, null, "Item 2", /*#__PURE__*/React.createElement(NavList.SubNav, null, /*#__PURE__*/React.createElement(NavLink, {
      href: "/sub-item-1"
    }, "Current"), /*#__PURE__*/React.createElement(NavLink, {
      href: "/sub-item-2"
    }, "Sub item 2"))), /*#__PURE__*/React.createElement(NavLink, {
      href: "/"
    }, "Item 3")));
    const currentLink = queryByRole('link', {
      name: 'Current'
    });
    expect(currentLink).toBeVisible();
  });
});