{"ast":null,"code":"import { useCallback, useState } from 'react';\n/**\n * There are some situations where we want to give users the option to control state externally with their own state handlers\n * or default to using internal state handlers. Because of the 'rules-of-hooks', we cannot conditionally make a call to `React.useState`\n * only in the situations where the state is not provided as a prop.\n * This hook aims to encapsulate that logic, so the consumer doesn't need to be concerned with violating `rules-of-hooks`.\n * @param externalState The state to use - if undefined, will use the state from a call to React.useState\n * @param setExternalState The setState to use - if undefined, will use the setState from a call to React.useState\n * @param defaultState The defaultState to use, if using internal state.\n */\n\nexport function useProvidedStateOrCreate(externalState, setExternalState, defaultState) {\n  const [internalState, setInternalState] = useState(defaultState);\n  const state = externalState !== null && externalState !== void 0 ? externalState : internalState;\n  const setState = useCallback(s => {\n    setInternalState(s);\n    if (setExternalState) setExternalState(s);\n  }, [setExternalState]);\n  return [state, setState];\n}","map":{"version":3,"sources":["/Users/steve/Documents/repos/github-notifications/node_modules/@primer/react/lib-esm/hooks/useProvidedStateOrCreate.js"],"names":["useCallback","useState","useProvidedStateOrCreate","externalState","setExternalState","defaultState","internalState","setInternalState","state","setState","s"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,wBAAT,CAAkCC,aAAlC,EAAiDC,gBAAjD,EAAmEC,YAAnE,EAAiF;AACtF,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCN,QAAQ,CAACI,YAAD,CAAlD;AACA,QAAMG,KAAK,GAAGL,aAAa,KAAK,IAAlB,IAA0BA,aAAa,KAAK,KAAK,CAAjD,GAAqDA,aAArD,GAAqEG,aAAnF;AACA,QAAMG,QAAQ,GAAGT,WAAW,CAACU,CAAC,IAAI;AAChCH,IAAAA,gBAAgB,CAACG,CAAD,CAAhB;AACA,QAAIN,gBAAJ,EAAsBA,gBAAgB,CAACM,CAAD,CAAhB;AACvB,GAH2B,EAGzB,CAACN,gBAAD,CAHyB,CAA5B;AAIA,SAAO,CAACI,KAAD,EAAQC,QAAR,CAAP;AACD","sourcesContent":["import { useCallback, useState } from 'react';\n/**\n * There are some situations where we want to give users the option to control state externally with their own state handlers\n * or default to using internal state handlers. Because of the 'rules-of-hooks', we cannot conditionally make a call to `React.useState`\n * only in the situations where the state is not provided as a prop.\n * This hook aims to encapsulate that logic, so the consumer doesn't need to be concerned with violating `rules-of-hooks`.\n * @param externalState The state to use - if undefined, will use the state from a call to React.useState\n * @param setExternalState The setState to use - if undefined, will use the setState from a call to React.useState\n * @param defaultState The defaultState to use, if using internal state.\n */\n\nexport function useProvidedStateOrCreate(externalState, setExternalState, defaultState) {\n  const [internalState, setInternalState] = useState(defaultState);\n  const state = externalState !== null && externalState !== void 0 ? externalState : internalState;\n  const setState = useCallback(s => {\n    setInternalState(s);\n    if (setExternalState) setExternalState(s);\n  }, [setExternalState]);\n  return [state, setState];\n}"]},"metadata":{},"sourceType":"module"}