{"ast":null,"code":"import { useCallback, useEffect } from 'react';\n\nconst noop = () => null;\n\nfunction visible(el) {\n  return !el.hidden && (!el.type || el.type !== 'hidden') && (el.offsetWidth > 0 || el.offsetHeight > 0);\n}\n\nfunction focusable(el) {\n  const inputEl = el;\n  return inputEl.tabIndex >= 0 && !inputEl.disabled && visible(inputEl);\n}\n\nfunction useDialog(_ref) {\n  let {\n    modalRef,\n    overlayRef,\n    isOpen,\n    onDismiss = noop,\n    initialFocusRef,\n    closeButtonRef\n  } = _ref;\n  const onClickOutside = useCallback(e => {\n    if (modalRef.current && overlayRef.current && !modalRef.current.contains(e.target) && overlayRef.current.contains(e.target)) {\n      onDismiss();\n    }\n  }, [onDismiss, modalRef, overlayRef]);\n  useEffect(() => {\n    if (isOpen) {\n      document.addEventListener('click', onClickOutside);\n      return () => {\n        document.removeEventListener('click', onClickOutside);\n      };\n    }\n  }, [isOpen, onClickOutside]);\n  useEffect(() => {\n    if (isOpen) {\n      if (initialFocusRef && initialFocusRef.current) {\n        initialFocusRef.current.focus();\n      } else if (closeButtonRef && closeButtonRef.current) {\n        closeButtonRef.current.focus();\n      }\n    }\n  }, [isOpen, initialFocusRef, closeButtonRef]);\n  const getFocusableItem = useCallback((e, movement) => {\n    if (modalRef.current) {\n      const items = Array.from(modalRef.current.querySelectorAll('*')).filter(focusable);\n      if (items.length === 0) return;\n      e.preventDefault();\n      const focusedElement = document.activeElement;\n\n      if (!focusedElement) {\n        return;\n      }\n\n      const index = items.indexOf(focusedElement);\n      const offsetIndex = index + movement;\n      const fallbackIndex = movement === 1 ? 0 : items.length - 1;\n      const focusableItem = items[offsetIndex] || items[fallbackIndex];\n      return focusableItem;\n    }\n  }, [modalRef]);\n  const handleTab = useCallback(e => {\n    const movement = e.shiftKey ? -1 : 1;\n    const focusableItem = getFocusableItem(e, movement);\n\n    if (!focusableItem) {\n      return;\n    }\n\n    focusableItem.focus();\n  }, [getFocusableItem]);\n  const onKeyDown = useCallback(event => {\n    switch (event.key) {\n      case 'Tab':\n        handleTab(event);\n        break;\n\n      case 'Escape':\n        onDismiss();\n        event.stopPropagation();\n        break;\n    }\n  }, [handleTab, onDismiss]);\n\n  const getDialogProps = () => {\n    return {\n      onKeyDown\n    };\n  };\n\n  return {\n    getDialogProps\n  };\n}\n\nexport default useDialog;","map":{"version":3,"sources":["/Users/steve/Documents/repos/notifications/node_modules/@primer/react/lib-esm/hooks/useDialog.js"],"names":["useCallback","useEffect","noop","visible","el","hidden","type","offsetWidth","offsetHeight","focusable","inputEl","tabIndex","disabled","useDialog","modalRef","overlayRef","isOpen","onDismiss","initialFocusRef","closeButtonRef","onClickOutside","e","current","contains","target","document","addEventListener","removeEventListener","focus","getFocusableItem","movement","items","Array","from","querySelectorAll","filter","length","preventDefault","focusedElement","activeElement","index","indexOf","offsetIndex","fallbackIndex","focusableItem","handleTab","shiftKey","onKeyDown","event","key","stopPropagation","getDialogProps"],"mappings":"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","sourcesContent":["import { useCallback, useEffect } from 'react';\n\nconst noop = () => null;\n\nfunction visible(el) {\n  return !el.hidden && (!el.type || el.type !== 'hidden') && (el.offsetWidth > 0 || el.offsetHeight > 0);\n}\n\nfunction focusable(el) {\n  const inputEl = el;\n  return inputEl.tabIndex >= 0 && !inputEl.disabled && visible(inputEl);\n}\n\nfunction useDialog({\n  modalRef,\n  overlayRef,\n  isOpen,\n  onDismiss = noop,\n  initialFocusRef,\n  closeButtonRef\n}) {\n  const onClickOutside = useCallback(e => {\n    if (modalRef.current && overlayRef.current && !modalRef.current.contains(e.target) && overlayRef.current.contains(e.target)) {\n      onDismiss();\n    }\n  }, [onDismiss, modalRef, overlayRef]);\n  useEffect(() => {\n    if (isOpen) {\n      document.addEventListener('click', onClickOutside);\n      return () => {\n        document.removeEventListener('click', onClickOutside);\n      };\n    }\n  }, [isOpen, onClickOutside]);\n  useEffect(() => {\n    if (isOpen) {\n      if (initialFocusRef && initialFocusRef.current) {\n        initialFocusRef.current.focus();\n      } else if (closeButtonRef && closeButtonRef.current) {\n        closeButtonRef.current.focus();\n      }\n    }\n  }, [isOpen, initialFocusRef, closeButtonRef]);\n  const getFocusableItem = useCallback((e, movement) => {\n    if (modalRef.current) {\n      const items = Array.from(modalRef.current.querySelectorAll('*')).filter(focusable);\n      if (items.length === 0) return;\n      e.preventDefault();\n      const focusedElement = document.activeElement;\n\n      if (!focusedElement) {\n        return;\n      }\n\n      const index = items.indexOf(focusedElement);\n      const offsetIndex = index + movement;\n      const fallbackIndex = movement === 1 ? 0 : items.length - 1;\n      const focusableItem = items[offsetIndex] || items[fallbackIndex];\n      return focusableItem;\n    }\n  }, [modalRef]);\n  const handleTab = useCallback(e => {\n    const movement = e.shiftKey ? -1 : 1;\n    const focusableItem = getFocusableItem(e, movement);\n\n    if (!focusableItem) {\n      return;\n    }\n\n    focusableItem.focus();\n  }, [getFocusableItem]);\n  const onKeyDown = useCallback(event => {\n    switch (event.key) {\n      case 'Tab':\n        handleTab(event);\n        break;\n\n      case 'Escape':\n        onDismiss();\n        event.stopPropagation();\n        break;\n    }\n  }, [handleTab, onDismiss]);\n\n  const getDialogProps = () => {\n    return {\n      onKeyDown\n    };\n  };\n\n  return {\n    getDialogProps\n  };\n}\n\nexport default useDialog;"]},"metadata":{},"sourceType":"module"}