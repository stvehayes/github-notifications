{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { forwardRef } from 'react';\nimport { Box, Button, IconButton, Tooltip } from '.';\nimport { merge } from './sx';\nconst invisibleButtonStyleOverrides = {\n  color: 'fg.default',\n  paddingTop: '2px',\n  paddingRight: '4px',\n  paddingBottom: '2px',\n  paddingLeft: '4px',\n  position: 'relative',\n  '@media (pointer: coarse)': {\n    ':after': {\n      content: '\"\"',\n      position: 'absolute',\n      left: 0,\n      right: 0,\n      transform: 'translateY(-50%)',\n      top: '50%',\n      minHeight: '44px'\n    }\n  }\n};\n\nconst ConditionalTooltip = _ref => {\n  let {\n    'aria-label': ariaLabel,\n    children\n  } = _ref;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, ariaLabel ? /*#__PURE__*/React.createElement(Tooltip, {\n    \"aria-label\": ariaLabel,\n    sx: {\n      /* inline-block is used to ensure the tooltip dimensions don't\n         collapse when being used with `grid` or `inline` children */\n      display: 'inline-block'\n    }\n  }, children) : children);\n};\n\nconst TextInputAction = /*#__PURE__*/forwardRef((_ref2, forwardedRef) => {\n  let {\n    'aria-label': ariaLabel,\n    children,\n    icon,\n    sx: sxProp,\n    variant,\n    ...rest\n  } = _ref2;\n  const sx = variant === 'invisible' ? merge(invisibleButtonStyleOverrides, sxProp || {}) : sxProp || {};\n\n  if (icon && !ariaLabel || !children && !ariaLabel) {\n    // eslint-disable-next-line no-console\n    console.warn('Use the `aria-label` prop to provide an accessible label for assistive technology');\n  }\n\n  return /*#__PURE__*/React.createElement(Box, {\n    as: \"span\",\n    className: \"TextInput-action\",\n    margin: 1\n  }, icon && !children ? /*#__PURE__*/React.createElement(Tooltip, {\n    \"aria-label\": ariaLabel\n  }, /*#__PURE__*/React.createElement(IconButton, _extends({\n    variant: variant,\n    type: \"button\",\n    icon: icon,\n    \"aria-label\": ariaLabel,\n    size: \"small\",\n    sx: sx\n  }, rest, {\n    ref: forwardedRef\n  }))) : /*#__PURE__*/React.createElement(ConditionalTooltip, {\n    \"aria-label\": ariaLabel\n  }, /*#__PURE__*/React.createElement(Button, _extends({\n    variant: variant,\n    size: \"small\",\n    type: \"button\",\n    sx: sx\n  }, rest, {\n    ref: forwardedRef\n  }), children)));\n});\nTextInputAction.defaultProps = {\n  variant: 'invisible'\n};\nexport default TextInputAction;","map":{"version":3,"sources":["/Users/steve/Documents/repos/notifications/node_modules/@primer/react/lib-esm/_TextInputInnerAction.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","React","forwardRef","Box","Button","IconButton","Tooltip","merge","invisibleButtonStyleOverrides","color","paddingTop","paddingRight","paddingBottom","paddingLeft","position","content","left","right","transform","top","minHeight","ConditionalTooltip","ariaLabel","children","createElement","Fragment","sx","display","TextInputAction","forwardedRef","icon","sxProp","variant","rest","console","warn","as","className","margin","type","size","ref","defaultProps"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { forwardRef } from 'react';\nimport { Box, Button, IconButton, Tooltip } from '.';\nimport { merge } from './sx';\nconst invisibleButtonStyleOverrides = {\n  color: 'fg.default',\n  paddingTop: '2px',\n  paddingRight: '4px',\n  paddingBottom: '2px',\n  paddingLeft: '4px',\n  position: 'relative',\n  '@media (pointer: coarse)': {\n    ':after': {\n      content: '\"\"',\n      position: 'absolute',\n      left: 0,\n      right: 0,\n      transform: 'translateY(-50%)',\n      top: '50%',\n      minHeight: '44px'\n    }\n  }\n};\n\nconst ConditionalTooltip = ({\n  'aria-label': ariaLabel,\n  children\n}) => /*#__PURE__*/React.createElement(React.Fragment, null, ariaLabel ? /*#__PURE__*/React.createElement(Tooltip, {\n  \"aria-label\": ariaLabel,\n  sx: {\n    /* inline-block is used to ensure the tooltip dimensions don't\n       collapse when being used with `grid` or `inline` children */\n    display: 'inline-block'\n  }\n}, children) : children);\n\nconst TextInputAction = /*#__PURE__*/forwardRef(({\n  'aria-label': ariaLabel,\n  children,\n  icon,\n  sx: sxProp,\n  variant,\n  ...rest\n}, forwardedRef) => {\n  const sx = variant === 'invisible' ? merge(invisibleButtonStyleOverrides, sxProp || {}) : sxProp || {};\n\n  if (icon && !ariaLabel || !children && !ariaLabel) {\n    // eslint-disable-next-line no-console\n    console.warn('Use the `aria-label` prop to provide an accessible label for assistive technology');\n  }\n\n  return /*#__PURE__*/React.createElement(Box, {\n    as: \"span\",\n    className: \"TextInput-action\",\n    margin: 1\n  }, icon && !children ? /*#__PURE__*/React.createElement(Tooltip, {\n    \"aria-label\": ariaLabel\n  }, /*#__PURE__*/React.createElement(IconButton, _extends({\n    variant: variant,\n    type: \"button\",\n    icon: icon,\n    \"aria-label\": ariaLabel,\n    size: \"small\",\n    sx: sx\n  }, rest, {\n    ref: forwardedRef\n  }))) : /*#__PURE__*/React.createElement(ConditionalTooltip, {\n    \"aria-label\": ariaLabel\n  }, /*#__PURE__*/React.createElement(Button, _extends({\n    variant: variant,\n    size: \"small\",\n    type: \"button\",\n    sx: sx\n  }, rest, {\n    ref: forwardedRef\n  }), children)));\n});\nTextInputAction.defaultProps = {\n  variant: 'invisible'\n};\nexport default TextInputAction;"]},"metadata":{},"sourceType":"module"}