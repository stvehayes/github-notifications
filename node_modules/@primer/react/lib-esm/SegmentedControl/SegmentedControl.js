function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import Button from './SegmentedControlButton';
import SegmentedControlIconButton from './SegmentedControlIconButton';
import { Box, useTheme } from '..';
import { merge } from '../sx';

const getSegmentedControlStyles = props => ({
  // TODO: update color primitive name(s) to use different primitives:
  // - try to use general 'control' primitives (e.g.: https://primer.style/primitives/spacing#ui-control)
  // - when that's not possible, use specific to segmented controls
  backgroundColor: 'switchTrack.bg',
  // TODO: update primitive when it is available
  borderColor: 'border.default',
  borderRadius: 2,
  borderStyle: 'solid',
  borderWidth: 1,
  display: props !== null && props !== void 0 && props.fullWidth ? 'flex' : 'inline-flex',
  height: '32px' // TODO: use primitive `primer.control.medium.size` when it is available

}); // TODO: implement `variant` prop for responsive behavior
// TODO: implement `loading` prop
// TODO: log a warning if no `ariaLabel` or `ariaLabelledBy` prop is passed
// TODO: implement keyboard behavior to move focus using the arrow keys


const Root = ({
  children,
  fullWidth,
  onChange,
  sx: sxProp = {},
  ...rest
}) => {
  const {
    theme
  } = useTheme();
  const selectedChildren = React.Children.toArray(children).map(child => /*#__PURE__*/React.isValidElement(child) && child.props.selected);
  const hasSelectedButton = selectedChildren.some(isSelected => isSelected);
  const selectedIndex = hasSelectedButton ? selectedChildren.indexOf(true) : 0;
  const sx = merge(getSegmentedControlStyles({
    fullWidth
  }), sxProp);
  return /*#__PURE__*/React.createElement(Box, _extends({
    role: "toolbar",
    sx: sx
  }, rest), React.Children.map(children, (child, i) => {
    if ( /*#__PURE__*/React.isValidElement(child)) {
      return /*#__PURE__*/React.cloneElement(child, {
        onClick: onChange ? e => {
          onChange(i);
          child.props.onClick && child.props.onClick(e);
        } : child.props.onClick,
        selected: i === selectedIndex,
        sx: {
          '--separator-color': i === selectedIndex || i === selectedIndex - 1 ? 'transparent' : theme === null || theme === void 0 ? void 0 : theme.colors.border.default
        }
      });
    }
  }));
};

Root.displayName = "Root";
Root.displayName = 'SegmentedControl';
export const SegmentedControl = Object.assign(Root, {
  Button,
  IconButton: SegmentedControlIconButton
});