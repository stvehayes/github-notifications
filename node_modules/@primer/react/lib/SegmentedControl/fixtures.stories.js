"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FullWidth = exports.AssociatedWithALabelAndCaption = exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _ = require("../");

var _2 = require(".");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  title: 'SegmentedControl/fixtures',
  component: _2.SegmentedControl,
  decorators: [Story => {
    return /*#__PURE__*/_react.default.createElement(_.ThemeProvider, null, /*#__PURE__*/_react.default.createElement(_.BaseStyles, null, /*#__PURE__*/_react.default.createElement(Story, null)));
  }]
}; // TODO: make it possible to use FormControl
// - FormControl.Label needs to accept `id` prop
// - FormControl.Label needs to accept a prop that lets it render an element that isn't a `<label>`

exports.default = _default;

const AssociatedWithALabelAndCaption = () => /*#__PURE__*/_react.default.createElement(_.Box, {
  display: "flex"
}, /*#__PURE__*/_react.default.createElement(_.Box, {
  flexGrow: 1
}, /*#__PURE__*/_react.default.createElement(_.Text, {
  fontSize: 2,
  fontWeight: "bold",
  id: "scLabel-vert",
  display: "block"
}, "File view"), /*#__PURE__*/_react.default.createElement(_.Text, {
  color: "fg.subtle",
  fontSize: 1,
  id: "scCaption-vert",
  display: "block"
}, "Change the way the file is viewed")), /*#__PURE__*/_react.default.createElement(_2.SegmentedControl, {
  "aria-labelledby": "scLabel-vert",
  "aria-describedby": "scCaption-vert"
}, /*#__PURE__*/_react.default.createElement(_2.SegmentedControl.Button, {
  selected: true
}, "Preview"), /*#__PURE__*/_react.default.createElement(_2.SegmentedControl.Button, null, "Raw"), /*#__PURE__*/_react.default.createElement(_2.SegmentedControl.Button, null, "Blame")));

exports.AssociatedWithALabelAndCaption = AssociatedWithALabelAndCaption;
AssociatedWithALabelAndCaption.displayName = "AssociatedWithALabelAndCaption";

const FullWidth = () => /*#__PURE__*/_react.default.createElement(_2.SegmentedControl, {
  "aria-label": "File view",
  fullWidth: true
}, /*#__PURE__*/_react.default.createElement(_2.SegmentedControl.Button, {
  selected: true
}, "Preview"), /*#__PURE__*/_react.default.createElement(_2.SegmentedControl.Button, null, "Raw"), /*#__PURE__*/_react.default.createElement(_2.SegmentedControl.Button, null, "Blame"));

exports.FullWidth = FullWidth;
FullWidth.displayName = "FullWidth";