{"ast":null,"code":"import React from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { style } from 'styled-system';\nconst oppositeEdge = {\n  top: 'Bottom',\n  right: 'Left',\n  bottom: 'Top',\n  left: 'Right'\n};\nconst perpendicularEdge = {\n  top: 'Left',\n  right: 'Top',\n  bottom: 'Left',\n  left: 'Top'\n};\n\nfunction getEdgeAlign(location) {\n  const [edge, align] = location.split('-');\n  return [edge, align];\n}\n\nfunction getPosition(edge, align, spacing) {\n  const opposite = oppositeEdge[edge].toLowerCase();\n  const perp = perpendicularEdge[edge].toLowerCase();\n  return {\n    [opposite]: '100%',\n    [align || perp]: align ? spacing : '50%'\n  };\n}\n\nconst getBg = style({\n  prop: 'bg',\n  key: 'colors'\n});\nconst getBorderColor = style({\n  prop: 'borderColor',\n  key: 'colors'\n});\nconst getBorderWidth = style({\n  prop: 'borderWidth',\n  key: 'borderWidths',\n  scale: [0, 1]\n});\n\nfunction Caret(props) {\n  var _props$theme;\n\n  const theme = React.useContext(ThemeContext);\n  const propsWithTheme = { ...props,\n    theme: (_props$theme = props.theme) !== null && _props$theme !== void 0 ? _props$theme : theme\n  };\n  const {\n    bg\n  } = getBg(propsWithTheme);\n  const {\n    borderColor\n  } = getBorderColor(propsWithTheme);\n  const {\n    borderWidth\n  } = getBorderWidth(propsWithTheme);\n  const {\n    size = 8,\n    location = 'bottom'\n  } = props;\n  const [edge, align] = getEdgeAlign(location);\n  const perp = perpendicularEdge[edge]; // note: these arrays represent points in the form [x, y]\n\n  const a = [-size, 0];\n  const b = [0, size];\n  const c = [size, 0]; // spaces are optional in path `d` attribute, and points are\n  // represented in the form `x,y` -- which is what the arrays above\n  // become when stringified!\n\n  const triangle = `M${a}L${b}L${c}L${a}Z`;\n  const line = `M${a}L${b}L${c}`;\n  const transform = {\n    top: `translate(${[size, size * 2]}) rotate(180)`,\n    right: `translate(${[0, size]}) rotate(-90)`,\n    bottom: `translate(${[size, 0]})`,\n    left: `translate(${[size * 2, size]}) rotate(90)`\n  }[edge];\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    width: size * 2,\n    height: size * 2,\n    style: {\n      pointerEvents: 'none',\n      position: 'absolute',\n      ...getPosition(edge, align, size),\n      // if align is set (top|right|bottom|left),\n      // then we don't need an offset margin\n      [`margin${perp}`]: align ? null : -size\n    }\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    transform: transform\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: triangle,\n    fill: bg\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: line,\n    fill: \"none\",\n    stroke: borderColor,\n    strokeWidth: borderWidth\n  })));\n}\n\nCaret.displayName = \"Caret\";\nCaret.locations = ['top', 'top-left', 'top-right', 'right', 'right-top', 'right-bottom', 'bottom', 'bottom-left', 'bottom-right', 'left', 'left-top', 'left-bottom'];\nCaret.defaultProps = {\n  bg: 'canvas.default',\n  borderColor: 'border.default',\n  borderWidth: 1\n};\nexport default Caret;","map":{"version":3,"sources":["/Users/steve/Documents/repos/notifications/node_modules/@primer/react/lib-esm/Caret.js"],"names":["React","ThemeContext","style","oppositeEdge","top","right","bottom","left","perpendicularEdge","getEdgeAlign","location","edge","align","split","getPosition","spacing","opposite","toLowerCase","perp","getBg","prop","key","getBorderColor","getBorderWidth","scale","Caret","props","_props$theme","theme","useContext","propsWithTheme","bg","borderColor","borderWidth","size","a","b","c","triangle","line","transform","createElement","width","height","pointerEvents","position","d","fill","stroke","strokeWidth","displayName","locations","defaultProps"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,GAAG,EAAE,QADc;AAEnBC,EAAAA,KAAK,EAAE,MAFY;AAGnBC,EAAAA,MAAM,EAAE,KAHW;AAInBC,EAAAA,IAAI,EAAE;AAJa,CAArB;AAMA,MAAMC,iBAAiB,GAAG;AACxBJ,EAAAA,GAAG,EAAE,MADmB;AAExBC,EAAAA,KAAK,EAAE,KAFiB;AAGxBC,EAAAA,MAAM,EAAE,MAHgB;AAIxBC,EAAAA,IAAI,EAAE;AAJkB,CAA1B;;AAOA,SAASE,YAAT,CAAsBC,QAAtB,EAAgC;AAC9B,QAAM,CAACC,IAAD,EAAOC,KAAP,IAAgBF,QAAQ,CAACG,KAAT,CAAe,GAAf,CAAtB;AACA,SAAO,CAACF,IAAD,EAAOC,KAAP,CAAP;AACD;;AAED,SAASE,WAAT,CAAqBH,IAArB,EAA2BC,KAA3B,EAAkCG,OAAlC,EAA2C;AACzC,QAAMC,QAAQ,GAAGb,YAAY,CAACQ,IAAD,CAAZ,CAAmBM,WAAnB,EAAjB;AACA,QAAMC,IAAI,GAAGV,iBAAiB,CAACG,IAAD,CAAjB,CAAwBM,WAAxB,EAAb;AACA,SAAO;AACL,KAACD,QAAD,GAAY,MADP;AAEL,KAACJ,KAAK,IAAIM,IAAV,GAAiBN,KAAK,GAAGG,OAAH,GAAa;AAF9B,GAAP;AAID;;AAED,MAAMI,KAAK,GAAGjB,KAAK,CAAC;AAClBkB,EAAAA,IAAI,EAAE,IADY;AAElBC,EAAAA,GAAG,EAAE;AAFa,CAAD,CAAnB;AAIA,MAAMC,cAAc,GAAGpB,KAAK,CAAC;AAC3BkB,EAAAA,IAAI,EAAE,aADqB;AAE3BC,EAAAA,GAAG,EAAE;AAFsB,CAAD,CAA5B;AAIA,MAAME,cAAc,GAAGrB,KAAK,CAAC;AAC3BkB,EAAAA,IAAI,EAAE,aADqB;AAE3BC,EAAAA,GAAG,EAAE,cAFsB;AAG3BG,EAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;AAHoB,CAAD,CAA5B;;AAMA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACpB,MAAIC,YAAJ;;AAEA,QAAMC,KAAK,GAAG5B,KAAK,CAAC6B,UAAN,CAAiB5B,YAAjB,CAAd;AACA,QAAM6B,cAAc,GAAG,EAAE,GAAGJ,KAAL;AACrBE,IAAAA,KAAK,EAAE,CAACD,YAAY,GAAGD,KAAK,CAACE,KAAtB,MAAiC,IAAjC,IAAyCD,YAAY,KAAK,KAAK,CAA/D,GAAmEA,YAAnE,GAAkFC;AADpE,GAAvB;AAGA,QAAM;AACJG,IAAAA;AADI,MAEFZ,KAAK,CAACW,cAAD,CAFT;AAGA,QAAM;AACJE,IAAAA;AADI,MAEFV,cAAc,CAACQ,cAAD,CAFlB;AAGA,QAAM;AACJG,IAAAA;AADI,MAEFV,cAAc,CAACO,cAAD,CAFlB;AAGA,QAAM;AACJI,IAAAA,IAAI,GAAG,CADH;AAEJxB,IAAAA,QAAQ,GAAG;AAFP,MAGFgB,KAHJ;AAIA,QAAM,CAACf,IAAD,EAAOC,KAAP,IAAgBH,YAAY,CAACC,QAAD,CAAlC;AACA,QAAMQ,IAAI,GAAGV,iBAAiB,CAACG,IAAD,CAA9B,CArBoB,CAqBkB;;AAEtC,QAAMwB,CAAC,GAAG,CAAC,CAACD,IAAF,EAAQ,CAAR,CAAV;AACA,QAAME,CAAC,GAAG,CAAC,CAAD,EAAIF,IAAJ,CAAV;AACA,QAAMG,CAAC,GAAG,CAACH,IAAD,EAAO,CAAP,CAAV,CAzBoB,CAyBC;AACrB;AACA;;AAEA,QAAMI,QAAQ,GAAI,IAAGH,CAAE,IAAGC,CAAE,IAAGC,CAAE,IAAGF,CAAE,GAAtC;AACA,QAAMI,IAAI,GAAI,IAAGJ,CAAE,IAAGC,CAAE,IAAGC,CAAE,EAA7B;AACA,QAAMG,SAAS,GAAG;AAChBpC,IAAAA,GAAG,EAAG,aAAY,CAAC8B,IAAD,EAAOA,IAAI,GAAG,CAAd,CAAiB,eADnB;AAEhB7B,IAAAA,KAAK,EAAG,aAAY,CAAC,CAAD,EAAI6B,IAAJ,CAAU,eAFd;AAGhB5B,IAAAA,MAAM,EAAG,aAAY,CAAC4B,IAAD,EAAO,CAAP,CAAU,GAHf;AAIhB3B,IAAAA,IAAI,EAAG,aAAY,CAAC2B,IAAI,GAAG,CAAR,EAAWA,IAAX,CAAiB;AAJpB,IAKhBvB,IALgB,CAAlB;AAMA,SAAO,aAAaX,KAAK,CAACyC,aAAN,CAAoB,KAApB,EAA2B;AAC7CC,IAAAA,KAAK,EAAER,IAAI,GAAG,CAD+B;AAE7CS,IAAAA,MAAM,EAAET,IAAI,GAAG,CAF8B;AAG7ChC,IAAAA,KAAK,EAAE;AACL0C,MAAAA,aAAa,EAAE,MADV;AAELC,MAAAA,QAAQ,EAAE,UAFL;AAGL,SAAG/B,WAAW,CAACH,IAAD,EAAOC,KAAP,EAAcsB,IAAd,CAHT;AAIL;AACA;AACA,OAAE,SAAQhB,IAAK,EAAf,GAAmBN,KAAK,GAAG,IAAH,GAAU,CAACsB;AAN9B;AAHsC,GAA3B,EAWjB,aAAalC,KAAK,CAACyC,aAAN,CAAoB,GAApB,EAAyB;AACvCD,IAAAA,SAAS,EAAEA;AAD4B,GAAzB,EAEb,aAAaxC,KAAK,CAACyC,aAAN,CAAoB,MAApB,EAA4B;AAC1CK,IAAAA,CAAC,EAAER,QADuC;AAE1CS,IAAAA,IAAI,EAAEhB;AAFoC,GAA5B,CAFA,EAKZ,aAAa/B,KAAK,CAACyC,aAAN,CAAoB,MAApB,EAA4B;AAC3CK,IAAAA,CAAC,EAAEP,IADwC;AAE3CQ,IAAAA,IAAI,EAAE,MAFqC;AAG3CC,IAAAA,MAAM,EAAEhB,WAHmC;AAI3CiB,IAAAA,WAAW,EAAEhB;AAJ8B,GAA5B,CALD,CAXI,CAApB;AAsBD;;AAEDR,KAAK,CAACyB,WAAN,GAAoB,OAApB;AACAzB,KAAK,CAAC0B,SAAN,GAAkB,CAAC,KAAD,EAAQ,UAAR,EAAoB,WAApB,EAAiC,OAAjC,EAA0C,WAA1C,EAAuD,cAAvD,EAAuE,QAAvE,EAAiF,aAAjF,EAAgG,cAAhG,EAAgH,MAAhH,EAAwH,UAAxH,EAAoI,aAApI,CAAlB;AACA1B,KAAK,CAAC2B,YAAN,GAAqB;AACnBrB,EAAAA,EAAE,EAAE,gBADe;AAEnBC,EAAAA,WAAW,EAAE,gBAFM;AAGnBC,EAAAA,WAAW,EAAE;AAHM,CAArB;AAKA,eAAeR,KAAf","sourcesContent":["import React from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { style } from 'styled-system';\nconst oppositeEdge = {\n  top: 'Bottom',\n  right: 'Left',\n  bottom: 'Top',\n  left: 'Right'\n};\nconst perpendicularEdge = {\n  top: 'Left',\n  right: 'Top',\n  bottom: 'Left',\n  left: 'Top'\n};\n\nfunction getEdgeAlign(location) {\n  const [edge, align] = location.split('-');\n  return [edge, align];\n}\n\nfunction getPosition(edge, align, spacing) {\n  const opposite = oppositeEdge[edge].toLowerCase();\n  const perp = perpendicularEdge[edge].toLowerCase();\n  return {\n    [opposite]: '100%',\n    [align || perp]: align ? spacing : '50%'\n  };\n}\n\nconst getBg = style({\n  prop: 'bg',\n  key: 'colors'\n});\nconst getBorderColor = style({\n  prop: 'borderColor',\n  key: 'colors'\n});\nconst getBorderWidth = style({\n  prop: 'borderWidth',\n  key: 'borderWidths',\n  scale: [0, 1]\n});\n\nfunction Caret(props) {\n  var _props$theme;\n\n  const theme = React.useContext(ThemeContext);\n  const propsWithTheme = { ...props,\n    theme: (_props$theme = props.theme) !== null && _props$theme !== void 0 ? _props$theme : theme\n  };\n  const {\n    bg\n  } = getBg(propsWithTheme);\n  const {\n    borderColor\n  } = getBorderColor(propsWithTheme);\n  const {\n    borderWidth\n  } = getBorderWidth(propsWithTheme);\n  const {\n    size = 8,\n    location = 'bottom'\n  } = props;\n  const [edge, align] = getEdgeAlign(location);\n  const perp = perpendicularEdge[edge]; // note: these arrays represent points in the form [x, y]\n\n  const a = [-size, 0];\n  const b = [0, size];\n  const c = [size, 0]; // spaces are optional in path `d` attribute, and points are\n  // represented in the form `x,y` -- which is what the arrays above\n  // become when stringified!\n\n  const triangle = `M${a}L${b}L${c}L${a}Z`;\n  const line = `M${a}L${b}L${c}`;\n  const transform = {\n    top: `translate(${[size, size * 2]}) rotate(180)`,\n    right: `translate(${[0, size]}) rotate(-90)`,\n    bottom: `translate(${[size, 0]})`,\n    left: `translate(${[size * 2, size]}) rotate(90)`\n  }[edge];\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    width: size * 2,\n    height: size * 2,\n    style: {\n      pointerEvents: 'none',\n      position: 'absolute',\n      ...getPosition(edge, align, size),\n      // if align is set (top|right|bottom|left),\n      // then we don't need an offset margin\n      [`margin${perp}`]: align ? null : -size\n    }\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    transform: transform\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: triangle,\n    fill: bg\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: line,\n    fill: \"none\",\n    stroke: borderColor,\n    strokeWidth: borderWidth\n  })));\n}\n\nCaret.displayName = \"Caret\";\nCaret.locations = ['top', 'top-left', 'top-right', 'right', 'right-top', 'right-bottom', 'bottom', 'bottom-left', 'bottom-right', 'left', 'left-top', 'left-bottom'];\nCaret.defaultProps = {\n  bg: 'canvas.default',\n  borderColor: 'border.default',\n  borderWidth: 1\n};\nexport default Caret;"]},"metadata":{},"sourceType":"module"}