"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PageLayout = void 0;

var _react = _interopRequireDefault(require("react"));

var _sx = require("../sx");

var _ = require("..");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const REGION_ORDER = {
  header: 0,
  paneStart: 1,
  content: 2,
  paneEnd: 3,
  footer: 4
};
const SPACING_MAP = {
  none: 0,
  condensed: 3,
  normal: [3, null, null, 4]
};

const PageLayoutContext = /*#__PURE__*/_react.default.createContext({
  padding: 'normal',
  rowGap: 'normal',
  columnGap: 'normal'
}); // ----------------------------------------------------------------------------
// PageLayout


const containerWidths = {
  full: '100%',
  medium: '768px',
  large: '1012px',
  xlarge: '1280px'
}; // TODO: refs

const Root = ({
  containerWidth = 'xlarge',
  padding = 'normal',
  rowGap = 'normal',
  columnGap = 'normal',
  children,
  sx = {}
}) => {
  return /*#__PURE__*/_react.default.createElement(PageLayoutContext.Provider, {
    value: {
      padding,
      rowGap,
      columnGap
    }
  }, /*#__PURE__*/_react.default.createElement(_.Box, {
    sx: (0, _sx.merge)({
      padding: SPACING_MAP[padding]
    }, sx)
  }, /*#__PURE__*/_react.default.createElement(_.Box, {
    sx: {
      maxWidth: containerWidths[containerWidth],
      marginX: 'auto',
      display: 'flex',
      flexWrap: 'wrap'
    }
  }, children)));
};

Root.displayName = "Root";
Root.displayName = 'PageLayout'; // ----------------------------------------------------------------------------
// Divider (internal)

const horizontalDividerVariants = {
  none: {
    display: 'none'
  },
  line: {
    display: 'block',
    height: 1,
    backgroundColor: 'border.default'
  },
  filled: {
    display: 'block',
    height: 8,
    backgroundColor: 'canvas.inset',
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    boxShadow: theme => `inset 0 -1px 0 0 ${theme.colors.border.default}, inset 0 1px 0 0 ${theme.colors.border.default}`
  }
};

function negateSpacingValue(value) {
  if (Array.isArray(value)) {
    // Not using recursion to avoid deeply nested arrays
    return value.map(v => v === null ? null : -v);
  }

  return value === null ? null : -value;
}

const HorizontalDivider = ({
  variant = 'none',
  variantWhenNarrow = 'inherit',
  sx = {}
}) => {
  const {
    padding
  } = _react.default.useContext(PageLayoutContext);

  return /*#__PURE__*/_react.default.createElement(_.Box // eslint-disable-next-line @typescript-eslint/no-explicit-any
  , {
    sx: theme => (0, _sx.merge)({
      // Stretch divider to viewport edges on narrow screens
      marginX: negateSpacingValue(SPACING_MAP[padding]),
      ...horizontalDividerVariants[variantWhenNarrow === 'inherit' ? variant : variantWhenNarrow],
      [`@media screen and (min-width: ${theme.breakpoints[1]})`]: {
        marginX: '0 !important',
        ...horizontalDividerVariants[variant]
      }
    }, sx)
  });
};

HorizontalDivider.displayName = "HorizontalDivider";
const verticalDividerVariants = {
  none: {
    display: 'none'
  },
  line: {
    display: 'block',
    width: 1,
    backgroundColor: 'border.default'
  },
  filled: {
    display: 'block',
    width: 8,
    backgroundColor: 'canvas.inset',
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    boxShadow: theme => `inset -1px 0 0 0 ${theme.colors.border.default}, inset 1px 0 0 0 ${theme.colors.border.default}`
  }
};

const VerticalDivider = ({
  variant = 'none',
  variantWhenNarrow = 'inherit',
  sx = {}
}) => {
  return /*#__PURE__*/_react.default.createElement(_.Box // eslint-disable-next-line @typescript-eslint/no-explicit-any
  , {
    sx: theme => (0, _sx.merge)({
      height: '100%',
      ...verticalDividerVariants[variantWhenNarrow === 'inherit' ? variant : variantWhenNarrow],
      [`@media screen and (min-width: ${theme.breakpoints[1]})`]: { ...verticalDividerVariants[variant]
      }
    }, sx)
  });
};

VerticalDivider.displayName = "VerticalDivider";

const Header = ({
  divider = 'none',
  dividerWhenNarrow = 'inherit',
  children,
  sx = {}
}) => {
  const {
    rowGap
  } = _react.default.useContext(PageLayoutContext);

  return /*#__PURE__*/_react.default.createElement(_.Box, {
    as: "header",
    sx: (0, _sx.merge)({
      order: REGION_ORDER.header,
      width: '100%',
      marginBottom: SPACING_MAP[rowGap]
    }, sx)
  }, children, /*#__PURE__*/_react.default.createElement(HorizontalDivider, {
    variant: divider,
    variantWhenNarrow: dividerWhenNarrow,
    sx: {
      marginTop: SPACING_MAP[rowGap]
    }
  }));
};

Header.displayName = "Header";
Header.displayName = 'PageLayout.Header'; // ----------------------------------------------------------------------------
// PageLayout.Content

// TODO: Account for pane width when centering content
const contentWidths = {
  full: '100%',
  medium: '768px',
  large: '1012px',
  xlarge: '1280px'
};

const Content = ({
  width = 'full',
  children,
  sx = {}
}) => {
  return /*#__PURE__*/_react.default.createElement(_.Box, {
    as: "main",
    sx: (0, _sx.merge)({
      order: REGION_ORDER.content,
      // Set flex-basis to 0% to allow flex-grow to control the width of the content region.
      // Without this, the content region could wrap onto a different line
      // than the pane region on wide viewports if its contents are too wide.
      flexBasis: 0,
      flexGrow: 1,
      flexShrink: 1,
      minWidth: 1 // Hack to prevent overflowing content from pushing the pane region to the next line

    }, sx)
  }, /*#__PURE__*/_react.default.createElement(_.Box, {
    sx: {
      width: '100%',
      maxWidth: contentWidths[width],
      marginX: 'auto'
    }
  }, children));
};

Content.displayName = "Content";
Content.displayName = 'PageLayout.Content'; // ----------------------------------------------------------------------------
// PageLayout.Pane

const panePositions = {
  start: REGION_ORDER.paneStart,
  end: REGION_ORDER.paneEnd
};
const paneWidths = {
  small: ['100%', null, '240px', '256px'],
  medium: ['100%', null, '256px', '296px'],
  large: ['100%', null, '256px', '320px', '336px']
};

const Pane = ({
  position = 'end',
  positionWhenNarrow = 'inherit',
  width = 'medium',
  divider = 'none',
  dividerWhenNarrow = 'inherit',
  children,
  sx = {}
}) => {
  const {
    rowGap,
    columnGap
  } = _react.default.useContext(PageLayoutContext);

  const computedPositionWhenNarrow = positionWhenNarrow === 'inherit' ? position : positionWhenNarrow;
  const computedDividerWhenNarrow = dividerWhenNarrow === 'inherit' ? divider : dividerWhenNarrow;
  return /*#__PURE__*/_react.default.createElement(_.Box, {
    as: "aside" // eslint-disable-next-line @typescript-eslint/no-explicit-any
    ,
    sx: theme => (0, _sx.merge)({
      order: panePositions[computedPositionWhenNarrow],
      display: 'flex',
      flexDirection: computedPositionWhenNarrow === 'end' ? 'column' : 'column-reverse',
      width: '100%',
      marginX: 0,
      [computedPositionWhenNarrow === 'end' ? 'marginTop' : 'marginBottom']: SPACING_MAP[rowGap],
      [`@media screen and (min-width: ${theme.breakpoints[1]})`]: {
        width: 'auto',
        [position === 'end' ? 'marginLeft' : 'marginRight']: SPACING_MAP[columnGap],
        marginY: `0 !important`,
        flexDirection: position === 'end' ? 'row' : 'row-reverse',
        order: panePositions[position]
      }
    }, sx)
  }, /*#__PURE__*/_react.default.createElement(HorizontalDivider, {
    variant: "none",
    variantWhenNarrow: computedDividerWhenNarrow,
    sx: {
      [computedPositionWhenNarrow === 'end' ? 'marginBottom' : 'marginTop']: SPACING_MAP[rowGap]
    }
  }), /*#__PURE__*/_react.default.createElement(VerticalDivider, {
    variant: divider,
    variantWhenNarrow: "none",
    sx: {
      [position === 'end' ? 'marginRight' : 'marginLeft']: SPACING_MAP[columnGap]
    }
  }), /*#__PURE__*/_react.default.createElement(_.Box, {
    sx: {
      width: paneWidths[width]
    }
  }, children));
};

Pane.displayName = "Pane";
Pane.displayName = 'PageLayout.Pane'; // ----------------------------------------------------------------------------
// PageLayout.Footer

const Footer = ({
  divider = 'none',
  dividerWhenNarrow = 'inherit',
  children,
  sx = {}
}) => {
  const {
    rowGap
  } = _react.default.useContext(PageLayoutContext);

  return /*#__PURE__*/_react.default.createElement(_.Box, {
    as: "footer",
    sx: (0, _sx.merge)({
      order: REGION_ORDER.footer,
      width: '100%',
      marginTop: SPACING_MAP[rowGap]
    }, sx)
  }, /*#__PURE__*/_react.default.createElement(HorizontalDivider, {
    variant: divider,
    variantWhenNarrow: dividerWhenNarrow,
    sx: {
      marginBottom: SPACING_MAP[rowGap]
    }
  }), children);
};

Footer.displayName = "Footer";
Footer.displayName = 'PageLayout.Footer'; // ----------------------------------------------------------------------------
// Export

const PageLayout = Object.assign(Root, {
  Header,
  Content,
  Pane,
  Footer
});
exports.PageLayout = PageLayout;