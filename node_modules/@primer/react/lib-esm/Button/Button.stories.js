function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { EyeClosedIcon, EyeIcon, SearchIcon, TriangleDownIcon, XIcon } from '@primer/octicons-react';
import React, { useState } from 'react';
import { Button, IconButton } from '.';
import { BaseStyles, ThemeProvider } from '..';
import Box from '../Box';
export default {
  title: 'Composite components/Button',
  decorators: [Story => {
    return /*#__PURE__*/React.createElement(ThemeProvider, null, /*#__PURE__*/React.createElement(BaseStyles, null, /*#__PURE__*/React.createElement(Story, null)));
  }],
  argTypes: {
    size: {
      control: {
        type: 'radio',
        options: ['small', 'medium', 'large']
      }
    },
    disabled: {
      control: {
        type: 'boolean',
        default: false
      }
    }
  }
};
export const defaultButton = args => {
  return /*#__PURE__*/React.createElement(Button, args, "Default");
};
defaultButton.displayName = "defaultButton";
export const primaryButton = args => {
  return /*#__PURE__*/React.createElement(Button, _extends({}, args, {
    variant: "primary"
  }), "Primary");
};
primaryButton.displayName = "primaryButton";
export const dangerButton = args => {
  return /*#__PURE__*/React.createElement(Button, _extends({}, args, {
    variant: "danger"
  }), "Danger");
};
dangerButton.displayName = "dangerButton";
export const invisibleButton = args => {
  return /*#__PURE__*/React.createElement(Button, _extends({}, args, {
    variant: "invisible"
  }), "Invisible");
};
invisibleButton.displayName = "invisibleButton";
export const iconBeforeButton = args => {
  return /*#__PURE__*/React.createElement(Button, _extends({
    leadingIcon: SearchIcon
  }, args), "Before");
};
iconBeforeButton.displayName = "iconBeforeButton";
export const iconButton = ({ ...args
}) => {
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Box, {
    mb: 2
  }, /*#__PURE__*/React.createElement(IconButton, _extends({
    icon: XIcon,
    "aria-label": "Close"
  }, args))), /*#__PURE__*/React.createElement(Box, {
    mb: 2
  }, /*#__PURE__*/React.createElement(IconButton, _extends({
    icon: XIcon,
    "aria-label": "Close"
  }, args, {
    variant: "invisible",
    sx: {
      mt: 2
    }
  }))), /*#__PURE__*/React.createElement(Box, {
    mb: 2
  }, /*#__PURE__*/React.createElement(IconButton, _extends({
    icon: XIcon,
    "aria-label": "Close"
  }, args, {
    variant: "danger"
  }))), /*#__PURE__*/React.createElement(Box, {
    mb: 2
  }, /*#__PURE__*/React.createElement(IconButton, _extends({
    icon: XIcon,
    "aria-label": "Close"
  }, args, {
    variant: "primary"
  }))), /*#__PURE__*/React.createElement(Box, {
    mb: 2
  }, /*#__PURE__*/React.createElement(IconButton, _extends({
    icon: XIcon,
    "aria-label": "Close"
  }, args, {
    variant: "outline"
  }))));
};
export const WatchCounterButton = ({ ...args
}) => {
  const [count, setCount] = useState(0);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Box, {
    mb: 2
  }, /*#__PURE__*/React.createElement(Button, _extends({
    onClick: () => setCount(count + 1)
  }, args), "Watch", /*#__PURE__*/React.createElement(Button.Counter, null, count))), /*#__PURE__*/React.createElement(Box, {
    mb: 2
  }, /*#__PURE__*/React.createElement(Button, _extends({
    onClick: () => setCount(count + 1)
  }, args, {
    variant: "primary"
  }), "Watch", /*#__PURE__*/React.createElement(Button.Counter, null, count))), /*#__PURE__*/React.createElement(Box, {
    mb: 2
  }, /*#__PURE__*/React.createElement(Button, _extends({
    onClick: () => setCount(count + 1)
  }, args, {
    variant: "invisible"
  }), "Watch", /*#__PURE__*/React.createElement(Button.Counter, null, count))), /*#__PURE__*/React.createElement(Box, {
    mb: 2
  }, /*#__PURE__*/React.createElement(Button, _extends({
    onClick: () => setCount(count + 1)
  }, args, {
    variant: "danger"
  }), "Watch", /*#__PURE__*/React.createElement(Button.Counter, null, count))), /*#__PURE__*/React.createElement(Box, {
    mb: 2
  }, /*#__PURE__*/React.createElement(Button, _extends({
    onClick: () => setCount(count + 1)
  }, args, {
    variant: "outline"
  }), "Watch", /*#__PURE__*/React.createElement(Button.Counter, null, count))));
};
export const WatchIconButton = ({ ...args
}) => {
  const [watching, setWatching] = useState(false);
  const icon = watching ? EyeClosedIcon : () => /*#__PURE__*/React.createElement(EyeIcon, null);
  return /*#__PURE__*/React.createElement(Button, _extends({
    onClick: () => setWatching(!watching),
    trailingIcon: icon
  }, args), "Watch");
};
WatchIconButton.displayName = "WatchIconButton";
export const caretButton = ({ ...args
}) => {
  return /*#__PURE__*/React.createElement(Button, _extends({
    trailingIcon: TriangleDownIcon
  }, args), "Dropdown");
};
caretButton.displayName = "caretButton";
export const blockButton = ({ ...args
}) => {
  return /*#__PURE__*/React.createElement(Button, _extends({}, args, {
    sx: {
      width: '100%'
    }
  }), "Block");
};
blockButton.displayName = "blockButton";
export const DisabledButton = ({ ...args
}) => {
  const [count, setCount] = useState(0);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Box, {
    mb: 2
  }, /*#__PURE__*/React.createElement(Button, _extends({
    disabled: true,
    onClick: () => setCount(count + 1)
  }, args), "Watch", /*#__PURE__*/React.createElement(Button.Counter, null, count))), /*#__PURE__*/React.createElement(Box, {
    mb: 2
  }, /*#__PURE__*/React.createElement(Button, _extends({
    disabled: true
  }, args), "Disabled")), /*#__PURE__*/React.createElement(Box, {
    mb: 2
  }, /*#__PURE__*/React.createElement(Button, _extends({
    disabled: true,
    variant: "danger"
  }, args), "Disabled")), /*#__PURE__*/React.createElement(Box, {
    mb: 2
  }, /*#__PURE__*/React.createElement(Button, _extends({
    disabled: true,
    variant: "invisible"
  }, args), "Disabled")), /*#__PURE__*/React.createElement(Box, {
    mb: 2
  }, /*#__PURE__*/React.createElement(Button, _extends({
    disabled: true,
    variant: "primary"
  }, args), "Disabled")), /*#__PURE__*/React.createElement(Box, {
    mb: 2
  }, /*#__PURE__*/React.createElement(Button, _extends({
    disabled: true,
    variant: "outline"
  }, args), "Disabled")), /*#__PURE__*/React.createElement(Box, {
    mb: 2
  }, /*#__PURE__*/React.createElement(IconButton, _extends({
    disabled: true,
    icon: () => /*#__PURE__*/React.createElement(XIcon, null),
    "aria-label": "Close"
  }, args))));
}; // type ReactRouterLikeLinkProps = {to: string; children: React.ReactNode}
// const ReactRouterLikeLink = forwardRef<HTMLAnchorElement, ReactRouterLikeLinkProps>(
//   ({to, ...props}: {to: string; children: React.ReactNode}, ref) => {
//     // eslint-disable-next-line jsx-a11y/anchor-has-content
//     return <a ref={ref} href={to} {...props} />
//   }
// )
// export const linkButton = ({...args}: ButtonProps) => {
//   return (
//     <>
//       <Box mb={2} display="flex">
//         <LinkButton href="https://primer.style/" {...args}>
//           Link to Primer
//         </LinkButton>
//       </Box>
//       <Box mb={2} display="flex">
//         <LinkButton href="https://primer.style/" variant="danger" {...args}>
//           Link to Primer
//         </LinkButton>
//       </Box>
//       <Box mb={2} display="flex">
//         <LinkButton href="https://primer.style/" variant="primary" {...args}>
//           Link to Primer
//         </LinkButton>
//       </Box>
//       <Box mb={2} display="flex">
//         <LinkButton href="https://primer.style/" variant="outline" {...args}>
//           Link to Primer
//         </LinkButton>
//       </Box>
//       <Box mb={2} display="flex">
//         <LinkButton href="https://primer.style/" variant="invisible" {...args}>
//           Link to Primer
//         </LinkButton>
//       </Box>
//       <Box mb={2} display="flex">
//         <LinkButton href="https://primer.style/" variant="primary" trailingIcon={TriangleRightIcon} {...args}>
//           Link to Primer
//         </LinkButton>
//       </Box>
//       <Box mb={2} display="flex">
//         <LinkButton to="/dummy" as={ReactRouterLikeLink} variant="primary" trailingIcon={TriangleRightIcon} {...args}>
//           Link to Primer
//         </LinkButton>
//       </Box>
//     </>
//   )
// }