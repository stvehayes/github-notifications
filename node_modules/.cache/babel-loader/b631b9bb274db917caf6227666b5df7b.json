{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport sx from './sx';\nconst sizeMap = {\n  small: '16px',\n  medium: '32px',\n  large: '64px'\n};\n\nfunction Spinner(_ref) {\n  let {\n    size: sizeKey = 'medium',\n    ...props\n  } = _ref;\n  const size = sizeMap[sizeKey];\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    height: size,\n    width: size,\n    viewBox: \"0 0 16 16\",\n    fill: \"none\"\n  }, props), /*#__PURE__*/React.createElement(\"circle\", {\n    cx: \"8\",\n    cy: \"8\",\n    r: \"7\",\n    stroke: \"currentColor\",\n    strokeOpacity: \"0.25\",\n    strokeWidth: \"2\",\n    vectorEffect: \"non-scaling-stroke\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M15 8a7.002 7.002 0 00-7-7\",\n    stroke: \"currentColor\",\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    vectorEffect: \"non-scaling-stroke\"\n  }));\n}\n\nSpinner.displayName = \"Spinner\";\nconst StyledSpinner = styled(Spinner).withConfig({\n  displayName: \"Spinner__StyledSpinner\",\n  componentId: \"sc-1dxfx1i-0\"\n})([\"@keyframes rotate-keyframes{100%{transform:rotate(360deg);}}animation:rotate-keyframes 1s linear infinite;\", \"\"], sx);\nStyledSpinner.displayName = 'Spinner';\nexport default StyledSpinner;","map":{"version":3,"sources":["/Users/steve/Documents/repos/github-notifications/node_modules/@primer/react/lib-esm/Spinner.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","React","styled","sx","sizeMap","small","medium","large","Spinner","size","sizeKey","props","createElement","height","width","viewBox","fill","cx","cy","r","stroke","strokeOpacity","strokeWidth","vectorEffect","d","strokeLinecap","displayName","StyledSpinner","withConfig","componentId"],"mappings":"AAAA,SAASA,QAAT,GAAoB;AAAEA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAAUC,MAAV,EAAkB;AAAE,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,UAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAtB;;AAA2B,WAAK,IAAII,GAAT,IAAgBD,MAAhB,EAAwB;AAAE,YAAIN,MAAM,CAACQ,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CC,GAA7C,CAAJ,EAAuD;AAAEL,UAAAA,MAAM,CAACK,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAApB;AAA4B;AAAE;AAAE;;AAAC,WAAOL,MAAP;AAAgB,GAA5P;;AAA8P,SAAOH,QAAQ,CAACY,KAAT,CAAe,IAAf,EAAqBP,SAArB,CAAP;AAAyC;;AAE7T,OAAOQ,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,EAAP,MAAe,MAAf;AACA,MAAMC,OAAO,GAAG;AACdC,EAAAA,KAAK,EAAE,MADO;AAEdC,EAAAA,MAAM,EAAE,MAFM;AAGdC,EAAAA,KAAK,EAAE;AAHO,CAAhB;;AAMA,SAASC,OAAT,OAGG;AAAA,MAHc;AACfC,IAAAA,IAAI,EAAEC,OAAO,GAAG,QADD;AAEf,OAAGC;AAFY,GAGd;AACD,QAAMF,IAAI,GAAGL,OAAO,CAACM,OAAD,CAApB;AACA,SAAO,aAAaT,KAAK,CAACW,aAAN,CAAoB,KAApB,EAA2BxB,QAAQ,CAAC;AACtDyB,IAAAA,MAAM,EAAEJ,IAD8C;AAEtDK,IAAAA,KAAK,EAAEL,IAF+C;AAGtDM,IAAAA,OAAO,EAAE,WAH6C;AAItDC,IAAAA,IAAI,EAAE;AAJgD,GAAD,EAKpDL,KALoD,CAAnC,EAKT,aAAaV,KAAK,CAACW,aAAN,CAAoB,QAApB,EAA8B;AACpDK,IAAAA,EAAE,EAAE,GADgD;AAEpDC,IAAAA,EAAE,EAAE,GAFgD;AAGpDC,IAAAA,CAAC,EAAE,GAHiD;AAIpDC,IAAAA,MAAM,EAAE,cAJ4C;AAKpDC,IAAAA,aAAa,EAAE,MALqC;AAMpDC,IAAAA,WAAW,EAAE,GANuC;AAOpDC,IAAAA,YAAY,EAAE;AAPsC,GAA9B,CALJ,EAahB,aAAatB,KAAK,CAACW,aAAN,CAAoB,MAApB,EAA4B;AAC3CY,IAAAA,CAAC,EAAE,4BADwC;AAE3CJ,IAAAA,MAAM,EAAE,cAFmC;AAG3CE,IAAAA,WAAW,EAAE,GAH8B;AAI3CG,IAAAA,aAAa,EAAE,OAJ4B;AAK3CF,IAAAA,YAAY,EAAE;AAL6B,GAA5B,CAbG,CAApB;AAoBD;;AAEDf,OAAO,CAACkB,WAAR,GAAsB,SAAtB;AACA,MAAMC,aAAa,GAAGzB,MAAM,CAACM,OAAD,CAAN,CAAgBoB,UAAhB,CAA2B;AAC/CF,EAAAA,WAAW,EAAE,wBADkC;AAE/CG,EAAAA,WAAW,EAAE;AAFkC,CAA3B,EAGnB,CAAC,4GAAD,EAA+G,EAA/G,CAHmB,EAGiG1B,EAHjG,CAAtB;AAIAwB,aAAa,CAACD,WAAd,GAA4B,SAA5B;AACA,eAAeC,aAAf","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport sx from './sx';\nconst sizeMap = {\n  small: '16px',\n  medium: '32px',\n  large: '64px'\n};\n\nfunction Spinner({\n  size: sizeKey = 'medium',\n  ...props\n}) {\n  const size = sizeMap[sizeKey];\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    height: size,\n    width: size,\n    viewBox: \"0 0 16 16\",\n    fill: \"none\"\n  }, props), /*#__PURE__*/React.createElement(\"circle\", {\n    cx: \"8\",\n    cy: \"8\",\n    r: \"7\",\n    stroke: \"currentColor\",\n    strokeOpacity: \"0.25\",\n    strokeWidth: \"2\",\n    vectorEffect: \"non-scaling-stroke\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M15 8a7.002 7.002 0 00-7-7\",\n    stroke: \"currentColor\",\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    vectorEffect: \"non-scaling-stroke\"\n  }));\n}\n\nSpinner.displayName = \"Spinner\";\nconst StyledSpinner = styled(Spinner).withConfig({\n  displayName: \"Spinner__StyledSpinner\",\n  componentId: \"sc-1dxfx1i-0\"\n})([\"@keyframes rotate-keyframes{100%{transform:rotate(360deg);}}animation:rotate-keyframes 1s linear infinite;\", \"\"], sx);\nStyledSpinner.displayName = 'Spinner';\nexport default StyledSpinner;"]},"metadata":{},"sourceType":"module"}