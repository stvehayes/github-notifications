"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _ = require("..");

var _constants = require("../constants");

var _slots = require("./InputField/slots");

var _ChoiceInputLeadingVisual = _interopRequireDefault(require("./_ChoiceInputLeadingVisual"));

var _InputField = _interopRequireDefault(require("./InputField/InputField"));

var _InputFieldCaption = _interopRequireDefault(require("./InputField/_InputFieldCaption"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const getInputToRender = (inputType, children) => {
  const inputComponentMap = {
    radio: _.Radio,
    checkbox: _.Checkbox
  };
  return _react.default.Children.toArray(children).find(child => /*#__PURE__*/_react.default.isValidElement(child) && child.type === inputComponentMap[inputType] ? child : null);
};

const ChoiceInputField = ({
  children,
  disabled,
  id: idProp,
  validationStatus
}) => {
  var _React$Children$map;

  const id = (0, _.useSSRSafeId)(idProp);
  const captionChildren = (_React$Children$map = _react.default.Children.map(children, child => /*#__PURE__*/_react.default.isValidElement(child) && child.type === _InputFieldCaption.default ? child : null)) === null || _React$Children$map === void 0 ? void 0 : _React$Children$map.filter(Boolean);
  const captionId = captionChildren !== null && captionChildren !== void 0 && captionChildren.length ? `${id}-caption` : undefined;
  const inputType = _react.default.Children.toArray(children).some(child => /*#__PURE__*/_react.default.isValidElement(child) ? child.type === _.Checkbox : false) ? 'checkbox' : 'radio';
  const ChoiceInput = getInputToRender(inputType, children);
  const choiceInputProps = /*#__PURE__*/_react.default.isValidElement(ChoiceInput) ? ChoiceInput.props : undefined;

  if (!ChoiceInput) {
    // eslint-disable-next-line no-console
    console.warn('To correctly render this field with the correct ARIA attributes passed to the input, please pass the Checkbox or Radio component from @primer/react as a direct child of the ChoiceInputField component');
  } else {
    if (choiceInputProps !== null && choiceInputProps !== void 0 && choiceInputProps.id) {
      // eslint-disable-next-line no-console
      console.warn(`instead of passing the 'id' prop directly to the ${inputType} input, it should be passed to the parent component, <ChoiceInputField>`);
    }

    if (choiceInputProps !== null && choiceInputProps !== void 0 && choiceInputProps.disabled) {
      // eslint-disable-next-line no-console
      console.warn(`instead of passing the 'disabled' prop directly to the ${inputType} input, it should be passed to the parent component, <ChoiceInputField>`);
    }

    if (choiceInputProps !== null && choiceInputProps !== void 0 && choiceInputProps.required) {
      // eslint-disable-next-line no-console
      console.warn(`instead of passing the 'required' prop directly to the ${inputType} input, it should be passed to the parent component, <ChoiceInputField>`);
    }
  }

  return /*#__PURE__*/_react.default.createElement(_slots.Slots, {
    context: {
      captionId,
      disabled,
      id,
      validationStatus
    }
  }, slots => {
    return /*#__PURE__*/_react.default.createElement(_.Box, {
      display: "flex",
      alignItems: slots.LeadingVisual ? 'center' : undefined
    }, /*#__PURE__*/_react.default.createElement(_.Box, {
      sx: {
        '> input': {
          marginLeft: 0,
          marginRight: 0
        }
      }
    }, /*#__PURE__*/_react.default.isValidElement(ChoiceInput) && /*#__PURE__*/_react.default.cloneElement(ChoiceInput, {
      id,
      disabled,
      ['aria-describedby']: captionId
    }), _react.default.Children.toArray(children).filter(child => /*#__PURE__*/_react.default.isValidElement(child) && ![_.Checkbox, _.Radio].some(inputComponent => child.type === inputComponent))), slots.LeadingVisual && /*#__PURE__*/_react.default.createElement(_.Box, {
      color: disabled ? 'fg.muted' : 'fg.default',
      sx: {
        '> *': {
          minWidth: slots.Caption ? (0, _constants.get)('fontSizes.4') : (0, _constants.get)('fontSizes.2'),
          minHeight: slots.Caption ? (0, _constants.get)('fontSizes.4') : (0, _constants.get)('fontSizes.2'),
          fill: 'currentColor'
        }
      },
      ml: 2
    }, slots.LeadingVisual), /*#__PURE__*/_react.default.isValidElement(slots.Label) && !slots.Label.props.visuallyHidden || slots.Caption ? /*#__PURE__*/_react.default.createElement(_.Box, {
      display: "flex",
      flexDirection: "column",
      ml: 2
    }, slots.Label, slots.Caption) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, slots.Label, slots.Caption));
  });
};

ChoiceInputField.displayName = "ChoiceInputField";

const Label = ({
  children
}) => /*#__PURE__*/_react.default.createElement(_InputField.default.Label, null, children);

Label.displayName = "Label";

/**
 * @deprecated Use `FormControl` instead. See https://primer.style/react/FormControl for more info
 */
var _default = Object.assign(ChoiceInputField, {
  Label,
  Caption: _InputField.default.Caption,
  LeadingVisual: _ChoiceInputLeadingVisual.default
});

exports.default = _default;