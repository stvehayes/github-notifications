{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useCallback, useMemo } from 'react';\nimport { FilteredActionList } from '../FilteredActionList';\nimport { DropdownButton } from '../deprecated/DropdownMenu';\nimport { AnchoredOverlay } from '../AnchoredOverlay';\nimport { useProvidedStateOrCreate } from '../hooks/useProvidedStateOrCreate';\nimport { useProvidedRefOrCreate } from '../hooks';\n\nfunction isMultiSelectVariant(selected) {\n  return Array.isArray(selected);\n}\n\nconst focusZoneSettings = {\n  // Let FilteredActionList handle focus zone\n  disabled: true\n};\nexport function SelectPanel(_ref) {\n  let {\n    open,\n    onOpenChange,\n    renderAnchor = props => /*#__PURE__*/React.createElement(DropdownButton, props),\n    anchorRef: externalAnchorRef,\n    placeholder,\n    selected,\n    onSelectedChange,\n    filterValue: externalFilterValue,\n    onFilterChange: externalOnFilterChange,\n    items,\n    textInputProps,\n    overlayProps,\n    sx,\n    ...listProps\n  } = _ref;\n  const [filterValue, setInternalFilterValue] = useProvidedStateOrCreate(externalFilterValue, undefined, '');\n  const onFilterChange = useCallback((value, e) => {\n    externalOnFilterChange(value, e);\n    setInternalFilterValue(value);\n  }, [externalOnFilterChange, setInternalFilterValue]);\n  const anchorRef = useProvidedRefOrCreate(externalAnchorRef);\n  const onOpen = useCallback(gesture => onOpenChange(true, gesture), [onOpenChange]);\n  const onClose = useCallback(gesture => {\n    onOpenChange(false, gesture);\n  }, [onOpenChange]);\n  const renderMenuAnchor = useMemo(() => {\n    if (renderAnchor === null) {\n      return null;\n    }\n\n    const selectedItems = Array.isArray(selected) ? selected : [...(selected ? [selected] : [])];\n    return props => {\n      return renderAnchor({ ...props,\n        children: selectedItems.length ? selectedItems.map(item => item.text).join(', ') : placeholder\n      });\n    };\n  }, [placeholder, renderAnchor, selected]);\n  const itemsToRender = useMemo(() => {\n    return items.map(item => {\n      const isItemSelected = isMultiSelectVariant(selected) ? selected.includes(item) : selected === item;\n      return { ...item,\n        role: 'option',\n        selected: 'selected' in item && item.selected === undefined ? undefined : isItemSelected,\n        onAction: (itemFromAction, event) => {\n          var _item$onAction;\n\n          (_item$onAction = item.onAction) === null || _item$onAction === void 0 ? void 0 : _item$onAction.call(item, itemFromAction, event);\n\n          if (event.defaultPrevented) {\n            return;\n          }\n\n          if (isMultiSelectVariant(selected)) {\n            const otherSelectedItems = selected.filter(selectedItem => selectedItem !== item);\n            const newSelectedItems = selected.includes(item) ? otherSelectedItems : [...otherSelectedItems, item];\n            const multiSelectOnChange = onSelectedChange;\n            multiSelectOnChange(newSelectedItems);\n            return;\n          } // single select\n\n\n          const singleSelectOnChange = onSelectedChange;\n          singleSelectOnChange(item === selected ? undefined : item);\n          onClose('selection');\n        }\n      };\n    });\n  }, [onClose, onSelectedChange, items, selected]);\n  const inputRef = React.useRef(null);\n  const focusTrapSettings = {\n    initialFocusRef: inputRef\n  };\n  const extendedTextInputProps = useMemo(() => {\n    return {\n      sx: {\n        m: 2\n      },\n      contrast: true,\n      ...textInputProps\n    };\n  }, [textInputProps]);\n  return /*#__PURE__*/React.createElement(AnchoredOverlay, {\n    renderAnchor: renderMenuAnchor,\n    anchorRef: anchorRef,\n    open: open,\n    onOpen: onOpen,\n    onClose: onClose,\n    overlayProps: overlayProps,\n    focusTrapSettings: focusTrapSettings,\n    focusZoneSettings: focusZoneSettings\n  }, /*#__PURE__*/React.createElement(FilteredActionList, _extends({\n    filterValue: filterValue,\n    onFilterChange: onFilterChange\n  }, listProps, {\n    role: \"listbox\",\n    \"aria-multiselectable\": isMultiSelectVariant(selected) ? 'true' : 'false',\n    selectionVariant: isMultiSelectVariant(selected) ? 'multiple' : 'single',\n    items: itemsToRender,\n    textInputProps: extendedTextInputProps,\n    inputRef: inputRef // inheriting height and maxHeight ensures that the FilteredActionList is never taller\n    // than the Overlay (which would break scrolling the items)\n    ,\n    sx: { ...sx,\n      height: 'inherit',\n      maxHeight: 'inherit'\n    }\n  })));\n}\nSelectPanel.displayName = \"SelectPanel\";\nSelectPanel.displayName = 'SelectPanel';","map":{"version":3,"sources":["/Users/steve/Documents/repos/github-notifications/node_modules/@primer/react/lib-esm/SelectPanel/SelectPanel.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","React","useCallback","useMemo","FilteredActionList","DropdownButton","AnchoredOverlay","useProvidedStateOrCreate","useProvidedRefOrCreate","isMultiSelectVariant","selected","Array","isArray","focusZoneSettings","disabled","SelectPanel","open","onOpenChange","renderAnchor","props","createElement","anchorRef","externalAnchorRef","placeholder","onSelectedChange","filterValue","externalFilterValue","onFilterChange","externalOnFilterChange","items","textInputProps","overlayProps","sx","listProps","setInternalFilterValue","undefined","value","e","onOpen","gesture","onClose","renderMenuAnchor","selectedItems","children","map","item","text","join","itemsToRender","isItemSelected","includes","role","onAction","itemFromAction","event","_item$onAction","defaultPrevented","otherSelectedItems","filter","selectedItem","newSelectedItems","multiSelectOnChange","singleSelectOnChange","inputRef","useRef","focusTrapSettings","initialFocusRef","extendedTextInputProps","m","contrast","selectionVariant","height","maxHeight","displayName"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useCallback, useMemo } from 'react';\nimport { FilteredActionList } from '../FilteredActionList';\nimport { DropdownButton } from '../deprecated/DropdownMenu';\nimport { AnchoredOverlay } from '../AnchoredOverlay';\nimport { useProvidedStateOrCreate } from '../hooks/useProvidedStateOrCreate';\nimport { useProvidedRefOrCreate } from '../hooks';\n\nfunction isMultiSelectVariant(selected) {\n  return Array.isArray(selected);\n}\n\nconst focusZoneSettings = {\n  // Let FilteredActionList handle focus zone\n  disabled: true\n};\nexport function SelectPanel({\n  open,\n  onOpenChange,\n  renderAnchor = props => /*#__PURE__*/React.createElement(DropdownButton, props),\n  anchorRef: externalAnchorRef,\n  placeholder,\n  selected,\n  onSelectedChange,\n  filterValue: externalFilterValue,\n  onFilterChange: externalOnFilterChange,\n  items,\n  textInputProps,\n  overlayProps,\n  sx,\n  ...listProps\n}) {\n  const [filterValue, setInternalFilterValue] = useProvidedStateOrCreate(externalFilterValue, undefined, '');\n  const onFilterChange = useCallback((value, e) => {\n    externalOnFilterChange(value, e);\n    setInternalFilterValue(value);\n  }, [externalOnFilterChange, setInternalFilterValue]);\n  const anchorRef = useProvidedRefOrCreate(externalAnchorRef);\n  const onOpen = useCallback(gesture => onOpenChange(true, gesture), [onOpenChange]);\n  const onClose = useCallback(gesture => {\n    onOpenChange(false, gesture);\n  }, [onOpenChange]);\n  const renderMenuAnchor = useMemo(() => {\n    if (renderAnchor === null) {\n      return null;\n    }\n\n    const selectedItems = Array.isArray(selected) ? selected : [...(selected ? [selected] : [])];\n    return props => {\n      return renderAnchor({ ...props,\n        children: selectedItems.length ? selectedItems.map(item => item.text).join(', ') : placeholder\n      });\n    };\n  }, [placeholder, renderAnchor, selected]);\n  const itemsToRender = useMemo(() => {\n    return items.map(item => {\n      const isItemSelected = isMultiSelectVariant(selected) ? selected.includes(item) : selected === item;\n      return { ...item,\n        role: 'option',\n        selected: 'selected' in item && item.selected === undefined ? undefined : isItemSelected,\n        onAction: (itemFromAction, event) => {\n          var _item$onAction;\n\n          (_item$onAction = item.onAction) === null || _item$onAction === void 0 ? void 0 : _item$onAction.call(item, itemFromAction, event);\n\n          if (event.defaultPrevented) {\n            return;\n          }\n\n          if (isMultiSelectVariant(selected)) {\n            const otherSelectedItems = selected.filter(selectedItem => selectedItem !== item);\n            const newSelectedItems = selected.includes(item) ? otherSelectedItems : [...otherSelectedItems, item];\n            const multiSelectOnChange = onSelectedChange;\n            multiSelectOnChange(newSelectedItems);\n            return;\n          } // single select\n\n\n          const singleSelectOnChange = onSelectedChange;\n          singleSelectOnChange(item === selected ? undefined : item);\n          onClose('selection');\n        }\n      };\n    });\n  }, [onClose, onSelectedChange, items, selected]);\n  const inputRef = React.useRef(null);\n  const focusTrapSettings = {\n    initialFocusRef: inputRef\n  };\n  const extendedTextInputProps = useMemo(() => {\n    return {\n      sx: {\n        m: 2\n      },\n      contrast: true,\n      ...textInputProps\n    };\n  }, [textInputProps]);\n  return /*#__PURE__*/React.createElement(AnchoredOverlay, {\n    renderAnchor: renderMenuAnchor,\n    anchorRef: anchorRef,\n    open: open,\n    onOpen: onOpen,\n    onClose: onClose,\n    overlayProps: overlayProps,\n    focusTrapSettings: focusTrapSettings,\n    focusZoneSettings: focusZoneSettings\n  }, /*#__PURE__*/React.createElement(FilteredActionList, _extends({\n    filterValue: filterValue,\n    onFilterChange: onFilterChange\n  }, listProps, {\n    role: \"listbox\",\n    \"aria-multiselectable\": isMultiSelectVariant(selected) ? 'true' : 'false',\n    selectionVariant: isMultiSelectVariant(selected) ? 'multiple' : 'single',\n    items: itemsToRender,\n    textInputProps: extendedTextInputProps,\n    inputRef: inputRef // inheriting height and maxHeight ensures that the FilteredActionList is never taller\n    // than the Overlay (which would break scrolling the items)\n    ,\n    sx: { ...sx,\n      height: 'inherit',\n      maxHeight: 'inherit'\n    }\n  })));\n}\nSelectPanel.displayName = \"SelectPanel\";\nSelectPanel.displayName = 'SelectPanel';"]},"metadata":{},"sourceType":"module"}