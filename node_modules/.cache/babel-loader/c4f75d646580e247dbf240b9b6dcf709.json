{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useCallback, useEffect } from 'react';\nimport Overlay from '../Overlay';\nimport { useFocusTrap } from '../hooks/useFocusTrap';\nimport { useFocusZone } from '../hooks/useFocusZone';\nimport { useAnchoredPosition, useProvidedRefOrCreate, useRenderForcingRef } from '../hooks';\nimport { useSSRSafeId } from '@react-aria/ssr';\n/**\n * An `AnchoredOverlay` provides an anchor that will open a floating overlay positioned relative to the anchor.\n * The overlay can be opened and navigated using keyboard or mouse.\n */\n\nexport const AnchoredOverlay = _ref => {\n  let {\n    renderAnchor,\n    anchorRef: externalAnchorRef,\n    anchorId: externalAnchorId,\n    children,\n    open,\n    onOpen,\n    onClose,\n    height,\n    width,\n    overlayProps,\n    focusTrapSettings,\n    focusZoneSettings,\n    side,\n    align\n  } = _ref;\n  const anchorRef = useProvidedRefOrCreate(externalAnchorRef);\n  const [overlayRef, updateOverlayRef] = useRenderForcingRef();\n  const anchorId = useSSRSafeId(externalAnchorId);\n  const onClickOutside = useCallback(() => onClose === null || onClose === void 0 ? void 0 : onClose('click-outside'), [onClose]);\n  const onEscape = useCallback(() => onClose === null || onClose === void 0 ? void 0 : onClose('escape'), [onClose]);\n  const onAnchorKeyDown = useCallback(event => {\n    if (!event.defaultPrevented) {\n      if (!open && ['ArrowDown', 'ArrowUp', ' ', 'Enter'].includes(event.key)) {\n        onOpen === null || onOpen === void 0 ? void 0 : onOpen('anchor-key-press', event);\n        event.preventDefault();\n      }\n    }\n  }, [open, onOpen]);\n  const onAnchorClick = useCallback(event => {\n    if (event.defaultPrevented || event.button !== 0) {\n      return;\n    }\n\n    if (!open) {\n      onOpen === null || onOpen === void 0 ? void 0 : onOpen('anchor-click');\n    } else {\n      onClose === null || onClose === void 0 ? void 0 : onClose('anchor-click');\n    }\n  }, [open, onOpen, onClose]);\n  const {\n    position\n  } = useAnchoredPosition({\n    anchorElementRef: anchorRef,\n    floatingElementRef: overlayRef,\n    side,\n    align\n  }, [overlayRef.current]);\n  useEffect(() => {\n    // ensure overlay ref gets cleared when closed, so position can reset between closing/re-opening\n    if (!open && overlayRef.current) {\n      updateOverlayRef(null);\n    }\n  }, [open, overlayRef, updateOverlayRef]);\n  useFocusZone({\n    containerRef: overlayRef,\n    disabled: !open || !position,\n    ...focusZoneSettings\n  });\n  useFocusTrap({\n    containerRef: overlayRef,\n    disabled: !open || !position,\n    ...focusTrapSettings\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, renderAnchor && renderAnchor({\n    ref: anchorRef,\n    id: anchorId,\n    'aria-haspopup': 'true',\n    'aria-expanded': open ? 'true' : undefined,\n    tabIndex: 0,\n    onClick: onAnchorClick,\n    onKeyDown: onAnchorKeyDown\n  }), open ? /*#__PURE__*/React.createElement(Overlay, _extends({\n    returnFocusRef: anchorRef,\n    onClickOutside: onClickOutside,\n    ignoreClickRefs: [anchorRef],\n    onEscape: onEscape,\n    ref: updateOverlayRef,\n    role: \"none\",\n    visibility: position ? 'visible' : 'hidden',\n    height: height,\n    width: width,\n    top: (position === null || position === void 0 ? void 0 : position.top) || 0,\n    left: (position === null || position === void 0 ? void 0 : position.left) || 0,\n    anchorSide: position === null || position === void 0 ? void 0 : position.anchorSide\n  }, overlayProps), children) : null);\n};\nAnchoredOverlay.displayName = 'AnchoredOverlay';\nAnchoredOverlay.defaultProps = {\n  side: 'outside-bottom',\n  align: 'start'\n};","map":{"version":3,"sources":["/Users/steve/Documents/repos/github-notifications/node_modules/@primer/react/lib-esm/AnchoredOverlay/AnchoredOverlay.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","React","useCallback","useEffect","Overlay","useFocusTrap","useFocusZone","useAnchoredPosition","useProvidedRefOrCreate","useRenderForcingRef","useSSRSafeId","AnchoredOverlay","renderAnchor","anchorRef","externalAnchorRef","anchorId","externalAnchorId","children","open","onOpen","onClose","height","width","overlayProps","focusTrapSettings","focusZoneSettings","side","align","overlayRef","updateOverlayRef","onClickOutside","onEscape","onAnchorKeyDown","event","defaultPrevented","includes","preventDefault","onAnchorClick","button","position","anchorElementRef","floatingElementRef","current","containerRef","disabled","createElement","Fragment","ref","id","undefined","tabIndex","onClick","onKeyDown","returnFocusRef","ignoreClickRefs","role","visibility","top","left","anchorSide","displayName","defaultProps"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useCallback, useEffect } from 'react';\nimport Overlay from '../Overlay';\nimport { useFocusTrap } from '../hooks/useFocusTrap';\nimport { useFocusZone } from '../hooks/useFocusZone';\nimport { useAnchoredPosition, useProvidedRefOrCreate, useRenderForcingRef } from '../hooks';\nimport { useSSRSafeId } from '@react-aria/ssr';\n\n/**\n * An `AnchoredOverlay` provides an anchor that will open a floating overlay positioned relative to the anchor.\n * The overlay can be opened and navigated using keyboard or mouse.\n */\nexport const AnchoredOverlay = ({\n  renderAnchor,\n  anchorRef: externalAnchorRef,\n  anchorId: externalAnchorId,\n  children,\n  open,\n  onOpen,\n  onClose,\n  height,\n  width,\n  overlayProps,\n  focusTrapSettings,\n  focusZoneSettings,\n  side,\n  align\n}) => {\n  const anchorRef = useProvidedRefOrCreate(externalAnchorRef);\n  const [overlayRef, updateOverlayRef] = useRenderForcingRef();\n  const anchorId = useSSRSafeId(externalAnchorId);\n  const onClickOutside = useCallback(() => onClose === null || onClose === void 0 ? void 0 : onClose('click-outside'), [onClose]);\n  const onEscape = useCallback(() => onClose === null || onClose === void 0 ? void 0 : onClose('escape'), [onClose]);\n  const onAnchorKeyDown = useCallback(event => {\n    if (!event.defaultPrevented) {\n      if (!open && ['ArrowDown', 'ArrowUp', ' ', 'Enter'].includes(event.key)) {\n        onOpen === null || onOpen === void 0 ? void 0 : onOpen('anchor-key-press', event);\n        event.preventDefault();\n      }\n    }\n  }, [open, onOpen]);\n  const onAnchorClick = useCallback(event => {\n    if (event.defaultPrevented || event.button !== 0) {\n      return;\n    }\n\n    if (!open) {\n      onOpen === null || onOpen === void 0 ? void 0 : onOpen('anchor-click');\n    } else {\n      onClose === null || onClose === void 0 ? void 0 : onClose('anchor-click');\n    }\n  }, [open, onOpen, onClose]);\n  const {\n    position\n  } = useAnchoredPosition({\n    anchorElementRef: anchorRef,\n    floatingElementRef: overlayRef,\n    side,\n    align\n  }, [overlayRef.current]);\n  useEffect(() => {\n    // ensure overlay ref gets cleared when closed, so position can reset between closing/re-opening\n    if (!open && overlayRef.current) {\n      updateOverlayRef(null);\n    }\n  }, [open, overlayRef, updateOverlayRef]);\n  useFocusZone({\n    containerRef: overlayRef,\n    disabled: !open || !position,\n    ...focusZoneSettings\n  });\n  useFocusTrap({\n    containerRef: overlayRef,\n    disabled: !open || !position,\n    ...focusTrapSettings\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, renderAnchor && renderAnchor({\n    ref: anchorRef,\n    id: anchorId,\n    'aria-haspopup': 'true',\n    'aria-expanded': open ? 'true' : undefined,\n    tabIndex: 0,\n    onClick: onAnchorClick,\n    onKeyDown: onAnchorKeyDown\n  }), open ? /*#__PURE__*/React.createElement(Overlay, _extends({\n    returnFocusRef: anchorRef,\n    onClickOutside: onClickOutside,\n    ignoreClickRefs: [anchorRef],\n    onEscape: onEscape,\n    ref: updateOverlayRef,\n    role: \"none\",\n    visibility: position ? 'visible' : 'hidden',\n    height: height,\n    width: width,\n    top: (position === null || position === void 0 ? void 0 : position.top) || 0,\n    left: (position === null || position === void 0 ? void 0 : position.left) || 0,\n    anchorSide: position === null || position === void 0 ? void 0 : position.anchorSide\n  }, overlayProps), children) : null);\n};\nAnchoredOverlay.displayName = 'AnchoredOverlay';\nAnchoredOverlay.defaultProps = {\n  side: 'outside-bottom',\n  align: 'start'\n};"]},"metadata":{},"sourceType":"module"}