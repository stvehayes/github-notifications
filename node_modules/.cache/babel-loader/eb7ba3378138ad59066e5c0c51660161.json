{"ast":null,"code":"import { useEffect } from 'react';\n/**\n * This hook will flash the scrollbars for a ref of a container that has scrollable overflow\n * @param scrollContainerRef The ref of the scrollable content\n */\n\nexport default function useScrollFlash(scrollContainerRef) {\n  // https://adxlv.computer/projects/flash-scrollers/\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n\n    if (!scrollContainer) {\n      return;\n    }\n\n    const currentScroll = scrollContainer.scrollTop;\n    const maxScroll = scrollContainer.scrollHeight;\n    const altScroll = currentScroll < Math.min(1, maxScroll) ? currentScroll + 1 : currentScroll - 1;\n    scrollContainer.scrollTop = altScroll;\n    scrollContainer.scrollTop = currentScroll;\n  }, [scrollContainerRef]);\n}","map":{"version":3,"sources":["/Users/steve/Documents/repos/notifications/node_modules/@primer/react/lib-esm/hooks/useScrollFlash.js"],"names":["useEffect","useScrollFlash","scrollContainerRef","scrollContainer","current","currentScroll","scrollTop","maxScroll","scrollHeight","altScroll","Math","min"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,cAAT,CAAwBC,kBAAxB,EAA4C;AACzD;AACAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMG,eAAe,GAAGD,kBAAkB,CAACE,OAA3C;;AAEA,QAAI,CAACD,eAAL,EAAsB;AACpB;AACD;;AAED,UAAME,aAAa,GAAGF,eAAe,CAACG,SAAtC;AACA,UAAMC,SAAS,GAAGJ,eAAe,CAACK,YAAlC;AACA,UAAMC,SAAS,GAAGJ,aAAa,GAAGK,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYJ,SAAZ,CAAhB,GAAyCF,aAAa,GAAG,CAAzD,GAA6DA,aAAa,GAAG,CAA/F;AACAF,IAAAA,eAAe,CAACG,SAAhB,GAA4BG,SAA5B;AACAN,IAAAA,eAAe,CAACG,SAAhB,GAA4BD,aAA5B;AACD,GAZQ,EAYN,CAACH,kBAAD,CAZM,CAAT;AAaD","sourcesContent":["import { useEffect } from 'react';\n/**\n * This hook will flash the scrollbars for a ref of a container that has scrollable overflow\n * @param scrollContainerRef The ref of the scrollable content\n */\n\nexport default function useScrollFlash(scrollContainerRef) {\n  // https://adxlv.computer/projects/flash-scrollers/\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n\n    if (!scrollContainer) {\n      return;\n    }\n\n    const currentScroll = scrollContainer.scrollTop;\n    const maxScroll = scrollContainer.scrollHeight;\n    const altScroll = currentScroll < Math.min(1, maxScroll) ? currentScroll + 1 : currentScroll - 1;\n    scrollContainer.scrollTop = altScroll;\n    scrollContainer.scrollTop = currentScroll;\n  }, [scrollContainerRef]);\n}"]},"metadata":{},"sourceType":"module"}