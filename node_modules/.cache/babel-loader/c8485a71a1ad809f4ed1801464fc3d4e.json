{"ast":null,"code":"import { useEffect, useCallback, useMemo } from 'react'; // Because events are handled at the document level, we provide a mechanism for early return.\n\nconst stopPropagation = true;\n/**\n * Calls all handlers in reverse order\n * @param event The MouseEvent generated by the click event.\n */\n\nfunction handleClick(event) {\n  if (!event.defaultPrevented) {\n    for (const handler of Object.values(registry).reverse()) {\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (handler(event) === stopPropagation || event.defaultPrevented) {\n        break;\n      }\n    }\n  }\n}\n\nconst registry = {};\n\nfunction register(id, handler) {\n  registry[id] = handler;\n}\n\nfunction deregister(id) {\n  delete registry[id];\n} // For auto-incrementing unique identifiers for registered handlers.\n\n\nlet handlerId = 0;\nexport const useOnOutsideClick = _ref => {\n  let {\n    containerRef,\n    ignoreClickRefs,\n    onClickOutside\n  } = _ref;\n  const id = useMemo(() => handlerId++, []);\n  const handler = useCallback(event => {\n    var _containerRef$current; // don't call click handler if the mouse event was triggered by an auxiliary button (right click/wheel button/etc)\n\n\n    if (event instanceof MouseEvent && event.button > 0) {\n      return stopPropagation;\n    } // don't call handler if the click happened inside of the container\n\n\n    if ((_containerRef$current = containerRef.current) !== null && _containerRef$current !== void 0 && _containerRef$current.contains(event.target)) {\n      return stopPropagation;\n    } // don't call handler if click happened on an ignored ref\n\n\n    if (ignoreClickRefs && ignoreClickRefs.some(_ref2 => {\n      let {\n        current\n      } = _ref2;\n      return current === null || current === void 0 ? void 0 : current.contains(event.target);\n    })) {\n      return stopPropagation;\n    }\n\n    onClickOutside(event);\n  }, [containerRef, ignoreClickRefs, onClickOutside]);\n  useEffect(() => {\n    if (Object.keys(registry).length === 0) {\n      // use capture to ensure we get all events\n      document.addEventListener('mousedown', handleClick, {\n        capture: true\n      });\n    }\n\n    register(id, handler);\n    return () => {\n      deregister(id);\n\n      if (Object.keys(registry).length === 0) {\n        document.removeEventListener('mousedown', handleClick, {\n          capture: true\n        });\n      }\n    };\n  }, [id, handler]);\n};","map":{"version":3,"sources":["/Users/steve/Documents/repos/notifications/node_modules/@primer/react/lib-esm/hooks/useOnOutsideClick.js"],"names":["useEffect","useCallback","useMemo","stopPropagation","handleClick","event","defaultPrevented","handler","Object","values","registry","reverse","register","id","deregister","handlerId","useOnOutsideClick","containerRef","ignoreClickRefs","onClickOutside","_containerRef$current","MouseEvent","button","current","contains","target","some","keys","length","document","addEventListener","capture","removeEventListener"],"mappings":"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","sourcesContent":["import { useEffect, useCallback, useMemo } from 'react';\n// Because events are handled at the document level, we provide a mechanism for early return.\nconst stopPropagation = true;\n/**\n * Calls all handlers in reverse order\n * @param event The MouseEvent generated by the click event.\n */\n\nfunction handleClick(event) {\n  if (!event.defaultPrevented) {\n    for (const handler of Object.values(registry).reverse()) {\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (handler(event) === stopPropagation || event.defaultPrevented) {\n        break;\n      }\n    }\n  }\n}\n\nconst registry = {};\n\nfunction register(id, handler) {\n  registry[id] = handler;\n}\n\nfunction deregister(id) {\n  delete registry[id];\n} // For auto-incrementing unique identifiers for registered handlers.\n\n\nlet handlerId = 0;\nexport const useOnOutsideClick = ({\n  containerRef,\n  ignoreClickRefs,\n  onClickOutside\n}) => {\n  const id = useMemo(() => handlerId++, []);\n  const handler = useCallback(event => {\n    var _containerRef$current;\n\n    // don't call click handler if the mouse event was triggered by an auxiliary button (right click/wheel button/etc)\n    if (event instanceof MouseEvent && event.button > 0) {\n      return stopPropagation;\n    } // don't call handler if the click happened inside of the container\n\n\n    if ((_containerRef$current = containerRef.current) !== null && _containerRef$current !== void 0 && _containerRef$current.contains(event.target)) {\n      return stopPropagation;\n    } // don't call handler if click happened on an ignored ref\n\n\n    if (ignoreClickRefs && ignoreClickRefs.some(({\n      current\n    }) => current === null || current === void 0 ? void 0 : current.contains(event.target))) {\n      return stopPropagation;\n    }\n\n    onClickOutside(event);\n  }, [containerRef, ignoreClickRefs, onClickOutside]);\n  useEffect(() => {\n    if (Object.keys(registry).length === 0) {\n      // use capture to ensure we get all events\n      document.addEventListener('mousedown', handleClick, {\n        capture: true\n      });\n    }\n\n    register(id, handler);\n    return () => {\n      deregister(id);\n\n      if (Object.keys(registry).length === 0) {\n        document.removeEventListener('mousedown', handleClick, {\n          capture: true\n        });\n      }\n    };\n  }, [id, handler]);\n};"]},"metadata":{},"sourceType":"module"}