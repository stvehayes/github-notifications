{"ast":null,"code":"import Keys, { modifiers } from './keys';\n\nfunction parseKeys(keysArray) {\n  return keysArray.map(function (key) {\n    var keySet = {\n      key: key\n    };\n\n    if (typeof key === 'string') {\n      var keyString = key.toLowerCase().trim();\n      var matches = keyString.split(/\\s?\\+\\s?/);\n      keySet = matches.length === 1 ? {\n        key: Keys[keyString]\n      } : {\n        key: Keys[matches.pop()],\n        modifiers: matches.map(function (modKey) {\n          return modifiers[modKey];\n        }).sort()\n      };\n    }\n\n    return keySet;\n  });\n}\n\nexport default parseKeys;","map":{"version":3,"sources":["/Users/steve/Documents/repos/notifications/node_modules/react-keydown/es/lib/parse_keys.js"],"names":["Keys","modifiers","parseKeys","keysArray","map","key","keySet","keyString","toLowerCase","trim","matches","split","length","pop","modKey","sort"],"mappings":"AAAA,OAAOA,IAAP,IAAeC,SAAf,QAAgC,QAAhC;;AAEA,SAASC,SAAT,CAAmBC,SAAnB,EAA8B;AAC5B,SAAOA,SAAS,CAACC,GAAV,CAAc,UAAUC,GAAV,EAAe;AAClC,QAAIC,MAAM,GAAG;AAAED,MAAAA,GAAG,EAAEA;AAAP,KAAb;;AACA,QAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3B,UAAIE,SAAS,GAAGF,GAAG,CAACG,WAAJ,GAAkBC,IAAlB,EAAhB;AACA,UAAIC,OAAO,GAAGH,SAAS,CAACI,KAAV,CAAgB,UAAhB,CAAd;AACAL,MAAAA,MAAM,GAAGI,OAAO,CAACE,MAAR,KAAmB,CAAnB,GAAuB;AAAEP,QAAAA,GAAG,EAAEL,IAAI,CAACO,SAAD;AAAX,OAAvB,GAAkD;AACzDF,QAAAA,GAAG,EAAEL,IAAI,CAACU,OAAO,CAACG,GAAR,EAAD,CADgD;AAEzDZ,QAAAA,SAAS,EAAES,OAAO,CAACN,GAAR,CAAY,UAAUU,MAAV,EAAkB;AACvC,iBAAOb,SAAS,CAACa,MAAD,CAAhB;AACD,SAFU,EAERC,IAFQ;AAF8C,OAA3D;AAMD;;AACD,WAAOT,MAAP;AACD,GAbM,CAAP;AAcD;;AAED,eAAeJ,SAAf","sourcesContent":["import Keys, { modifiers } from './keys';\n\nfunction parseKeys(keysArray) {\n  return keysArray.map(function (key) {\n    var keySet = { key: key };\n    if (typeof key === 'string') {\n      var keyString = key.toLowerCase().trim();\n      var matches = keyString.split(/\\s?\\+\\s?/);\n      keySet = matches.length === 1 ? { key: Keys[keyString] } : {\n        key: Keys[matches.pop()],\n        modifiers: matches.map(function (modKey) {\n          return modifiers[modKey];\n        }).sort()\n      };\n    }\n    return keySet;\n  });\n}\n\nexport default parseKeys;"]},"metadata":{},"sourceType":"module"}