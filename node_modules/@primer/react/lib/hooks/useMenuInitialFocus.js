"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMenuInitialFocus = void 0;

var _react = _interopRequireDefault(require("react"));

var _utils = require("@primer/behaviors/utils");

var _useProvidedRefOrCreate = require("./useProvidedRefOrCreate");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const useMenuInitialFocus = (open, onOpen, providedRef) => {
  const containerRef = (0, _useProvidedRefOrCreate.useProvidedRefOrCreate)(providedRef);

  const [openingKey, setOpeningKey] = _react.default.useState(undefined);

  const openWithFocus = (gesture, event) => {
    if (gesture === 'anchor-key-press' && event) setOpeningKey(event.code);else setOpeningKey(undefined);
    if (typeof onOpen === 'function') onOpen(gesture, event);
  };
  /**
   * Pick the first element to focus based on the key used to open the Menu
   * ArrowDown | Space | Enter: first element
   * ArrowUp: last element
   */


  _react.default.useEffect(() => {
    if (!open) return;
    if (!openingKey || !containerRef.current) return;
    const iterable = (0, _utils.iterateFocusableElements)(containerRef.current);

    if (['ArrowDown', 'Space', 'Enter'].includes(openingKey)) {
      const firstElement = iterable.next().value;
      /** We push imperative focus to the next tick to prevent React's batching */

      setTimeout(() => firstElement === null || firstElement === void 0 ? void 0 : firstElement.focus());
    } else if (['ArrowUp'].includes(openingKey)) {
      const elements = [...iterable];
      const lastElement = elements[elements.length - 1];
      setTimeout(() => lastElement.focus());
    }
  }, [open, openingKey, containerRef]);

  return {
    containerRef,
    openWithFocus
  };
};

exports.useMenuInitialFocus = useMenuInitialFocus;