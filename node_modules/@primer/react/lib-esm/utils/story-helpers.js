import React from 'react';
import { Box, ThemeProvider, theme, themeGet, BaseStyles } from '../index';
import { createGlobalStyle } from 'styled-components'; // set global theme styles for each story

const GlobalStyle = createGlobalStyle(["body{background-color:", ";color:", ";}"], themeGet('colors.canvas.default'), themeGet('colors.fg.default')); // only remove padding for multi-theme view grid

const GlobalStyleMultiTheme = createGlobalStyle(["body{padding:0 !important;}"]); // we don't import StoryContext from storybook because of exports that conflict
// with primer/react more: https://github.com/primer/react/runs/6129115026?check_suite_focus=true

export const withThemeProvider = (Story, context) => {
  // used for testing ThemeProvider.stories.tsx
  if (context.parameters.disableThemeDecorator) return /*#__PURE__*/React.createElement(Story, context);
  const {
    colorScheme
  } = context.globals;

  if (colorScheme === 'all') {
    return /*#__PURE__*/React.createElement(Box, {
      sx: {
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(0, 1fr))',
        height: '100vh'
      }
    }, /*#__PURE__*/React.createElement(GlobalStyleMultiTheme, null), Object.keys(theme.colorSchemes).map(scheme => /*#__PURE__*/React.createElement(ThemeProvider, {
      key: scheme,
      colorMode: "day",
      dayScheme: scheme
    }, /*#__PURE__*/React.createElement(BaseStyles, null, /*#__PURE__*/React.createElement(Box, {
      sx: {
        padding: '1rem',
        height: '100%',
        backgroundColor: 'canvas.default',
        color: 'fg.default'
      }
    }, /*#__PURE__*/React.createElement("div", {
      id: `html-addon-root-${scheme}`
    }, /*#__PURE__*/React.createElement(Story, context)))))));
  }

  return /*#__PURE__*/React.createElement(ThemeProvider, {
    colorMode: "day",
    dayScheme: colorScheme
  }, /*#__PURE__*/React.createElement(GlobalStyle, null), /*#__PURE__*/React.createElement(BaseStyles, null, /*#__PURE__*/React.createElement("div", {
    id: "html-addon-root"
  }, /*#__PURE__*/React.createElement(Story, context))));
};
withThemeProvider.displayName = "withThemeProvider";
export const toolbarTypes = {
  colorScheme: {
    name: 'Color scheme',
    description: 'Switch color scheme',
    defaultValue: 'light',
    toolbar: {
      icon: 'photo',
      items: [...Object.keys(theme.colorSchemes), 'all'],
      showName: true
    }
  }
};