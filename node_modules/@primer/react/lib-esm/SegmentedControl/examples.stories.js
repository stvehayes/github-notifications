function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useState } from 'react';
import { BaseStyles, ThemeProvider } from '..';
import { SegmentedControl } from '.';
import { EyeIcon, FileCodeIcon, PeopleIcon } from '@primer/octicons-react';
const excludedControlKeys = ['aria-label', 'onChange', 'sx'];
export default {
  title: 'SegmentedControl/examples',
  component: SegmentedControl,
  argTypes: {
    fullWidth: {
      defaultValue: false,
      control: {
        type: 'boolean'
      }
    },
    loading: {
      defaultValue: false,
      control: {
        type: 'boolean'
      }
    }
  },
  parameters: {
    controls: {
      exclude: excludedControlKeys
    }
  },
  decorators: [Story => {
    return /*#__PURE__*/React.createElement(ThemeProvider, null, /*#__PURE__*/React.createElement(BaseStyles, null, /*#__PURE__*/React.createElement(Story, null)));
  }]
};
export const Default = args => /*#__PURE__*/React.createElement(SegmentedControl, _extends({
  "aria-label": "File view"
}, args), /*#__PURE__*/React.createElement(SegmentedControl.Button, {
  selected: true
}, "Preview"), /*#__PURE__*/React.createElement(SegmentedControl.Button, null, "Raw"), /*#__PURE__*/React.createElement(SegmentedControl.Button, null, "Blame"));
Default.displayName = "Default";
export const Controlled = args => {
  const [selectedIndex, setSelectedIndex] = useState(1);

  const handleChange = i => {
    setSelectedIndex(i);
  };

  return /*#__PURE__*/React.createElement(SegmentedControl, _extends({
    "aria-label": "File view",
    onChange: handleChange
  }, args), /*#__PURE__*/React.createElement(SegmentedControl.Button, {
    selected: selectedIndex === 0
  }, "Preview"), /*#__PURE__*/React.createElement(SegmentedControl.Button, {
    selected: selectedIndex === 1
  }, "Raw"), /*#__PURE__*/React.createElement(SegmentedControl.Button, {
    selected: selectedIndex === 2
  }, "Blame"));
};
Controlled.displayName = "Controlled";
export const WithIconsAndLabels = args => /*#__PURE__*/React.createElement(SegmentedControl, _extends({
  "aria-label": "File view"
}, args), /*#__PURE__*/React.createElement(SegmentedControl.Button, {
  selected: true,
  leadingIcon: EyeIcon
}, "Preview"), /*#__PURE__*/React.createElement(SegmentedControl.Button, {
  leadingIcon: FileCodeIcon
}, "Raw"), /*#__PURE__*/React.createElement(SegmentedControl.Button, {
  leadingIcon: PeopleIcon
}, "Blame"));
WithIconsAndLabels.displayName = "WithIconsAndLabels";
export const IconsOnly = args => /*#__PURE__*/React.createElement(SegmentedControl, _extends({
  "aria-label": "File view"
}, args), /*#__PURE__*/React.createElement(SegmentedControl.IconButton, {
  selected: true,
  icon: EyeIcon,
  "aria-label": "Preview"
}), /*#__PURE__*/React.createElement(SegmentedControl.IconButton, {
  icon: FileCodeIcon,
  "aria-label": "Raw"
}), /*#__PURE__*/React.createElement(SegmentedControl.IconButton, {
  icon: PeopleIcon,
  "aria-label": "Blame"
}));
IconsOnly.displayName = "IconsOnly";