{"ast":null,"code":"import { useCallback, useEffect, useRef } from 'react';\n/**\n * Safely call `setTimeout` and `clearTimeout` within a component.\n *\n * This hook ensures that all timeouts are cleared when the component unmounts.\n */\n\nexport default function useSafeTimeout() {\n  const timers = useRef(new Set());\n  const safeSetTimeout = useCallback(function (handler, timeout) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    const id = window.setTimeout(handler, timeout, ...args);\n    timers.current.add(id);\n    return id;\n  }, []);\n  const safeClearTimeout = useCallback(id => {\n    clearTimeout(id);\n    timers.current.delete(id);\n  }, []);\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      for (const id of timers.current) {\n        clearTimeout(id);\n      }\n    };\n  }, []);\n  return {\n    safeSetTimeout,\n    safeClearTimeout\n  };\n}","map":{"version":3,"sources":["/Users/steve/Documents/repos/github-notifications/node_modules/@primer/react/lib-esm/hooks/useSafeTimeout.js"],"names":["useCallback","useEffect","useRef","useSafeTimeout","timers","Set","safeSetTimeout","handler","timeout","args","id","window","setTimeout","current","add","safeClearTimeout","clearTimeout","delete"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,QAA+C,OAA/C;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,cAAT,GAA0B;AACvC,QAAMC,MAAM,GAAGF,MAAM,CAAC,IAAIG,GAAJ,EAAD,CAArB;AACA,QAAMC,cAAc,GAAGN,WAAW,CAAC,UAACO,OAAD,EAAUC,OAAV,EAA+B;AAAA,sCAATC,IAAS;AAATA,MAAAA,IAAS;AAAA;;AAChE,UAAMC,EAAE,GAAGC,MAAM,CAACC,UAAP,CAAkBL,OAAlB,EAA2BC,OAA3B,EAAoC,GAAGC,IAAvC,CAAX;AACAL,IAAAA,MAAM,CAACS,OAAP,CAAeC,GAAf,CAAmBJ,EAAnB;AACA,WAAOA,EAAP;AACD,GAJiC,EAI/B,EAJ+B,CAAlC;AAKA,QAAMK,gBAAgB,GAAGf,WAAW,CAACU,EAAE,IAAI;AACzCM,IAAAA,YAAY,CAACN,EAAD,CAAZ;AACAN,IAAAA,MAAM,CAACS,OAAP,CAAeI,MAAf,CAAsBP,EAAtB;AACD,GAHmC,EAGjC,EAHiC,CAApC;AAIAT,EAAAA,SAAS,CAAC,MAAM;AACd,WAAO,MAAM;AACX;AACA,WAAK,MAAMS,EAAX,IAAiBN,MAAM,CAACS,OAAxB,EAAiC;AAC/BG,QAAAA,YAAY,CAACN,EAAD,CAAZ;AACD;AACF,KALD;AAMD,GAPQ,EAON,EAPM,CAAT;AAQA,SAAO;AACLJ,IAAAA,cADK;AAELS,IAAAA;AAFK,GAAP;AAID","sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\n\n/**\n * Safely call `setTimeout` and `clearTimeout` within a component.\n *\n * This hook ensures that all timeouts are cleared when the component unmounts.\n */\nexport default function useSafeTimeout() {\n  const timers = useRef(new Set());\n  const safeSetTimeout = useCallback((handler, timeout, ...args) => {\n    const id = window.setTimeout(handler, timeout, ...args);\n    timers.current.add(id);\n    return id;\n  }, []);\n  const safeClearTimeout = useCallback(id => {\n    clearTimeout(id);\n    timers.current.delete(id);\n  }, []);\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      for (const id of timers.current) {\n        clearTimeout(id);\n      }\n    };\n  }, []);\n  return {\n    safeSetTimeout,\n    safeClearTimeout\n  };\n}"]},"metadata":{},"sourceType":"module"}