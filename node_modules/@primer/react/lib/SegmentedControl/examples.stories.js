"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IconsOnly = exports.WithIconsAndLabels = exports.Controlled = exports.Default = exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _ = require("..");

var _2 = require(".");

var _octiconsReact = require("@primer/octicons-react");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const excludedControlKeys = ['aria-label', 'onChange', 'sx'];
var _default = {
  title: 'SegmentedControl/examples',
  component: _2.SegmentedControl,
  argTypes: {
    fullWidth: {
      defaultValue: false,
      control: {
        type: 'boolean'
      }
    },
    loading: {
      defaultValue: false,
      control: {
        type: 'boolean'
      }
    }
  },
  parameters: {
    controls: {
      exclude: excludedControlKeys
    }
  },
  decorators: [Story => {
    return /*#__PURE__*/_react.default.createElement(_.ThemeProvider, null, /*#__PURE__*/_react.default.createElement(_.BaseStyles, null, /*#__PURE__*/_react.default.createElement(Story, null)));
  }]
};
exports.default = _default;

const Default = args => /*#__PURE__*/_react.default.createElement(_2.SegmentedControl, _extends({
  "aria-label": "File view"
}, args), /*#__PURE__*/_react.default.createElement(_2.SegmentedControl.Button, {
  selected: true
}, "Preview"), /*#__PURE__*/_react.default.createElement(_2.SegmentedControl.Button, null, "Raw"), /*#__PURE__*/_react.default.createElement(_2.SegmentedControl.Button, null, "Blame"));

exports.Default = Default;
Default.displayName = "Default";

const Controlled = args => {
  const [selectedIndex, setSelectedIndex] = (0, _react.useState)(1);

  const handleChange = i => {
    setSelectedIndex(i);
  };

  return /*#__PURE__*/_react.default.createElement(_2.SegmentedControl, _extends({
    "aria-label": "File view",
    onChange: handleChange
  }, args), /*#__PURE__*/_react.default.createElement(_2.SegmentedControl.Button, {
    selected: selectedIndex === 0
  }, "Preview"), /*#__PURE__*/_react.default.createElement(_2.SegmentedControl.Button, {
    selected: selectedIndex === 1
  }, "Raw"), /*#__PURE__*/_react.default.createElement(_2.SegmentedControl.Button, {
    selected: selectedIndex === 2
  }, "Blame"));
};

exports.Controlled = Controlled;
Controlled.displayName = "Controlled";

const WithIconsAndLabels = args => /*#__PURE__*/_react.default.createElement(_2.SegmentedControl, _extends({
  "aria-label": "File view"
}, args), /*#__PURE__*/_react.default.createElement(_2.SegmentedControl.Button, {
  selected: true,
  leadingIcon: _octiconsReact.EyeIcon
}, "Preview"), /*#__PURE__*/_react.default.createElement(_2.SegmentedControl.Button, {
  leadingIcon: _octiconsReact.FileCodeIcon
}, "Raw"), /*#__PURE__*/_react.default.createElement(_2.SegmentedControl.Button, {
  leadingIcon: _octiconsReact.PeopleIcon
}, "Blame"));

exports.WithIconsAndLabels = WithIconsAndLabels;
WithIconsAndLabels.displayName = "WithIconsAndLabels";

const IconsOnly = args => /*#__PURE__*/_react.default.createElement(_2.SegmentedControl, _extends({
  "aria-label": "File view"
}, args), /*#__PURE__*/_react.default.createElement(_2.SegmentedControl.IconButton, {
  selected: true,
  icon: _octiconsReact.EyeIcon,
  "aria-label": "Preview"
}), /*#__PURE__*/_react.default.createElement(_2.SegmentedControl.IconButton, {
  icon: _octiconsReact.FileCodeIcon,
  "aria-label": "Raw"
}), /*#__PURE__*/_react.default.createElement(_2.SegmentedControl.IconButton, {
  icon: _octiconsReact.PeopleIcon,
  "aria-label": "Blame"
}));

exports.IconsOnly = IconsOnly;
IconsOnly.displayName = "IconsOnly";