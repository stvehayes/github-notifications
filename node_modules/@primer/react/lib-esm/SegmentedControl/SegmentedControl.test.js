import React from 'react';
import '@testing-library/jest-dom/extend-expect';
import { render } from '@testing-library/react';
import { EyeIcon, FileCodeIcon, PeopleIcon } from '@primer/octicons-react';
import userEvent from '@testing-library/user-event';
import { behavesAsComponent, checkExports, checkStoriesForAxeViolations } from '../utils/testing';
import { SegmentedControl } from '.'; // TODO: update import when we move this to the global index

const segmentData = [{
  label: 'Preview',
  iconLabel: 'EyeIcon',
  icon: () => /*#__PURE__*/React.createElement(EyeIcon, {
    "aria-label": "EyeIcon"
  })
}, {
  label: 'Raw',
  iconLabel: 'FileCodeIcon',
  icon: () => /*#__PURE__*/React.createElement(FileCodeIcon, {
    "aria-label": "FileCodeIcon"
  })
}, {
  label: 'Blame',
  iconLabel: 'PeopleIcon',
  icon: () => /*#__PURE__*/React.createElement(PeopleIcon, {
    "aria-label": "PeopleIcon"
  })
}]; // TODO: improve test coverage

describe('SegmentedControl', () => {
  behavesAsComponent({
    Component: SegmentedControl,
    toRender: () => /*#__PURE__*/React.createElement(SegmentedControl, {
      "aria-label": "File view"
    }, /*#__PURE__*/React.createElement(SegmentedControl.Button, {
      selected: true
    }, "Preview"), /*#__PURE__*/React.createElement(SegmentedControl.Button, null, "Raw"), /*#__PURE__*/React.createElement(SegmentedControl.Button, null, "Blame"))
  });
  checkExports('SegmentedControl', {
    default: undefined,
    SegmentedControl
  });
  it('renders with a selected segment', () => {
    const {
      getByText
    } = render( /*#__PURE__*/React.createElement(SegmentedControl, {
      "aria-label": "File view"
    }, segmentData.map(({
      label
    }, index) => /*#__PURE__*/React.createElement(SegmentedControl.Button, {
      selected: index === 1,
      key: label
    }, label))));
    const selectedButton = getByText('Raw').closest('button');
    expect(selectedButton === null || selectedButton === void 0 ? void 0 : selectedButton.getAttribute('aria-current')).toBe('true');
  });
  it('renders the first segment as selected if no child has the `selected` prop passed', () => {
    const {
      getByText
    } = render( /*#__PURE__*/React.createElement(SegmentedControl, {
      "aria-label": "File view"
    }, segmentData.map(({
      label
    }) => /*#__PURE__*/React.createElement(SegmentedControl.Button, {
      key: label
    }, label))));
    const selectedButton = getByText('Preview').closest('button');
    expect(selectedButton === null || selectedButton === void 0 ? void 0 : selectedButton.getAttribute('aria-current')).toBe('true');
  });
  it('renders segments with segment labels that have leading icons', () => {
    const {
      getByLabelText
    } = render( /*#__PURE__*/React.createElement(SegmentedControl, {
      "aria-label": "File view"
    }, segmentData.map(({
      label,
      icon
    }, index) => /*#__PURE__*/React.createElement(SegmentedControl.Button, {
      selected: index === 0,
      leadingIcon: icon,
      key: label
    }, label))));

    for (const datum of segmentData) {
      const iconEl = getByLabelText(datum.iconLabel);
      expect(iconEl).toBeDefined();
    }
  });
  it('renders segments with accessible icon-only labels', () => {
    const {
      getByLabelText
    } = render( /*#__PURE__*/React.createElement(SegmentedControl, {
      "aria-label": "File view"
    }, segmentData.map(({
      label,
      icon
    }) => /*#__PURE__*/React.createElement(SegmentedControl.IconButton, {
      icon: icon,
      "aria-label": label,
      key: label
    }))));

    for (const datum of segmentData) {
      const labelledButton = getByLabelText(datum.label);
      expect(labelledButton).toBeDefined();
    }
  });
  it('calls onChange with index of clicked segment button', () => {
    const handleChange = jest.fn();
    const {
      getByText
    } = render( /*#__PURE__*/React.createElement(SegmentedControl, {
      "aria-label": "File view",
      onChange: handleChange
    }, segmentData.map(({
      label
    }, index) => /*#__PURE__*/React.createElement(SegmentedControl.Button, {
      selected: index === 0,
      key: label
    }, label))));
    const buttonToClick = getByText('Raw').closest('button');
    expect(handleChange).not.toHaveBeenCalled();

    if (buttonToClick) {
      userEvent.click(buttonToClick);
    }

    expect(handleChange).toHaveBeenCalledWith(1);
  });
  it('calls segment button onClick if it is passed', () => {
    const handleClick = jest.fn();
    const {
      getByText
    } = render( /*#__PURE__*/React.createElement(SegmentedControl, {
      "aria-label": "File view"
    }, segmentData.map(({
      label
    }, index) => /*#__PURE__*/React.createElement(SegmentedControl.Button, {
      selected: index === 0,
      onClick: index === 1 ? handleClick : undefined,
      key: label
    }, label))));
    const buttonToClick = getByText('Raw').closest('button');
    expect(handleClick).not.toHaveBeenCalled();

    if (buttonToClick) {
      userEvent.click(buttonToClick);
    }

    expect(handleClick).toHaveBeenCalled();
  });
});
checkStoriesForAxeViolations('examples', '../SegmentedControl/');
checkStoriesForAxeViolations('fixtures', '../SegmentedControl/');